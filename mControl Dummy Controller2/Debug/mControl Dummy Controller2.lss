
mControl Dummy Controller2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000218  00802000  00003d96  00003e2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000654  00802218  00802218  00004042  2**0
                  ALLOC
  3 .stab         00001008  00000000  00000000  00004044  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000003fd  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000968  00000000  00000000  00005450  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000156f  00000000  00000000  00005db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000096f6  00000000  00000000  00007327  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000244c  00000000  00000000  00010a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000d49e  00000000  00000000  00012e69  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000f00  00000000  00000000  00020308  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003a85  00000000  00000000  00021208  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001b0c  00000000  00000000  00024c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 002e719b  00000000  00000000  00026799  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00001475  00000000  00000000  0030d934  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007e8  00000000  00000000  0030edb0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
       0:	f3 c1       	rjmp	.+998    	; 0x3e8 <__ctors_end>
	movw    r30, r24                // Load addr into Z
       2:	00 00       	nop
	ldi     r18, CCP_IOREG          // Load magic CCP value
       4:	12 c2       	rjmp	.+1060   	; 0x42a <__bad_interrupt>
	out     CCP, r18                // Start CCP handshake
       6:	00 00       	nop
	st      Z, r22                  // Write value to I/O register
       8:	10 c2       	rjmp	.+1056   	; 0x42a <__bad_interrupt>
	ret                             // Return to caller
       a:	00 00       	nop
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
	mov ZL, r22               ; Load byte index into low byte of Z.
	mov ZH, r23               ; Load high byte into Z.
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
	lpm r24, Z                ; Perform an LPM to read out byte
       c:	0e c2       	rjmp	.+1052   	; 0x42a <__bad_interrupt>
	sts NVM_CMD, r20          ; Restore NVM command register
       e:	00 00       	nop
	out RAMPZ, r24        ; Load R24 into RAMPZ
	movw ZL, r22          ; Load R22:R23 into Z.
	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
	sts NVM_CMD, r20      ; Load prepared command into NVM Command register. 
	ldi r23, CCP_SPM_gc   ; Prepare Protect SPM signature (r23 is no longer needed)
	sts CCP, r23          ; Enable SPM operation (this disables interrupts for 4 cycles).
      10:	0c c2       	rjmp	.+1048   	; 0x42a <__bad_interrupt>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
      12:	00 00       	nop
	movw ZL, r22          ; Load R22:R23 into Z.
	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
	sts NVM_CMD, r20      ; Load prepared command into NVM Command register. 
	ldi r23, CCP_SPM_gc   ; Prepare Protect SPM signature (r23 is no longer needed)
	sts CCP, r23          ; Enable SPM operation (this disables interrupts for 4 cycles).
	spm                   ; Self-program.
      14:	0a c2       	rjmp	.+1044   	; 0x42a <__bad_interrupt>
	sts NVM_CMD, r24      ; Restore NVM command register
      16:	00 00       	nop
      18:	08 c2       	rjmp	.+1040   	; 0x42a <__bad_interrupt>
	out RAMPZ, r25        ; Restore RAMPZ register.
      1a:	00 00       	nop
	spm                   ; Self-program.
	sts NVM_CMD, r18      ; Restore NVM command register
	out RAMPZ, r19        ; Restore RAMPZ register.
#endif

	ret
      1c:	06 c2       	rjmp	.+1036   	; 0x42a <__bad_interrupt>
	 * For GCC:
	 * \param word_addr uint32_t r22:r25
	 * \param data      uint16_t r20:r21
	 */
wait_nvm:
	lds r18, NVM_STATUS
      1e:	00 00       	nop
      20:	04 c2       	rjmp	.+1032   	; 0x42a <__bad_interrupt>
	sbrc r18, NVM_NVMBUSY_bp
      22:	00 00       	nop
	rjmp wait_nvm
      24:	02 c2       	rjmp	.+1028   	; 0x42a <__bad_interrupt>

	in r25, RAMPZ         ; Store RAMPZ. Highest address byte is ignored, so using that
      26:	00 00       	nop
	out RAMPZ, r24        ; Load R24 into RAMPZ
      28:	00 c2       	rjmp	.+1024   	; 0x42a <__bad_interrupt>
	movw ZL, r22          ; Load R22:R23 into Z.
      2a:	00 00       	nop

	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
      2c:	fe c1       	rjmp	.+1020   	; 0x42a <__bad_interrupt>
      2e:	00 00       	nop
	ldi r18, NVM_CMD_LOAD_FLASH_BUFFER_gc
      30:	fc c1       	rjmp	.+1016   	; 0x42a <__bad_interrupt>
	sts NVM_CMD, r18      ; Load prepared command into NVM Command register.
      32:	00 00       	nop
      34:	fa c1       	rjmp	.+1012   	; 0x42a <__bad_interrupt>

	movw r0, r20          ; Load R20:R21 into R0:R1
      36:	00 00       	nop
	spm                   ; Self-program.
      38:	46 c3       	rjmp	.+1676   	; 0x6c6 <__vector_14>

	clr r1                ; Clear R1 for GCC _zero_reg_ to function properly.
      3a:	00 00       	nop
	sts NVM_CMD, r24      ; Restore NVM command register
      3c:	7e c3       	rjmp	.+1788   	; 0x73a <__vector_15>
      3e:	00 00       	nop
	out RAMPZ, r25        ; Restore RAMPZ register.
      40:	b6 c3       	rjmp	.+1900   	; 0x7ae <__vector_16>

	sts NVM_CMD, r18      ; Restore NVM command register
	out RAMPZ, r19        ; Restore RAMPZ register.
#endif

	ret
      42:	00 00       	nop
	--sleepmgr_locks[mode];

	// Leave the critical section
	cpu_irq_restore(flags);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
      44:	ee c3       	rjmp	.+2012   	; 0x822 <__vector_17>
					//somfy_control_moveMomentary(incoming_pkt.)
				}
			}
		}
	}	
}
      46:	00 00       	nop
	somfy_debug_TxPgmMem(ctrl_stop_dbg);
	#endif
	#ifdef DEBUG_PKT_TX
	somfy_display_packet_Tx(&pkt);
	#endif	
}
      48:	26 c4       	rjmp	.+2124   	; 0x896 <__vector_18>
      4a:	00 00       	nop
      4c:	5e c4       	rjmp	.+2236   	; 0x90a <__vector_19>
      4e:	00 00       	nop
      50:	96 c4       	rjmp	.+2348   	; 0x97e <__vector_20>
      52:	00 00       	nop
      54:	ce c4       	rjmp	.+2460   	; 0x9f2 <__vector_21>
      56:	00 00       	nop
      58:	06 c5       	rjmp	.+2572   	; 0xa66 <__vector_22>
      5a:	00 00       	nop
      5c:	3e c5       	rjmp	.+2684   	; 0xada <__vector_23>
      5e:	00 00       	nop
      60:	e4 c1       	rjmp	.+968    	; 0x42a <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__vector_25>
      68:	e0 c1       	rjmp	.+960    	; 0x42a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__vector_27>
      70:	0c 94 81 12 	jmp	0x2502	; 0x2502 <__vector_28>
      74:	da c1       	rjmp	.+948    	; 0x42a <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <__vector_30>
      7c:	d6 c1       	rjmp	.+940    	; 0x42a <__bad_interrupt>
      7e:	00 00       	nop
      80:	d4 c1       	rjmp	.+936    	; 0x42a <__bad_interrupt>
      82:	00 00       	nop
      84:	d2 c1       	rjmp	.+932    	; 0x42a <__bad_interrupt>
      86:	00 00       	nop
      88:	d0 c1       	rjmp	.+928    	; 0x42a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ce c1       	rjmp	.+924    	; 0x42a <__bad_interrupt>
      8e:	00 00       	nop
      90:	cc c1       	rjmp	.+920    	; 0x42a <__bad_interrupt>
      92:	00 00       	nop
      94:	ca c1       	rjmp	.+916    	; 0x42a <__bad_interrupt>
      96:	00 00       	nop
      98:	c8 c1       	rjmp	.+912    	; 0x42a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c6 c1       	rjmp	.+908    	; 0x42a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c4 c1       	rjmp	.+904    	; 0x42a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c2 c1       	rjmp	.+900    	; 0x42a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c0 c1       	rjmp	.+896    	; 0x42a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	be c1       	rjmp	.+892    	; 0x42a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	bc c1       	rjmp	.+888    	; 0x42a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ba c1       	rjmp	.+884    	; 0x42a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b8 c1       	rjmp	.+880    	; 0x42a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	8c c7       	rjmp	.+3864   	; 0xfd6 <__vector_47>
      be:	00 00       	nop
      c0:	c4 c7       	rjmp	.+3976   	; 0x104a <__vector_48>
      c2:	00 00       	nop
      c4:	fc c7       	rjmp	.+4088   	; 0x10be <__vector_49>
      c6:	00 00       	nop
      c8:	0c 94 99 08 	jmp	0x1132	; 0x1132 <__vector_50>
      cc:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__vector_51>
      d0:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__vector_52>
      d4:	0c 94 47 09 	jmp	0x128e	; 0x128e <__vector_53>
      d8:	0c 94 81 09 	jmp	0x1302	; 0x1302 <__vector_54>
      dc:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <__vector_55>
      e0:	0c 94 f5 09 	jmp	0x13ea	; 0x13ea <__vector_56>
      e4:	a2 c1       	rjmp	.+836    	; 0x42a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	a0 c1       	rjmp	.+832    	; 0x42a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	9e c1       	rjmp	.+828    	; 0x42a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	9c c1       	rjmp	.+824    	; 0x42a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	9a c1       	rjmp	.+820    	; 0x42a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	98 c1       	rjmp	.+816    	; 0x42a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	96 c1       	rjmp	.+812    	; 0x42a <__bad_interrupt>
      fe:	00 00       	nop
     100:	94 c1       	rjmp	.+808    	; 0x42a <__bad_interrupt>
     102:	00 00       	nop
     104:	92 c1       	rjmp	.+804    	; 0x42a <__bad_interrupt>
     106:	00 00       	nop
     108:	90 c1       	rjmp	.+800    	; 0x42a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	8e c1       	rjmp	.+796    	; 0x42a <__bad_interrupt>
     10e:	00 00       	nop
     110:	8c c1       	rjmp	.+792    	; 0x42a <__bad_interrupt>
     112:	00 00       	nop
     114:	8a c1       	rjmp	.+788    	; 0x42a <__bad_interrupt>
     116:	00 00       	nop
     118:	88 c1       	rjmp	.+784    	; 0x42a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	86 c1       	rjmp	.+780    	; 0x42a <__bad_interrupt>
     11e:	00 00       	nop
     120:	84 c1       	rjmp	.+776    	; 0x42a <__bad_interrupt>
     122:	00 00       	nop
     124:	82 c1       	rjmp	.+772    	; 0x42a <__bad_interrupt>
     126:	00 00       	nop
     128:	80 c1       	rjmp	.+768    	; 0x42a <__bad_interrupt>
     12a:	00 00       	nop
     12c:	7e c1       	rjmp	.+764    	; 0x42a <__bad_interrupt>
     12e:	00 00       	nop
     130:	7c c1       	rjmp	.+760    	; 0x42a <__bad_interrupt>
     132:	00 00       	nop
     134:	0c c5       	rjmp	.+2584   	; 0xb4e <__vector_77>
     136:	00 00       	nop
     138:	44 c5       	rjmp	.+2696   	; 0xbc2 <__vector_78>
     13a:	00 00       	nop
     13c:	7c c5       	rjmp	.+2808   	; 0xc36 <__vector_79>
     13e:	00 00       	nop
     140:	b4 c5       	rjmp	.+2920   	; 0xcaa <__vector_80>
     142:	00 00       	nop
     144:	ec c5       	rjmp	.+3032   	; 0xd1e <__vector_81>
     146:	00 00       	nop
     148:	24 c6       	rjmp	.+3144   	; 0xd92 <__vector_82>
     14a:	00 00       	nop
     14c:	5c c6       	rjmp	.+3256   	; 0xe06 <__vector_83>
     14e:	00 00       	nop
     150:	94 c6       	rjmp	.+3368   	; 0xe7a <__vector_84>
     152:	00 00       	nop
     154:	cc c6       	rjmp	.+3480   	; 0xeee <__vector_85>
     156:	00 00       	nop
     158:	04 c7       	rjmp	.+3592   	; 0xf62 <__vector_86>
     15a:	00 00       	nop
     15c:	66 c1       	rjmp	.+716    	; 0x42a <__bad_interrupt>
     15e:	00 00       	nop
     160:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <__vector_88>
     164:	62 c1       	rjmp	.+708    	; 0x42a <__bad_interrupt>
     166:	00 00       	nop
     168:	0c 94 a9 12 	jmp	0x2552	; 0x2552 <__vector_90>
     16c:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__vector_91>
     170:	5c c1       	rjmp	.+696    	; 0x42a <__bad_interrupt>
     172:	00 00       	nop
     174:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__vector_93>
     178:	58 c1       	rjmp	.+688    	; 0x42a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	56 c1       	rjmp	.+684    	; 0x42a <__bad_interrupt>
     17e:	00 00       	nop
     180:	54 c1       	rjmp	.+680    	; 0x42a <__bad_interrupt>
     182:	00 00       	nop
     184:	52 c1       	rjmp	.+676    	; 0x42a <__bad_interrupt>
     186:	00 00       	nop
     188:	50 c1       	rjmp	.+672    	; 0x42a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	4e c1       	rjmp	.+668    	; 0x42a <__bad_interrupt>
     18e:	00 00       	nop
     190:	4c c1       	rjmp	.+664    	; 0x42a <__bad_interrupt>
     192:	00 00       	nop
     194:	4a c1       	rjmp	.+660    	; 0x42a <__bad_interrupt>
     196:	00 00       	nop
     198:	48 c1       	rjmp	.+656    	; 0x42a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	46 c1       	rjmp	.+652    	; 0x42a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	44 c1       	rjmp	.+648    	; 0x42a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	42 c1       	rjmp	.+644    	; 0x42a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	40 c1       	rjmp	.+640    	; 0x42a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	3e c1       	rjmp	.+636    	; 0x42a <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__vector_108>
     1b4:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__vector_109>
     1b8:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <__vector_110>
     1bc:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__vector_111>
     1c0:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__vector_112>
     1c4:	0c 94 51 0b 	jmp	0x16a2	; 0x16a2 <__vector_113>
     1c8:	30 c1       	rjmp	.+608    	; 0x42a <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	2e c1       	rjmp	.+604    	; 0x42a <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	2c c1       	rjmp	.+600    	; 0x42a <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	2a c1       	rjmp	.+596    	; 0x42a <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	28 c1       	rjmp	.+592    	; 0x42a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	26 c1       	rjmp	.+588    	; 0x42a <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	24 c1       	rjmp	.+584    	; 0x42a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	22 c1       	rjmp	.+580    	; 0x42a <__bad_interrupt>
	...

000001e8 <cmd_query>:
     1e8:	51 55 45 52 59 00                                   QUERY.

000001ee <cmd_send>:
     1ee:	53 45 4e 44 00                                      SEND.

000001f3 <cmd_up>:
     1f3:	55 50 00                                            UP.

000001f6 <cmd_down>:
     1f6:	44 4f 57 4e 00                                      DOWN.

000001fb <cmd_stop>:
     1fb:	53 54 4f 50 00                                      STOP.

00000200 <REPLY_STATUS_OK>:
     200:	4f 4b 0d 0a 00                                      OK...

00000205 <ctrl_move_momentary_dbg>:
     205:	43 54 52 4c 5f 4d 4f 56 45 0d 0a 00                 CTRL_MOVE...

00000211 <ctrl_stop_dbg>:
     211:	43 54 52 4c 5f 53 54 4f 50 0d 0a 00                 CTRL_STOP...

0000021d <ctrl_moveTo_dbg>:
     21d:	43 54 52 4c 5f 4d 4f 56 45 54 4f 0d 0a 00           CTRL_MOVETO...

0000022b <ctrl_moveOf_dbg>:
     22b:	43 54 52 4c 5f 4d 4f 56 45 4f 46 0d 0a 00           CTRL_MOVEOF...

00000239 <ctrl_wink_dbg>:
     239:	43 54 52 4c 5f 57 49 4e 4b 0d 0a 00                 CTRL_WINK...

00000245 <rx_motor_position>:
     245:	50 4f 53 54 5f 4d 4f 54 4f 52 5f 50 4f 53 49 54     POST_MOTOR_POSIT
     255:	49 4f 4e 0d 0a 00                                   ION...

0000025b <rx_motor_status>:
     25b:	50 4f 53 54 5f 4d 4f 54 4f 52 5f 53 54 41 54 55     POST_MOTOR_STATU
     26b:	53 0d 0a 00                                         S...

0000026f <rx_motor_limits>:
     26f:	50 4f 53 54 5f 4d 4f 54 4f 52 5f 4c 49 4d 49 54     POST_MOTOR_LIMIT
     27f:	53 0d 0a 00                                         S...

00000283 <rx_motor_rotation>:
     283:	50 4f 53 54 5f 4d 4f 54 4f 52 5f 44 49 52 45 43     POST_MOTOR_DIREC
     293:	54 49 4f 4e 0d 0a 00                                TION...

0000029a <rx_motor_speed>:
     29a:	50 4f 53 54 5f 4d 4f 54 4f 52 5f 52 4f 4c 4c 49     POST_MOTOR_ROLLI
     2aa:	4e 47 5f 53 50 45 45 44 0d 0a 00                    NG_SPEED...

000002b5 <rx_motor_ip>:
     2b5:	50 4f 53 54 5f 4d 4f 54 4f 52 5f 49 50 0d 0a 00     POST_MOTOR_IP...

000002c5 <rx_dct_lock>:
     2c5:	50 4f 53 54 5f 44 43 54 5f 4c 4f 43 4b 0d 0a 00     POST_DCT_LOCK...

000002d5 <rx_fact_default>:
     2d5:	50 4f 53 54 5f 46 41 43 54 4f 52 59 5f 44 45 46     POST_FACTORY_DEF
     2e5:	41 55 4c 54 0d 0a 00                                AULT...

000002ec <tx_motor_position>:
     2ec:	47 45 54 5f 4d 4f 54 4f 52 5f 50 4f 53 49 54 49     GET_MOTOR_POSITI
     2fc:	4f 4e 0d 0a 00                                      ON...

00000301 <tx_motor_status>:
     301:	47 45 54 5f 4d 4f 54 4f 52 5f 53 54 41 54 55 53     GET_MOTOR_STATUS
     311:	0d 0a 00                                            ...

00000314 <tx_motor_limits>:
     314:	47 45 54 5f 4d 4f 54 4f 52 5f 4c 49 4d 49 54 53     GET_MOTOR_LIMITS
     324:	0d 0a 00                                            ...

00000327 <tx_motor_rotation>:
     327:	47 45 54 5f 4d 4f 54 4f 52 5f 44 49 52 45 43 54     GET_MOTOR_DIRECT
     337:	49 4f 4e 0d 0a 00                                   ION...

0000033d <tx_motor_speed>:
     33d:	47 45 54 5f 4d 4f 54 4f 52 5f 52 4f 4c 4c 49 4e     GET_MOTOR_ROLLIN
     34d:	47 5f 53 50 45 45 44 0d 0a 00                       G_SPEED...

00000357 <tx_motor_ip>:
     357:	47 45 54 5f 4d 4f 54 4f 52 5f 49 50 0d 0a 00        GET_MOTOR_IP...

00000366 <tx_dct_lock>:
     366:	47 45 54 5f 44 43 54 5f 4c 4f 43 4b 0d 0a 00        GET_DCT_LOCK...

00000375 <tx_fact_default>:
     375:	47 45 54 5f 46 41 43 54 4f 52 59 5f 44 45 46 41     GET_FACTORY_DEFA
     385:	55 4c 54 0d 0a 00                                   ULT...

0000038b <err_no_dev>:
     38b:	73 74 61 74 75 73 20 75 70 64 61 74 65 20 77 61     status update wa
     39b:	73 20 72 61 6e 20 77 69 74 68 6f 75 74 20 61 20     s ran without a 
     3ab:	76 61 6c 69 64 20 41 64 64 72 0d 0a 00              valid Addr...

000003b8 <err_unknown_status>:
     3b8:	70 61 63 6b 65 74 20 72 65 74 75 72 6e 65 64 20     packet returned 
     3c8:	61 6e 20 75 6e 6b 6e 6f 77 6e 20 73 74 61 74 75     an unknown statu
     3d8:	73 20 70 61 63 6b 65 74 20 74 79 70 65 0d 0a 00     s packet type...

000003e8 <__ctors_end>:
     3e8:	11 24       	eor	r1, r1
     3ea:	1f be       	out	0x3f, r1	; 63
     3ec:	cf ef       	ldi	r28, 0xFF	; 255
     3ee:	df e5       	ldi	r29, 0x5F	; 95
     3f0:	de bf       	out	0x3e, r29	; 62
     3f2:	cd bf       	out	0x3d, r28	; 61
     3f4:	00 e0       	ldi	r16, 0x00	; 0
     3f6:	0c bf       	out	0x3c, r16	; 60

000003f8 <__do_copy_data>:
     3f8:	12 e2       	ldi	r17, 0x22	; 34
     3fa:	a0 e0       	ldi	r26, 0x00	; 0
     3fc:	b0 e2       	ldi	r27, 0x20	; 32
     3fe:	e6 e9       	ldi	r30, 0x96	; 150
     400:	fd e3       	ldi	r31, 0x3D	; 61
     402:	00 e0       	ldi	r16, 0x00	; 0
     404:	0b bf       	out	0x3b, r16	; 59
     406:	02 c0       	rjmp	.+4      	; 0x40c <__do_copy_data+0x14>
     408:	07 90       	elpm	r0, Z+
     40a:	0d 92       	st	X+, r0
     40c:	a8 31       	cpi	r26, 0x18	; 24
     40e:	b1 07       	cpc	r27, r17
     410:	d9 f7       	brne	.-10     	; 0x408 <__do_copy_data+0x10>

00000412 <__do_clear_bss>:
     412:	18 e2       	ldi	r17, 0x28	; 40
     414:	a8 e1       	ldi	r26, 0x18	; 24
     416:	b2 e2       	ldi	r27, 0x22	; 34
     418:	01 c0       	rjmp	.+2      	; 0x41c <.do_clear_bss_start>

0000041a <.do_clear_bss_loop>:
     41a:	1d 92       	st	X+, r1

0000041c <.do_clear_bss_start>:
     41c:	ac 36       	cpi	r26, 0x6C	; 108
     41e:	b1 07       	cpc	r27, r17
     420:	e1 f7       	brne	.-8      	; 0x41a <.do_clear_bss_loop>
     422:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <main>
     426:	0c 94 c9 1e 	jmp	0x3d92	; 0x3d92 <_exit>

0000042a <__bad_interrupt>:
     42a:	ea cd       	rjmp	.-1068   	; 0x0 <__vectors>

0000042c <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
     42c:	df 93       	push	r29
     42e:	cf 93       	push	r28
     430:	0f 92       	push	r0
     432:	cd b7       	in	r28, 0x3d	; 61
     434:	de b7       	in	r29, 0x3e	; 62
	irqflags_t flags = SREG;
     436:	8f e3       	ldi	r24, 0x3F	; 63
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	fc 01       	movw	r30, r24
     43c:	80 81       	ld	r24, Z
     43e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     440:	f8 94       	cli
	return flags;
     442:	89 81       	ldd	r24, Y+1	; 0x01
}
     444:	0f 90       	pop	r0
     446:	cf 91       	pop	r28
     448:	df 91       	pop	r29
     44a:	08 95       	ret

0000044c <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
     44c:	df 93       	push	r29
     44e:	cf 93       	push	r28
     450:	0f 92       	push	r0
     452:	cd b7       	in	r28, 0x3d	; 61
     454:	de b7       	in	r29, 0x3e	; 62
     456:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
     458:	8f e3       	ldi	r24, 0x3F	; 63
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	29 81       	ldd	r18, Y+1	; 0x01
     45e:	fc 01       	movw	r30, r24
     460:	20 83       	st	Z, r18
}
     462:	0f 90       	pop	r0
     464:	cf 91       	pop	r28
     466:	df 91       	pop	r29
     468:	08 95       	ret

0000046a <sysclk_init>:
#include <nvm.h>
#endif


void sysclk_init(void)
{
     46a:	df 93       	push	r29
     46c:	cf 93       	push	r28
     46e:	00 d0       	rcall	.+0      	; 0x470 <sysclk_init+0x6>
     470:	cd b7       	in	r28, 0x3d	; 61
     472:	de b7       	in	r29, 0x3e	; 62
	uint8_t *reg = (uint8_t *)&PR.PRGEN;
     474:	80 e7       	ldi	r24, 0x70	; 112
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	89 83       	std	Y+1, r24	; 0x01
     47a:	9a 83       	std	Y+2, r25	; 0x02
	uint8_t i;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
     47c:	1b 82       	std	Y+3, r1	; 0x03
     47e:	0d c0       	rjmp	.+26     	; 0x49a <sysclk_init+0x30>
		*(reg++) = 0xff;
     480:	89 81       	ldd	r24, Y+1	; 0x01
     482:	9a 81       	ldd	r25, Y+2	; 0x02
     484:	2f ef       	ldi	r18, 0xFF	; 255
     486:	fc 01       	movw	r30, r24
     488:	20 83       	st	Z, r18
     48a:	89 81       	ldd	r24, Y+1	; 0x01
     48c:	9a 81       	ldd	r25, Y+2	; 0x02
     48e:	01 96       	adiw	r24, 0x01	; 1
     490:	89 83       	std	Y+1, r24	; 0x01
     492:	9a 83       	std	Y+2, r25	; 0x02
{
	uint8_t *reg = (uint8_t *)&PR.PRGEN;
	uint8_t i;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
     494:	8b 81       	ldd	r24, Y+3	; 0x03
     496:	8f 5f       	subi	r24, 0xFF	; 255
     498:	8b 83       	std	Y+3, r24	; 0x03
     49a:	8b 81       	ldd	r24, Y+3	; 0x03
     49c:	87 30       	cpi	r24, 0x07	; 7
     49e:	80 f3       	brcs	.-32     	; 0x480 <sysclk_init+0x16>

		if (!need_rc2mhz) {
			osc_disable(OSC_ID_RC2MHZ);
		}
	}
}
     4a0:	23 96       	adiw	r28, 0x03	; 3
     4a2:	cd bf       	out	0x3d, r28	; 61
     4a4:	de bf       	out	0x3e, r29	; 62
     4a6:	cf 91       	pop	r28
     4a8:	df 91       	pop	r29
     4aa:	08 95       	ret

000004ac <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     4ac:	df 93       	push	r29
     4ae:	cf 93       	push	r28
     4b0:	00 d0       	rcall	.+0      	; 0x4b2 <sysclk_enable_module+0x6>
     4b2:	0f 92       	push	r0
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
     4b8:	8a 83       	std	Y+2, r24	; 0x02
     4ba:	9b 83       	std	Y+3, r25	; 0x03
     4bc:	6c 83       	std	Y+4, r22	; 0x04
	irqflags_t flags = cpu_irq_save();
     4be:	b6 df       	rcall	.-148    	; 0x42c <cpu_irq_save>
     4c0:	89 83       	std	Y+1, r24	; 0x01

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     4c2:	8a 81       	ldd	r24, Y+2	; 0x02
     4c4:	9b 81       	ldd	r25, Y+3	; 0x03
     4c6:	80 59       	subi	r24, 0x90	; 144
     4c8:	9f 4f       	sbci	r25, 0xFF	; 255
     4ca:	2a 81       	ldd	r18, Y+2	; 0x02
     4cc:	3b 81       	ldd	r19, Y+3	; 0x03
     4ce:	20 59       	subi	r18, 0x90	; 144
     4d0:	3f 4f       	sbci	r19, 0xFF	; 255
     4d2:	f9 01       	movw	r30, r18
     4d4:	20 81       	ld	r18, Z
     4d6:	32 2f       	mov	r19, r18
     4d8:	2c 81       	ldd	r18, Y+4	; 0x04
     4da:	20 95       	com	r18
     4dc:	23 23       	and	r18, r19
     4de:	fc 01       	movw	r30, r24
     4e0:	20 83       	st	Z, r18

	cpu_irq_restore(flags);
     4e2:	89 81       	ldd	r24, Y+1	; 0x01
     4e4:	b3 df       	rcall	.-154    	; 0x44c <cpu_irq_restore>
}
     4e6:	24 96       	adiw	r28, 0x04	; 4
     4e8:	cd bf       	out	0x3d, r28	; 61
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	cf 91       	pop	r28
     4ee:	df 91       	pop	r29
     4f0:	08 95       	ret

000004f2 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(ioport_pin_to_port(pin), ioport_pin_to_mask(pin), flags);
     4f2:	80 e8       	ldi	r24, 0x80	; 128
     4f4:	96 e0       	ldi	r25, 0x06	; 6
     4f6:	61 e0       	ldi	r22, 0x01	; 1
     4f8:	40 e0       	ldi	r20, 0x00	; 0
     4fa:	53 e0       	ldi	r21, 0x03	; 3
     4fc:	8a d0       	rcall	.+276    	; 0x612 <ioport_configure_port_pin>
     4fe:	80 e8       	ldi	r24, 0x80	; 128
     500:	96 e0       	ldi	r25, 0x06	; 6
     502:	62 e0       	ldi	r22, 0x02	; 2
     504:	40 e0       	ldi	r20, 0x00	; 0
     506:	53 e0       	ldi	r21, 0x03	; 3
     508:	84 d0       	rcall	.+264    	; 0x612 <ioport_configure_port_pin>
     50a:	80 e8       	ldi	r24, 0x80	; 128
     50c:	96 e0       	ldi	r25, 0x06	; 6
     50e:	64 e0       	ldi	r22, 0x04	; 4
     510:	40 e0       	ldi	r20, 0x00	; 0
     512:	53 e0       	ldi	r21, 0x03	; 3
     514:	7e d0       	rcall	.+252    	; 0x612 <ioport_configure_port_pin>
     516:	80 e8       	ldi	r24, 0x80	; 128
     518:	96 e0       	ldi	r25, 0x06	; 6
     51a:	68 e0       	ldi	r22, 0x08	; 8
     51c:	40 e0       	ldi	r20, 0x00	; 0
     51e:	53 e0       	ldi	r21, 0x03	; 3
     520:	78 d0       	rcall	.+240    	; 0x612 <ioport_configure_port_pin>
     522:	80 e8       	ldi	r24, 0x80	; 128
     524:	96 e0       	ldi	r25, 0x06	; 6
     526:	60 e1       	ldi	r22, 0x10	; 16
     528:	40 e0       	ldi	r20, 0x00	; 0
     52a:	53 e0       	ldi	r21, 0x03	; 3
     52c:	72 d0       	rcall	.+228    	; 0x612 <ioport_configure_port_pin>
     52e:	80 e8       	ldi	r24, 0x80	; 128
     530:	96 e0       	ldi	r25, 0x06	; 6
     532:	60 e2       	ldi	r22, 0x20	; 32
     534:	40 e0       	ldi	r20, 0x00	; 0
     536:	53 e0       	ldi	r21, 0x03	; 3
     538:	6c d0       	rcall	.+216    	; 0x612 <ioport_configure_port_pin>
     53a:	80 e8       	ldi	r24, 0x80	; 128
     53c:	96 e0       	ldi	r25, 0x06	; 6
     53e:	60 e4       	ldi	r22, 0x40	; 64
     540:	40 e0       	ldi	r20, 0x00	; 0
     542:	53 e0       	ldi	r21, 0x03	; 3
     544:	66 d0       	rcall	.+204    	; 0x612 <ioport_configure_port_pin>
     546:	80 e8       	ldi	r24, 0x80	; 128
     548:	96 e0       	ldi	r25, 0x06	; 6
     54a:	60 e8       	ldi	r22, 0x80	; 128
     54c:	40 e0       	ldi	r20, 0x00	; 0
     54e:	53 e0       	ldi	r21, 0x03	; 3
     550:	60 d0       	rcall	.+192    	; 0x612 <ioport_configure_port_pin>
     552:	80 ea       	ldi	r24, 0xA0	; 160
     554:	96 e0       	ldi	r25, 0x06	; 6
     556:	61 e0       	ldi	r22, 0x01	; 1
     558:	48 e1       	ldi	r20, 0x18	; 24
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	5a d0       	rcall	.+180    	; 0x612 <ioport_configure_port_pin>
     55e:	80 ea       	ldi	r24, 0xA0	; 160
     560:	96 e0       	ldi	r25, 0x06	; 6
     562:	62 e0       	ldi	r22, 0x02	; 2
     564:	48 e1       	ldi	r20, 0x18	; 24
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	54 d0       	rcall	.+168    	; 0x612 <ioport_configure_port_pin>
     56a:	80 ea       	ldi	r24, 0xA0	; 160
     56c:	96 e0       	ldi	r25, 0x06	; 6
     56e:	64 e0       	ldi	r22, 0x04	; 4
     570:	48 e1       	ldi	r20, 0x18	; 24
     572:	50 e0       	ldi	r21, 0x00	; 0
     574:	4e d0       	rcall	.+156    	; 0x612 <ioport_configure_port_pin>
     576:	80 ea       	ldi	r24, 0xA0	; 160
     578:	96 e0       	ldi	r25, 0x06	; 6
     57a:	68 e0       	ldi	r22, 0x08	; 8
     57c:	48 e1       	ldi	r20, 0x18	; 24
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	48 d0       	rcall	.+144    	; 0x612 <ioport_configure_port_pin>
     582:	80 ea       	ldi	r24, 0xA0	; 160
     584:	96 e0       	ldi	r25, 0x06	; 6
     586:	60 e1       	ldi	r22, 0x10	; 16
     588:	48 e1       	ldi	r20, 0x18	; 24
     58a:	50 e0       	ldi	r21, 0x00	; 0
     58c:	42 d0       	rcall	.+132    	; 0x612 <ioport_configure_port_pin>
     58e:	80 ea       	ldi	r24, 0xA0	; 160
     590:	96 e0       	ldi	r25, 0x06	; 6
     592:	60 e4       	ldi	r22, 0x40	; 64
     594:	48 e1       	ldi	r20, 0x18	; 24
     596:	50 e0       	ldi	r21, 0x00	; 0
     598:	3c d0       	rcall	.+120    	; 0x612 <ioport_configure_port_pin>
     59a:	80 ea       	ldi	r24, 0xA0	; 160
     59c:	96 e0       	ldi	r25, 0x06	; 6
     59e:	60 e8       	ldi	r22, 0x80	; 128
     5a0:	48 e1       	ldi	r20, 0x18	; 24
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	36 d0       	rcall	.+108    	; 0x612 <ioport_configure_port_pin>
     5a6:	80 e4       	ldi	r24, 0x40	; 64
     5a8:	96 e0       	ldi	r25, 0x06	; 6
     5aa:	68 e0       	ldi	r22, 0x08	; 8
     5ac:	40 e0       	ldi	r20, 0x00	; 0
     5ae:	53 e0       	ldi	r21, 0x03	; 3
     5b0:	30 d0       	rcall	.+96     	; 0x612 <ioport_configure_port_pin>
     5b2:	80 e4       	ldi	r24, 0x40	; 64
     5b4:	96 e0       	ldi	r25, 0x06	; 6
     5b6:	64 e0       	ldi	r22, 0x04	; 4
     5b8:	40 e0       	ldi	r20, 0x00	; 0
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	2a d0       	rcall	.+84     	; 0x612 <ioport_configure_port_pin>
     5be:	80 e4       	ldi	r24, 0x40	; 64
     5c0:	96 e0       	ldi	r25, 0x06	; 6
     5c2:	61 e0       	ldi	r22, 0x01	; 1
     5c4:	40 e0       	ldi	r20, 0x00	; 0
     5c6:	51 e0       	ldi	r21, 0x01	; 1
     5c8:	24 d0       	rcall	.+72     	; 0x612 <ioport_configure_port_pin>
     5ca:	80 e4       	ldi	r24, 0x40	; 64
     5cc:	96 e0       	ldi	r25, 0x06	; 6
     5ce:	60 e8       	ldi	r22, 0x80	; 128
     5d0:	40 e0       	ldi	r20, 0x00	; 0
     5d2:	53 e0       	ldi	r21, 0x03	; 3
     5d4:	1e d0       	rcall	.+60     	; 0x612 <ioport_configure_port_pin>
     5d6:	80 e4       	ldi	r24, 0x40	; 64
     5d8:	96 e0       	ldi	r25, 0x06	; 6
     5da:	60 e4       	ldi	r22, 0x40	; 64
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	18 d0       	rcall	.+48     	; 0x612 <ioport_configure_port_pin>
     5e2:	80 e6       	ldi	r24, 0x60	; 96
     5e4:	96 e0       	ldi	r25, 0x06	; 6
     5e6:	68 e0       	ldi	r22, 0x08	; 8
     5e8:	40 e0       	ldi	r20, 0x00	; 0
     5ea:	53 e0       	ldi	r21, 0x03	; 3
     5ec:	12 d0       	rcall	.+36     	; 0x612 <ioport_configure_port_pin>
     5ee:	80 e6       	ldi	r24, 0x60	; 96
     5f0:	96 e0       	ldi	r25, 0x06	; 6
     5f2:	64 e0       	ldi	r22, 0x04	; 4
     5f4:	40 e0       	ldi	r20, 0x00	; 0
     5f6:	50 e0       	ldi	r21, 0x00	; 0
     5f8:	0c d0       	rcall	.+24     	; 0x612 <ioport_configure_port_pin>
     5fa:	80 e6       	ldi	r24, 0x60	; 96
     5fc:	96 e0       	ldi	r25, 0x06	; 6
     5fe:	60 e8       	ldi	r22, 0x80	; 128
     600:	40 e0       	ldi	r20, 0x00	; 0
     602:	53 e0       	ldi	r21, 0x03	; 3
     604:	06 d0       	rcall	.+12     	; 0x612 <ioport_configure_port_pin>
     606:	80 e6       	ldi	r24, 0x60	; 96
     608:	96 e0       	ldi	r25, 0x06	; 6
     60a:	60 e4       	ldi	r22, 0x40	; 64
     60c:	40 e0       	ldi	r20, 0x00	; 0
     60e:	50 e0       	ldi	r21, 0x00	; 0
	#ifdef CONF_BOARD_ENABLE_USARTF0
	ioport_configure_pin(IOPORT_CREATE_PIN(PORTF, 3), IOPORT_DIR_OUTPUT
			| IOPORT_INIT_HIGH);
	ioport_configure_pin(IOPORT_CREATE_PIN(PORTF, 2), IOPORT_DIR_INPUT);
	#endif
}
     610:	00 c0       	rjmp	.+0      	; 0x612 <ioport_configure_port_pin>

00000612 <ioport_configure_port_pin>:
 * DAMAGE.
 */
#include "ioport.h"

void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,port_pin_flags_t flags)
{
     612:	df 93       	push	r29
     614:	cf 93       	push	r28
     616:	00 d0       	rcall	.+0      	; 0x618 <ioport_configure_port_pin+0x6>
     618:	00 d0       	rcall	.+0      	; 0x61a <ioport_configure_port_pin+0x8>
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
     61e:	8a 83       	std	Y+2, r24	; 0x02
     620:	9b 83       	std	Y+3, r25	; 0x03
     622:	6c 83       	std	Y+4, r22	; 0x04
     624:	4d 83       	std	Y+5, r20	; 0x05
     626:	5e 83       	std	Y+6, r21	; 0x06
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     628:	19 82       	std	Y+1, r1	; 0x01
     62a:	1e c0       	rjmp	.+60     	; 0x668 <ioport_configure_port_pin+0x56>
		if (pin_mask & (1 << pin)) {
     62c:	8c 81       	ldd	r24, Y+4	; 0x04
     62e:	88 2f       	mov	r24, r24
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	29 81       	ldd	r18, Y+1	; 0x01
     634:	22 2f       	mov	r18, r18
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	02 2e       	mov	r0, r18
     63a:	02 c0       	rjmp	.+4      	; 0x640 <ioport_configure_port_pin+0x2e>
     63c:	95 95       	asr	r25
     63e:	87 95       	ror	r24
     640:	0a 94       	dec	r0
     642:	e2 f7       	brpl	.-8      	; 0x63c <ioport_configure_port_pin+0x2a>
     644:	81 70       	andi	r24, 0x01	; 1
     646:	90 70       	andi	r25, 0x00	; 0
     648:	88 23       	and	r24, r24
     64a:	59 f0       	breq	.+22     	; 0x662 <ioport_configure_port_pin+0x50>
			*((uint8_t*)port+PORT_PIN0CTRL+pin)=flags;
     64c:	2a 81       	ldd	r18, Y+2	; 0x02
     64e:	3b 81       	ldd	r19, Y+3	; 0x03
     650:	89 81       	ldd	r24, Y+1	; 0x01
     652:	88 2f       	mov	r24, r24
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	40 96       	adiw	r24, 0x10	; 16
     658:	82 0f       	add	r24, r18
     65a:	93 1f       	adc	r25, r19
     65c:	2d 81       	ldd	r18, Y+5	; 0x05
     65e:	fc 01       	movw	r30, r24
     660:	20 83       	st	Z, r18

void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     662:	89 81       	ldd	r24, Y+1	; 0x01
     664:	8f 5f       	subi	r24, 0xFF	; 255
     666:	89 83       	std	Y+1, r24	; 0x01
     668:	89 81       	ldd	r24, Y+1	; 0x01
     66a:	88 30       	cpi	r24, 0x08	; 8
     66c:	f8 f2       	brcs	.-66     	; 0x62c <ioport_configure_port_pin+0x1a>
		if (pin_mask & (1 << pin)) {
			*((uint8_t*)port+PORT_PIN0CTRL+pin)=flags;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     66e:	8d 81       	ldd	r24, Y+5	; 0x05
     670:	9e 81       	ldd	r25, Y+6	; 0x06
     672:	80 70       	andi	r24, 0x00	; 0
     674:	91 70       	andi	r25, 0x01	; 1
     676:	00 97       	sbiw	r24, 0x00	; 0
     678:	d1 f0       	breq	.+52     	; 0x6ae <ioport_configure_port_pin+0x9c>
		if (flags & IOPORT_INIT_HIGH) {
     67a:	8d 81       	ldd	r24, Y+5	; 0x05
     67c:	9e 81       	ldd	r25, Y+6	; 0x06
     67e:	80 70       	andi	r24, 0x00	; 0
     680:	92 70       	andi	r25, 0x02	; 2
     682:	00 97       	sbiw	r24, 0x00	; 0
     684:	39 f0       	breq	.+14     	; 0x694 <ioport_configure_port_pin+0x82>
			*((uint8_t*)port+PORT_OUTSET)=pin_mask;
     686:	8a 81       	ldd	r24, Y+2	; 0x02
     688:	9b 81       	ldd	r25, Y+3	; 0x03
     68a:	05 96       	adiw	r24, 0x05	; 5
     68c:	2c 81       	ldd	r18, Y+4	; 0x04
     68e:	fc 01       	movw	r30, r24
     690:	20 83       	st	Z, r18
     692:	06 c0       	rjmp	.+12     	; 0x6a0 <ioport_configure_port_pin+0x8e>
		}
		else {
			*((uint8_t*)port+PORT_OUTCLR)=pin_mask;
     694:	8a 81       	ldd	r24, Y+2	; 0x02
     696:	9b 81       	ldd	r25, Y+3	; 0x03
     698:	06 96       	adiw	r24, 0x06	; 6
     69a:	2c 81       	ldd	r18, Y+4	; 0x04
     69c:	fc 01       	movw	r30, r24
     69e:	20 83       	st	Z, r18
		}
		*((uint8_t*)port+PORT_DIRSET)=pin_mask;
     6a0:	8a 81       	ldd	r24, Y+2	; 0x02
     6a2:	9b 81       	ldd	r25, Y+3	; 0x03
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	2c 81       	ldd	r18, Y+4	; 0x04
     6a8:	fc 01       	movw	r30, r24
     6aa:	20 83       	st	Z, r18
     6ac:	06 c0       	rjmp	.+12     	; 0x6ba <ioport_configure_port_pin+0xa8>
	}
	else {
		*((uint8_t*)port+PORT_DIRCLR)=pin_mask;
     6ae:	8a 81       	ldd	r24, Y+2	; 0x02
     6b0:	9b 81       	ldd	r25, Y+3	; 0x03
     6b2:	02 96       	adiw	r24, 0x02	; 2
     6b4:	2c 81       	ldd	r18, Y+4	; 0x04
     6b6:	fc 01       	movw	r30, r24
     6b8:	20 83       	st	Z, r18
	}
}
     6ba:	26 96       	adiw	r28, 0x06	; 6
     6bc:	cd bf       	out	0x3d, r28	; 61
     6be:	de bf       	out	0x3e, r29	; 62
     6c0:	cf 91       	pop	r28
     6c2:	df 91       	pop	r29
     6c4:	08 95       	ret

000006c6 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     6c6:	1f 92       	push	r1
     6c8:	0f 92       	push	r0
     6ca:	0f b6       	in	r0, 0x3f	; 63
     6cc:	0f 92       	push	r0
     6ce:	00 90 3b 00 	lds	r0, 0x003B
     6d2:	0f 92       	push	r0
     6d4:	11 24       	eor	r1, r1
     6d6:	2f 93       	push	r18
     6d8:	3f 93       	push	r19
     6da:	4f 93       	push	r20
     6dc:	5f 93       	push	r21
     6de:	6f 93       	push	r22
     6e0:	7f 93       	push	r23
     6e2:	8f 93       	push	r24
     6e4:	9f 93       	push	r25
     6e6:	af 93       	push	r26
     6e8:	bf 93       	push	r27
     6ea:	ef 93       	push	r30
     6ec:	ff 93       	push	r31
     6ee:	df 93       	push	r29
     6f0:	cf 93       	push	r28
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ovf_callback) {
     6f6:	80 91 18 22 	lds	r24, 0x2218
     6fa:	90 91 19 22 	lds	r25, 0x2219
     6fe:	00 97       	sbiw	r24, 0x00	; 0
     700:	31 f0       	breq	.+12     	; 0x70e <__vector_14+0x48>
		tc_tcc0_ovf_callback();
     702:	80 91 18 22 	lds	r24, 0x2218
     706:	90 91 19 22 	lds	r25, 0x2219
     70a:	fc 01       	movw	r30, r24
     70c:	19 95       	eicall
	}
}
     70e:	cf 91       	pop	r28
     710:	df 91       	pop	r29
     712:	ff 91       	pop	r31
     714:	ef 91       	pop	r30
     716:	bf 91       	pop	r27
     718:	af 91       	pop	r26
     71a:	9f 91       	pop	r25
     71c:	8f 91       	pop	r24
     71e:	7f 91       	pop	r23
     720:	6f 91       	pop	r22
     722:	5f 91       	pop	r21
     724:	4f 91       	pop	r20
     726:	3f 91       	pop	r19
     728:	2f 91       	pop	r18
     72a:	0f 90       	pop	r0
     72c:	00 92 3b 00 	sts	0x003B, r0
     730:	0f 90       	pop	r0
     732:	0f be       	out	0x3f, r0	; 63
     734:	0f 90       	pop	r0
     736:	1f 90       	pop	r1
     738:	18 95       	reti

0000073a <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     73a:	1f 92       	push	r1
     73c:	0f 92       	push	r0
     73e:	0f b6       	in	r0, 0x3f	; 63
     740:	0f 92       	push	r0
     742:	00 90 3b 00 	lds	r0, 0x003B
     746:	0f 92       	push	r0
     748:	11 24       	eor	r1, r1
     74a:	2f 93       	push	r18
     74c:	3f 93       	push	r19
     74e:	4f 93       	push	r20
     750:	5f 93       	push	r21
     752:	6f 93       	push	r22
     754:	7f 93       	push	r23
     756:	8f 93       	push	r24
     758:	9f 93       	push	r25
     75a:	af 93       	push	r26
     75c:	bf 93       	push	r27
     75e:	ef 93       	push	r30
     760:	ff 93       	push	r31
     762:	df 93       	push	r29
     764:	cf 93       	push	r28
     766:	cd b7       	in	r28, 0x3d	; 61
     768:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_err_callback) {
     76a:	80 91 1a 22 	lds	r24, 0x221A
     76e:	90 91 1b 22 	lds	r25, 0x221B
     772:	00 97       	sbiw	r24, 0x00	; 0
     774:	31 f0       	breq	.+12     	; 0x782 <__vector_15+0x48>
		tc_tcc0_err_callback();
     776:	80 91 1a 22 	lds	r24, 0x221A
     77a:	90 91 1b 22 	lds	r25, 0x221B
     77e:	fc 01       	movw	r30, r24
     780:	19 95       	eicall
	}
}
     782:	cf 91       	pop	r28
     784:	df 91       	pop	r29
     786:	ff 91       	pop	r31
     788:	ef 91       	pop	r30
     78a:	bf 91       	pop	r27
     78c:	af 91       	pop	r26
     78e:	9f 91       	pop	r25
     790:	8f 91       	pop	r24
     792:	7f 91       	pop	r23
     794:	6f 91       	pop	r22
     796:	5f 91       	pop	r21
     798:	4f 91       	pop	r20
     79a:	3f 91       	pop	r19
     79c:	2f 91       	pop	r18
     79e:	0f 90       	pop	r0
     7a0:	00 92 3b 00 	sts	0x003B, r0
     7a4:	0f 90       	pop	r0
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	0f 90       	pop	r0
     7aa:	1f 90       	pop	r1
     7ac:	18 95       	reti

000007ae <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     7ae:	1f 92       	push	r1
     7b0:	0f 92       	push	r0
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	0f 92       	push	r0
     7b6:	00 90 3b 00 	lds	r0, 0x003B
     7ba:	0f 92       	push	r0
     7bc:	11 24       	eor	r1, r1
     7be:	2f 93       	push	r18
     7c0:	3f 93       	push	r19
     7c2:	4f 93       	push	r20
     7c4:	5f 93       	push	r21
     7c6:	6f 93       	push	r22
     7c8:	7f 93       	push	r23
     7ca:	8f 93       	push	r24
     7cc:	9f 93       	push	r25
     7ce:	af 93       	push	r26
     7d0:	bf 93       	push	r27
     7d2:	ef 93       	push	r30
     7d4:	ff 93       	push	r31
     7d6:	df 93       	push	r29
     7d8:	cf 93       	push	r28
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_cca_callback) {
     7de:	80 91 1c 22 	lds	r24, 0x221C
     7e2:	90 91 1d 22 	lds	r25, 0x221D
     7e6:	00 97       	sbiw	r24, 0x00	; 0
     7e8:	31 f0       	breq	.+12     	; 0x7f6 <__vector_16+0x48>
		tc_tcc0_cca_callback();
     7ea:	80 91 1c 22 	lds	r24, 0x221C
     7ee:	90 91 1d 22 	lds	r25, 0x221D
     7f2:	fc 01       	movw	r30, r24
     7f4:	19 95       	eicall
	}
}
     7f6:	cf 91       	pop	r28
     7f8:	df 91       	pop	r29
     7fa:	ff 91       	pop	r31
     7fc:	ef 91       	pop	r30
     7fe:	bf 91       	pop	r27
     800:	af 91       	pop	r26
     802:	9f 91       	pop	r25
     804:	8f 91       	pop	r24
     806:	7f 91       	pop	r23
     808:	6f 91       	pop	r22
     80a:	5f 91       	pop	r21
     80c:	4f 91       	pop	r20
     80e:	3f 91       	pop	r19
     810:	2f 91       	pop	r18
     812:	0f 90       	pop	r0
     814:	00 92 3b 00 	sts	0x003B, r0
     818:	0f 90       	pop	r0
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	0f 90       	pop	r0
     81e:	1f 90       	pop	r1
     820:	18 95       	reti

00000822 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     822:	1f 92       	push	r1
     824:	0f 92       	push	r0
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	0f 92       	push	r0
     82a:	00 90 3b 00 	lds	r0, 0x003B
     82e:	0f 92       	push	r0
     830:	11 24       	eor	r1, r1
     832:	2f 93       	push	r18
     834:	3f 93       	push	r19
     836:	4f 93       	push	r20
     838:	5f 93       	push	r21
     83a:	6f 93       	push	r22
     83c:	7f 93       	push	r23
     83e:	8f 93       	push	r24
     840:	9f 93       	push	r25
     842:	af 93       	push	r26
     844:	bf 93       	push	r27
     846:	ef 93       	push	r30
     848:	ff 93       	push	r31
     84a:	df 93       	push	r29
     84c:	cf 93       	push	r28
     84e:	cd b7       	in	r28, 0x3d	; 61
     850:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccb_callback) {
     852:	80 91 1e 22 	lds	r24, 0x221E
     856:	90 91 1f 22 	lds	r25, 0x221F
     85a:	00 97       	sbiw	r24, 0x00	; 0
     85c:	31 f0       	breq	.+12     	; 0x86a <__vector_17+0x48>
		tc_tcc0_ccb_callback();
     85e:	80 91 1e 22 	lds	r24, 0x221E
     862:	90 91 1f 22 	lds	r25, 0x221F
     866:	fc 01       	movw	r30, r24
     868:	19 95       	eicall
	}
}
     86a:	cf 91       	pop	r28
     86c:	df 91       	pop	r29
     86e:	ff 91       	pop	r31
     870:	ef 91       	pop	r30
     872:	bf 91       	pop	r27
     874:	af 91       	pop	r26
     876:	9f 91       	pop	r25
     878:	8f 91       	pop	r24
     87a:	7f 91       	pop	r23
     87c:	6f 91       	pop	r22
     87e:	5f 91       	pop	r21
     880:	4f 91       	pop	r20
     882:	3f 91       	pop	r19
     884:	2f 91       	pop	r18
     886:	0f 90       	pop	r0
     888:	00 92 3b 00 	sts	0x003B, r0
     88c:	0f 90       	pop	r0
     88e:	0f be       	out	0x3f, r0	; 63
     890:	0f 90       	pop	r0
     892:	1f 90       	pop	r1
     894:	18 95       	reti

00000896 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     896:	1f 92       	push	r1
     898:	0f 92       	push	r0
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	0f 92       	push	r0
     89e:	00 90 3b 00 	lds	r0, 0x003B
     8a2:	0f 92       	push	r0
     8a4:	11 24       	eor	r1, r1
     8a6:	2f 93       	push	r18
     8a8:	3f 93       	push	r19
     8aa:	4f 93       	push	r20
     8ac:	5f 93       	push	r21
     8ae:	6f 93       	push	r22
     8b0:	7f 93       	push	r23
     8b2:	8f 93       	push	r24
     8b4:	9f 93       	push	r25
     8b6:	af 93       	push	r26
     8b8:	bf 93       	push	r27
     8ba:	ef 93       	push	r30
     8bc:	ff 93       	push	r31
     8be:	df 93       	push	r29
     8c0:	cf 93       	push	r28
     8c2:	cd b7       	in	r28, 0x3d	; 61
     8c4:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccc_callback) {
     8c6:	80 91 20 22 	lds	r24, 0x2220
     8ca:	90 91 21 22 	lds	r25, 0x2221
     8ce:	00 97       	sbiw	r24, 0x00	; 0
     8d0:	31 f0       	breq	.+12     	; 0x8de <__vector_18+0x48>
		tc_tcc0_ccc_callback();
     8d2:	80 91 20 22 	lds	r24, 0x2220
     8d6:	90 91 21 22 	lds	r25, 0x2221
     8da:	fc 01       	movw	r30, r24
     8dc:	19 95       	eicall
	}
}
     8de:	cf 91       	pop	r28
     8e0:	df 91       	pop	r29
     8e2:	ff 91       	pop	r31
     8e4:	ef 91       	pop	r30
     8e6:	bf 91       	pop	r27
     8e8:	af 91       	pop	r26
     8ea:	9f 91       	pop	r25
     8ec:	8f 91       	pop	r24
     8ee:	7f 91       	pop	r23
     8f0:	6f 91       	pop	r22
     8f2:	5f 91       	pop	r21
     8f4:	4f 91       	pop	r20
     8f6:	3f 91       	pop	r19
     8f8:	2f 91       	pop	r18
     8fa:	0f 90       	pop	r0
     8fc:	00 92 3b 00 	sts	0x003B, r0
     900:	0f 90       	pop	r0
     902:	0f be       	out	0x3f, r0	; 63
     904:	0f 90       	pop	r0
     906:	1f 90       	pop	r1
     908:	18 95       	reti

0000090a <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     90a:	1f 92       	push	r1
     90c:	0f 92       	push	r0
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	0f 92       	push	r0
     912:	00 90 3b 00 	lds	r0, 0x003B
     916:	0f 92       	push	r0
     918:	11 24       	eor	r1, r1
     91a:	2f 93       	push	r18
     91c:	3f 93       	push	r19
     91e:	4f 93       	push	r20
     920:	5f 93       	push	r21
     922:	6f 93       	push	r22
     924:	7f 93       	push	r23
     926:	8f 93       	push	r24
     928:	9f 93       	push	r25
     92a:	af 93       	push	r26
     92c:	bf 93       	push	r27
     92e:	ef 93       	push	r30
     930:	ff 93       	push	r31
     932:	df 93       	push	r29
     934:	cf 93       	push	r28
     936:	cd b7       	in	r28, 0x3d	; 61
     938:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccd_callback) {
     93a:	80 91 22 22 	lds	r24, 0x2222
     93e:	90 91 23 22 	lds	r25, 0x2223
     942:	00 97       	sbiw	r24, 0x00	; 0
     944:	31 f0       	breq	.+12     	; 0x952 <__vector_19+0x48>
		tc_tcc0_ccd_callback();
     946:	80 91 22 22 	lds	r24, 0x2222
     94a:	90 91 23 22 	lds	r25, 0x2223
     94e:	fc 01       	movw	r30, r24
     950:	19 95       	eicall
	}
}
     952:	cf 91       	pop	r28
     954:	df 91       	pop	r29
     956:	ff 91       	pop	r31
     958:	ef 91       	pop	r30
     95a:	bf 91       	pop	r27
     95c:	af 91       	pop	r26
     95e:	9f 91       	pop	r25
     960:	8f 91       	pop	r24
     962:	7f 91       	pop	r23
     964:	6f 91       	pop	r22
     966:	5f 91       	pop	r21
     968:	4f 91       	pop	r20
     96a:	3f 91       	pop	r19
     96c:	2f 91       	pop	r18
     96e:	0f 90       	pop	r0
     970:	00 92 3b 00 	sts	0x003B, r0
     974:	0f 90       	pop	r0
     976:	0f be       	out	0x3f, r0	; 63
     978:	0f 90       	pop	r0
     97a:	1f 90       	pop	r1
     97c:	18 95       	reti

0000097e <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     97e:	1f 92       	push	r1
     980:	0f 92       	push	r0
     982:	0f b6       	in	r0, 0x3f	; 63
     984:	0f 92       	push	r0
     986:	00 90 3b 00 	lds	r0, 0x003B
     98a:	0f 92       	push	r0
     98c:	11 24       	eor	r1, r1
     98e:	2f 93       	push	r18
     990:	3f 93       	push	r19
     992:	4f 93       	push	r20
     994:	5f 93       	push	r21
     996:	6f 93       	push	r22
     998:	7f 93       	push	r23
     99a:	8f 93       	push	r24
     99c:	9f 93       	push	r25
     99e:	af 93       	push	r26
     9a0:	bf 93       	push	r27
     9a2:	ef 93       	push	r30
     9a4:	ff 93       	push	r31
     9a6:	df 93       	push	r29
     9a8:	cf 93       	push	r28
     9aa:	cd b7       	in	r28, 0x3d	; 61
     9ac:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_ovf_callback) {
     9ae:	80 91 24 22 	lds	r24, 0x2224
     9b2:	90 91 25 22 	lds	r25, 0x2225
     9b6:	00 97       	sbiw	r24, 0x00	; 0
     9b8:	31 f0       	breq	.+12     	; 0x9c6 <__vector_20+0x48>
		tc_tcc1_ovf_callback();
     9ba:	80 91 24 22 	lds	r24, 0x2224
     9be:	90 91 25 22 	lds	r25, 0x2225
     9c2:	fc 01       	movw	r30, r24
     9c4:	19 95       	eicall
	}
}
     9c6:	cf 91       	pop	r28
     9c8:	df 91       	pop	r29
     9ca:	ff 91       	pop	r31
     9cc:	ef 91       	pop	r30
     9ce:	bf 91       	pop	r27
     9d0:	af 91       	pop	r26
     9d2:	9f 91       	pop	r25
     9d4:	8f 91       	pop	r24
     9d6:	7f 91       	pop	r23
     9d8:	6f 91       	pop	r22
     9da:	5f 91       	pop	r21
     9dc:	4f 91       	pop	r20
     9de:	3f 91       	pop	r19
     9e0:	2f 91       	pop	r18
     9e2:	0f 90       	pop	r0
     9e4:	00 92 3b 00 	sts	0x003B, r0
     9e8:	0f 90       	pop	r0
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	0f 90       	pop	r0
     9ee:	1f 90       	pop	r1
     9f0:	18 95       	reti

000009f2 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     9f2:	1f 92       	push	r1
     9f4:	0f 92       	push	r0
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	0f 92       	push	r0
     9fa:	00 90 3b 00 	lds	r0, 0x003B
     9fe:	0f 92       	push	r0
     a00:	11 24       	eor	r1, r1
     a02:	2f 93       	push	r18
     a04:	3f 93       	push	r19
     a06:	4f 93       	push	r20
     a08:	5f 93       	push	r21
     a0a:	6f 93       	push	r22
     a0c:	7f 93       	push	r23
     a0e:	8f 93       	push	r24
     a10:	9f 93       	push	r25
     a12:	af 93       	push	r26
     a14:	bf 93       	push	r27
     a16:	ef 93       	push	r30
     a18:	ff 93       	push	r31
     a1a:	df 93       	push	r29
     a1c:	cf 93       	push	r28
     a1e:	cd b7       	in	r28, 0x3d	; 61
     a20:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_err_callback) {
     a22:	80 91 26 22 	lds	r24, 0x2226
     a26:	90 91 27 22 	lds	r25, 0x2227
     a2a:	00 97       	sbiw	r24, 0x00	; 0
     a2c:	31 f0       	breq	.+12     	; 0xa3a <__vector_21+0x48>
		tc_tcc1_err_callback();
     a2e:	80 91 26 22 	lds	r24, 0x2226
     a32:	90 91 27 22 	lds	r25, 0x2227
     a36:	fc 01       	movw	r30, r24
     a38:	19 95       	eicall
	}
}
     a3a:	cf 91       	pop	r28
     a3c:	df 91       	pop	r29
     a3e:	ff 91       	pop	r31
     a40:	ef 91       	pop	r30
     a42:	bf 91       	pop	r27
     a44:	af 91       	pop	r26
     a46:	9f 91       	pop	r25
     a48:	8f 91       	pop	r24
     a4a:	7f 91       	pop	r23
     a4c:	6f 91       	pop	r22
     a4e:	5f 91       	pop	r21
     a50:	4f 91       	pop	r20
     a52:	3f 91       	pop	r19
     a54:	2f 91       	pop	r18
     a56:	0f 90       	pop	r0
     a58:	00 92 3b 00 	sts	0x003B, r0
     a5c:	0f 90       	pop	r0
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	0f 90       	pop	r0
     a62:	1f 90       	pop	r1
     a64:	18 95       	reti

00000a66 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     a66:	1f 92       	push	r1
     a68:	0f 92       	push	r0
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	0f 92       	push	r0
     a6e:	00 90 3b 00 	lds	r0, 0x003B
     a72:	0f 92       	push	r0
     a74:	11 24       	eor	r1, r1
     a76:	2f 93       	push	r18
     a78:	3f 93       	push	r19
     a7a:	4f 93       	push	r20
     a7c:	5f 93       	push	r21
     a7e:	6f 93       	push	r22
     a80:	7f 93       	push	r23
     a82:	8f 93       	push	r24
     a84:	9f 93       	push	r25
     a86:	af 93       	push	r26
     a88:	bf 93       	push	r27
     a8a:	ef 93       	push	r30
     a8c:	ff 93       	push	r31
     a8e:	df 93       	push	r29
     a90:	cf 93       	push	r28
     a92:	cd b7       	in	r28, 0x3d	; 61
     a94:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_cca_callback) {
     a96:	80 91 28 22 	lds	r24, 0x2228
     a9a:	90 91 29 22 	lds	r25, 0x2229
     a9e:	00 97       	sbiw	r24, 0x00	; 0
     aa0:	31 f0       	breq	.+12     	; 0xaae <__vector_22+0x48>
		tc_tcc1_cca_callback();
     aa2:	80 91 28 22 	lds	r24, 0x2228
     aa6:	90 91 29 22 	lds	r25, 0x2229
     aaa:	fc 01       	movw	r30, r24
     aac:	19 95       	eicall
	}
}
     aae:	cf 91       	pop	r28
     ab0:	df 91       	pop	r29
     ab2:	ff 91       	pop	r31
     ab4:	ef 91       	pop	r30
     ab6:	bf 91       	pop	r27
     ab8:	af 91       	pop	r26
     aba:	9f 91       	pop	r25
     abc:	8f 91       	pop	r24
     abe:	7f 91       	pop	r23
     ac0:	6f 91       	pop	r22
     ac2:	5f 91       	pop	r21
     ac4:	4f 91       	pop	r20
     ac6:	3f 91       	pop	r19
     ac8:	2f 91       	pop	r18
     aca:	0f 90       	pop	r0
     acc:	00 92 3b 00 	sts	0x003B, r0
     ad0:	0f 90       	pop	r0
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	0f 90       	pop	r0
     ad6:	1f 90       	pop	r1
     ad8:	18 95       	reti

00000ada <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     ada:	1f 92       	push	r1
     adc:	0f 92       	push	r0
     ade:	0f b6       	in	r0, 0x3f	; 63
     ae0:	0f 92       	push	r0
     ae2:	00 90 3b 00 	lds	r0, 0x003B
     ae6:	0f 92       	push	r0
     ae8:	11 24       	eor	r1, r1
     aea:	2f 93       	push	r18
     aec:	3f 93       	push	r19
     aee:	4f 93       	push	r20
     af0:	5f 93       	push	r21
     af2:	6f 93       	push	r22
     af4:	7f 93       	push	r23
     af6:	8f 93       	push	r24
     af8:	9f 93       	push	r25
     afa:	af 93       	push	r26
     afc:	bf 93       	push	r27
     afe:	ef 93       	push	r30
     b00:	ff 93       	push	r31
     b02:	df 93       	push	r29
     b04:	cf 93       	push	r28
     b06:	cd b7       	in	r28, 0x3d	; 61
     b08:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_ccb_callback) {
     b0a:	80 91 2a 22 	lds	r24, 0x222A
     b0e:	90 91 2b 22 	lds	r25, 0x222B
     b12:	00 97       	sbiw	r24, 0x00	; 0
     b14:	31 f0       	breq	.+12     	; 0xb22 <__vector_23+0x48>
		tc_tcc1_ccb_callback();
     b16:	80 91 2a 22 	lds	r24, 0x222A
     b1a:	90 91 2b 22 	lds	r25, 0x222B
     b1e:	fc 01       	movw	r30, r24
     b20:	19 95       	eicall
	}
}
     b22:	cf 91       	pop	r28
     b24:	df 91       	pop	r29
     b26:	ff 91       	pop	r31
     b28:	ef 91       	pop	r30
     b2a:	bf 91       	pop	r27
     b2c:	af 91       	pop	r26
     b2e:	9f 91       	pop	r25
     b30:	8f 91       	pop	r24
     b32:	7f 91       	pop	r23
     b34:	6f 91       	pop	r22
     b36:	5f 91       	pop	r21
     b38:	4f 91       	pop	r20
     b3a:	3f 91       	pop	r19
     b3c:	2f 91       	pop	r18
     b3e:	0f 90       	pop	r0
     b40:	00 92 3b 00 	sts	0x003B, r0
     b44:	0f 90       	pop	r0
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	0f 90       	pop	r0
     b4a:	1f 90       	pop	r1
     b4c:	18 95       	reti

00000b4e <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     b4e:	1f 92       	push	r1
     b50:	0f 92       	push	r0
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	0f 92       	push	r0
     b56:	00 90 3b 00 	lds	r0, 0x003B
     b5a:	0f 92       	push	r0
     b5c:	11 24       	eor	r1, r1
     b5e:	2f 93       	push	r18
     b60:	3f 93       	push	r19
     b62:	4f 93       	push	r20
     b64:	5f 93       	push	r21
     b66:	6f 93       	push	r22
     b68:	7f 93       	push	r23
     b6a:	8f 93       	push	r24
     b6c:	9f 93       	push	r25
     b6e:	af 93       	push	r26
     b70:	bf 93       	push	r27
     b72:	ef 93       	push	r30
     b74:	ff 93       	push	r31
     b76:	df 93       	push	r29
     b78:	cf 93       	push	r28
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ovf_callback) {
     b7e:	80 91 2c 22 	lds	r24, 0x222C
     b82:	90 91 2d 22 	lds	r25, 0x222D
     b86:	00 97       	sbiw	r24, 0x00	; 0
     b88:	31 f0       	breq	.+12     	; 0xb96 <__vector_77+0x48>
		tc_tcd0_ovf_callback();
     b8a:	80 91 2c 22 	lds	r24, 0x222C
     b8e:	90 91 2d 22 	lds	r25, 0x222D
     b92:	fc 01       	movw	r30, r24
     b94:	19 95       	eicall
	}
}
     b96:	cf 91       	pop	r28
     b98:	df 91       	pop	r29
     b9a:	ff 91       	pop	r31
     b9c:	ef 91       	pop	r30
     b9e:	bf 91       	pop	r27
     ba0:	af 91       	pop	r26
     ba2:	9f 91       	pop	r25
     ba4:	8f 91       	pop	r24
     ba6:	7f 91       	pop	r23
     ba8:	6f 91       	pop	r22
     baa:	5f 91       	pop	r21
     bac:	4f 91       	pop	r20
     bae:	3f 91       	pop	r19
     bb0:	2f 91       	pop	r18
     bb2:	0f 90       	pop	r0
     bb4:	00 92 3b 00 	sts	0x003B, r0
     bb8:	0f 90       	pop	r0
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	0f 90       	pop	r0
     bbe:	1f 90       	pop	r1
     bc0:	18 95       	reti

00000bc2 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     bc2:	1f 92       	push	r1
     bc4:	0f 92       	push	r0
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	0f 92       	push	r0
     bca:	00 90 3b 00 	lds	r0, 0x003B
     bce:	0f 92       	push	r0
     bd0:	11 24       	eor	r1, r1
     bd2:	2f 93       	push	r18
     bd4:	3f 93       	push	r19
     bd6:	4f 93       	push	r20
     bd8:	5f 93       	push	r21
     bda:	6f 93       	push	r22
     bdc:	7f 93       	push	r23
     bde:	8f 93       	push	r24
     be0:	9f 93       	push	r25
     be2:	af 93       	push	r26
     be4:	bf 93       	push	r27
     be6:	ef 93       	push	r30
     be8:	ff 93       	push	r31
     bea:	df 93       	push	r29
     bec:	cf 93       	push	r28
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_err_callback) {
     bf2:	80 91 2e 22 	lds	r24, 0x222E
     bf6:	90 91 2f 22 	lds	r25, 0x222F
     bfa:	00 97       	sbiw	r24, 0x00	; 0
     bfc:	31 f0       	breq	.+12     	; 0xc0a <__vector_78+0x48>
		tc_tcd0_err_callback();
     bfe:	80 91 2e 22 	lds	r24, 0x222E
     c02:	90 91 2f 22 	lds	r25, 0x222F
     c06:	fc 01       	movw	r30, r24
     c08:	19 95       	eicall
	}
}
     c0a:	cf 91       	pop	r28
     c0c:	df 91       	pop	r29
     c0e:	ff 91       	pop	r31
     c10:	ef 91       	pop	r30
     c12:	bf 91       	pop	r27
     c14:	af 91       	pop	r26
     c16:	9f 91       	pop	r25
     c18:	8f 91       	pop	r24
     c1a:	7f 91       	pop	r23
     c1c:	6f 91       	pop	r22
     c1e:	5f 91       	pop	r21
     c20:	4f 91       	pop	r20
     c22:	3f 91       	pop	r19
     c24:	2f 91       	pop	r18
     c26:	0f 90       	pop	r0
     c28:	00 92 3b 00 	sts	0x003B, r0
     c2c:	0f 90       	pop	r0
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	0f 90       	pop	r0
     c32:	1f 90       	pop	r1
     c34:	18 95       	reti

00000c36 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     c36:	1f 92       	push	r1
     c38:	0f 92       	push	r0
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	0f 92       	push	r0
     c3e:	00 90 3b 00 	lds	r0, 0x003B
     c42:	0f 92       	push	r0
     c44:	11 24       	eor	r1, r1
     c46:	2f 93       	push	r18
     c48:	3f 93       	push	r19
     c4a:	4f 93       	push	r20
     c4c:	5f 93       	push	r21
     c4e:	6f 93       	push	r22
     c50:	7f 93       	push	r23
     c52:	8f 93       	push	r24
     c54:	9f 93       	push	r25
     c56:	af 93       	push	r26
     c58:	bf 93       	push	r27
     c5a:	ef 93       	push	r30
     c5c:	ff 93       	push	r31
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_cca_callback) {
     c66:	80 91 30 22 	lds	r24, 0x2230
     c6a:	90 91 31 22 	lds	r25, 0x2231
     c6e:	00 97       	sbiw	r24, 0x00	; 0
     c70:	31 f0       	breq	.+12     	; 0xc7e <__vector_79+0x48>
		tc_tcd0_cca_callback();
     c72:	80 91 30 22 	lds	r24, 0x2230
     c76:	90 91 31 22 	lds	r25, 0x2231
     c7a:	fc 01       	movw	r30, r24
     c7c:	19 95       	eicall
	}
}
     c7e:	cf 91       	pop	r28
     c80:	df 91       	pop	r29
     c82:	ff 91       	pop	r31
     c84:	ef 91       	pop	r30
     c86:	bf 91       	pop	r27
     c88:	af 91       	pop	r26
     c8a:	9f 91       	pop	r25
     c8c:	8f 91       	pop	r24
     c8e:	7f 91       	pop	r23
     c90:	6f 91       	pop	r22
     c92:	5f 91       	pop	r21
     c94:	4f 91       	pop	r20
     c96:	3f 91       	pop	r19
     c98:	2f 91       	pop	r18
     c9a:	0f 90       	pop	r0
     c9c:	00 92 3b 00 	sts	0x003B, r0
     ca0:	0f 90       	pop	r0
     ca2:	0f be       	out	0x3f, r0	; 63
     ca4:	0f 90       	pop	r0
     ca6:	1f 90       	pop	r1
     ca8:	18 95       	reti

00000caa <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     caa:	1f 92       	push	r1
     cac:	0f 92       	push	r0
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	0f 92       	push	r0
     cb2:	00 90 3b 00 	lds	r0, 0x003B
     cb6:	0f 92       	push	r0
     cb8:	11 24       	eor	r1, r1
     cba:	2f 93       	push	r18
     cbc:	3f 93       	push	r19
     cbe:	4f 93       	push	r20
     cc0:	5f 93       	push	r21
     cc2:	6f 93       	push	r22
     cc4:	7f 93       	push	r23
     cc6:	8f 93       	push	r24
     cc8:	9f 93       	push	r25
     cca:	af 93       	push	r26
     ccc:	bf 93       	push	r27
     cce:	ef 93       	push	r30
     cd0:	ff 93       	push	r31
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccb_callback) {
     cda:	80 91 32 22 	lds	r24, 0x2232
     cde:	90 91 33 22 	lds	r25, 0x2233
     ce2:	00 97       	sbiw	r24, 0x00	; 0
     ce4:	31 f0       	breq	.+12     	; 0xcf2 <__vector_80+0x48>
		tc_tcd0_ccb_callback();
     ce6:	80 91 32 22 	lds	r24, 0x2232
     cea:	90 91 33 22 	lds	r25, 0x2233
     cee:	fc 01       	movw	r30, r24
     cf0:	19 95       	eicall
	}
}
     cf2:	cf 91       	pop	r28
     cf4:	df 91       	pop	r29
     cf6:	ff 91       	pop	r31
     cf8:	ef 91       	pop	r30
     cfa:	bf 91       	pop	r27
     cfc:	af 91       	pop	r26
     cfe:	9f 91       	pop	r25
     d00:	8f 91       	pop	r24
     d02:	7f 91       	pop	r23
     d04:	6f 91       	pop	r22
     d06:	5f 91       	pop	r21
     d08:	4f 91       	pop	r20
     d0a:	3f 91       	pop	r19
     d0c:	2f 91       	pop	r18
     d0e:	0f 90       	pop	r0
     d10:	00 92 3b 00 	sts	0x003B, r0
     d14:	0f 90       	pop	r0
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	0f 90       	pop	r0
     d1a:	1f 90       	pop	r1
     d1c:	18 95       	reti

00000d1e <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     d1e:	1f 92       	push	r1
     d20:	0f 92       	push	r0
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	0f 92       	push	r0
     d26:	00 90 3b 00 	lds	r0, 0x003B
     d2a:	0f 92       	push	r0
     d2c:	11 24       	eor	r1, r1
     d2e:	2f 93       	push	r18
     d30:	3f 93       	push	r19
     d32:	4f 93       	push	r20
     d34:	5f 93       	push	r21
     d36:	6f 93       	push	r22
     d38:	7f 93       	push	r23
     d3a:	8f 93       	push	r24
     d3c:	9f 93       	push	r25
     d3e:	af 93       	push	r26
     d40:	bf 93       	push	r27
     d42:	ef 93       	push	r30
     d44:	ff 93       	push	r31
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccc_callback) {
     d4e:	80 91 34 22 	lds	r24, 0x2234
     d52:	90 91 35 22 	lds	r25, 0x2235
     d56:	00 97       	sbiw	r24, 0x00	; 0
     d58:	31 f0       	breq	.+12     	; 0xd66 <__vector_81+0x48>
		tc_tcd0_ccc_callback();
     d5a:	80 91 34 22 	lds	r24, 0x2234
     d5e:	90 91 35 22 	lds	r25, 0x2235
     d62:	fc 01       	movw	r30, r24
     d64:	19 95       	eicall
	}
}
     d66:	cf 91       	pop	r28
     d68:	df 91       	pop	r29
     d6a:	ff 91       	pop	r31
     d6c:	ef 91       	pop	r30
     d6e:	bf 91       	pop	r27
     d70:	af 91       	pop	r26
     d72:	9f 91       	pop	r25
     d74:	8f 91       	pop	r24
     d76:	7f 91       	pop	r23
     d78:	6f 91       	pop	r22
     d7a:	5f 91       	pop	r21
     d7c:	4f 91       	pop	r20
     d7e:	3f 91       	pop	r19
     d80:	2f 91       	pop	r18
     d82:	0f 90       	pop	r0
     d84:	00 92 3b 00 	sts	0x003B, r0
     d88:	0f 90       	pop	r0
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	0f 90       	pop	r0
     d8e:	1f 90       	pop	r1
     d90:	18 95       	reti

00000d92 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     d92:	1f 92       	push	r1
     d94:	0f 92       	push	r0
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	0f 92       	push	r0
     d9a:	00 90 3b 00 	lds	r0, 0x003B
     d9e:	0f 92       	push	r0
     da0:	11 24       	eor	r1, r1
     da2:	2f 93       	push	r18
     da4:	3f 93       	push	r19
     da6:	4f 93       	push	r20
     da8:	5f 93       	push	r21
     daa:	6f 93       	push	r22
     dac:	7f 93       	push	r23
     dae:	8f 93       	push	r24
     db0:	9f 93       	push	r25
     db2:	af 93       	push	r26
     db4:	bf 93       	push	r27
     db6:	ef 93       	push	r30
     db8:	ff 93       	push	r31
     dba:	df 93       	push	r29
     dbc:	cf 93       	push	r28
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccd_callback) {
     dc2:	80 91 36 22 	lds	r24, 0x2236
     dc6:	90 91 37 22 	lds	r25, 0x2237
     dca:	00 97       	sbiw	r24, 0x00	; 0
     dcc:	31 f0       	breq	.+12     	; 0xdda <__vector_82+0x48>
		tc_tcd0_ccd_callback();
     dce:	80 91 36 22 	lds	r24, 0x2236
     dd2:	90 91 37 22 	lds	r25, 0x2237
     dd6:	fc 01       	movw	r30, r24
     dd8:	19 95       	eicall
	}
}
     dda:	cf 91       	pop	r28
     ddc:	df 91       	pop	r29
     dde:	ff 91       	pop	r31
     de0:	ef 91       	pop	r30
     de2:	bf 91       	pop	r27
     de4:	af 91       	pop	r26
     de6:	9f 91       	pop	r25
     de8:	8f 91       	pop	r24
     dea:	7f 91       	pop	r23
     dec:	6f 91       	pop	r22
     dee:	5f 91       	pop	r21
     df0:	4f 91       	pop	r20
     df2:	3f 91       	pop	r19
     df4:	2f 91       	pop	r18
     df6:	0f 90       	pop	r0
     df8:	00 92 3b 00 	sts	0x003B, r0
     dfc:	0f 90       	pop	r0
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	0f 90       	pop	r0
     e02:	1f 90       	pop	r1
     e04:	18 95       	reti

00000e06 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     e06:	1f 92       	push	r1
     e08:	0f 92       	push	r0
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	0f 92       	push	r0
     e0e:	00 90 3b 00 	lds	r0, 0x003B
     e12:	0f 92       	push	r0
     e14:	11 24       	eor	r1, r1
     e16:	2f 93       	push	r18
     e18:	3f 93       	push	r19
     e1a:	4f 93       	push	r20
     e1c:	5f 93       	push	r21
     e1e:	6f 93       	push	r22
     e20:	7f 93       	push	r23
     e22:	8f 93       	push	r24
     e24:	9f 93       	push	r25
     e26:	af 93       	push	r26
     e28:	bf 93       	push	r27
     e2a:	ef 93       	push	r30
     e2c:	ff 93       	push	r31
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_ovf_callback) {
     e36:	80 91 38 22 	lds	r24, 0x2238
     e3a:	90 91 39 22 	lds	r25, 0x2239
     e3e:	00 97       	sbiw	r24, 0x00	; 0
     e40:	31 f0       	breq	.+12     	; 0xe4e <__vector_83+0x48>
		tc_tcd1_ovf_callback();
     e42:	80 91 38 22 	lds	r24, 0x2238
     e46:	90 91 39 22 	lds	r25, 0x2239
     e4a:	fc 01       	movw	r30, r24
     e4c:	19 95       	eicall
	}
}
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	ff 91       	pop	r31
     e54:	ef 91       	pop	r30
     e56:	bf 91       	pop	r27
     e58:	af 91       	pop	r26
     e5a:	9f 91       	pop	r25
     e5c:	8f 91       	pop	r24
     e5e:	7f 91       	pop	r23
     e60:	6f 91       	pop	r22
     e62:	5f 91       	pop	r21
     e64:	4f 91       	pop	r20
     e66:	3f 91       	pop	r19
     e68:	2f 91       	pop	r18
     e6a:	0f 90       	pop	r0
     e6c:	00 92 3b 00 	sts	0x003B, r0
     e70:	0f 90       	pop	r0
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	0f 90       	pop	r0
     e76:	1f 90       	pop	r1
     e78:	18 95       	reti

00000e7a <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     e7a:	1f 92       	push	r1
     e7c:	0f 92       	push	r0
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	0f 92       	push	r0
     e82:	00 90 3b 00 	lds	r0, 0x003B
     e86:	0f 92       	push	r0
     e88:	11 24       	eor	r1, r1
     e8a:	2f 93       	push	r18
     e8c:	3f 93       	push	r19
     e8e:	4f 93       	push	r20
     e90:	5f 93       	push	r21
     e92:	6f 93       	push	r22
     e94:	7f 93       	push	r23
     e96:	8f 93       	push	r24
     e98:	9f 93       	push	r25
     e9a:	af 93       	push	r26
     e9c:	bf 93       	push	r27
     e9e:	ef 93       	push	r30
     ea0:	ff 93       	push	r31
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_err_callback) {
     eaa:	80 91 3a 22 	lds	r24, 0x223A
     eae:	90 91 3b 22 	lds	r25, 0x223B
     eb2:	00 97       	sbiw	r24, 0x00	; 0
     eb4:	31 f0       	breq	.+12     	; 0xec2 <__vector_84+0x48>
		tc_tcd1_err_callback();
     eb6:	80 91 3a 22 	lds	r24, 0x223A
     eba:	90 91 3b 22 	lds	r25, 0x223B
     ebe:	fc 01       	movw	r30, r24
     ec0:	19 95       	eicall
	}
}
     ec2:	cf 91       	pop	r28
     ec4:	df 91       	pop	r29
     ec6:	ff 91       	pop	r31
     ec8:	ef 91       	pop	r30
     eca:	bf 91       	pop	r27
     ecc:	af 91       	pop	r26
     ece:	9f 91       	pop	r25
     ed0:	8f 91       	pop	r24
     ed2:	7f 91       	pop	r23
     ed4:	6f 91       	pop	r22
     ed6:	5f 91       	pop	r21
     ed8:	4f 91       	pop	r20
     eda:	3f 91       	pop	r19
     edc:	2f 91       	pop	r18
     ede:	0f 90       	pop	r0
     ee0:	00 92 3b 00 	sts	0x003B, r0
     ee4:	0f 90       	pop	r0
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	0f 90       	pop	r0
     eea:	1f 90       	pop	r1
     eec:	18 95       	reti

00000eee <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
     eee:	1f 92       	push	r1
     ef0:	0f 92       	push	r0
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	0f 92       	push	r0
     ef6:	00 90 3b 00 	lds	r0, 0x003B
     efa:	0f 92       	push	r0
     efc:	11 24       	eor	r1, r1
     efe:	2f 93       	push	r18
     f00:	3f 93       	push	r19
     f02:	4f 93       	push	r20
     f04:	5f 93       	push	r21
     f06:	6f 93       	push	r22
     f08:	7f 93       	push	r23
     f0a:	8f 93       	push	r24
     f0c:	9f 93       	push	r25
     f0e:	af 93       	push	r26
     f10:	bf 93       	push	r27
     f12:	ef 93       	push	r30
     f14:	ff 93       	push	r31
     f16:	df 93       	push	r29
     f18:	cf 93       	push	r28
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_cca_callback) {
     f1e:	80 91 3c 22 	lds	r24, 0x223C
     f22:	90 91 3d 22 	lds	r25, 0x223D
     f26:	00 97       	sbiw	r24, 0x00	; 0
     f28:	31 f0       	breq	.+12     	; 0xf36 <__vector_85+0x48>
		tc_tcd1_cca_callback();
     f2a:	80 91 3c 22 	lds	r24, 0x223C
     f2e:	90 91 3d 22 	lds	r25, 0x223D
     f32:	fc 01       	movw	r30, r24
     f34:	19 95       	eicall
	}
}
     f36:	cf 91       	pop	r28
     f38:	df 91       	pop	r29
     f3a:	ff 91       	pop	r31
     f3c:	ef 91       	pop	r30
     f3e:	bf 91       	pop	r27
     f40:	af 91       	pop	r26
     f42:	9f 91       	pop	r25
     f44:	8f 91       	pop	r24
     f46:	7f 91       	pop	r23
     f48:	6f 91       	pop	r22
     f4a:	5f 91       	pop	r21
     f4c:	4f 91       	pop	r20
     f4e:	3f 91       	pop	r19
     f50:	2f 91       	pop	r18
     f52:	0f 90       	pop	r0
     f54:	00 92 3b 00 	sts	0x003B, r0
     f58:	0f 90       	pop	r0
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	0f 90       	pop	r0
     f5e:	1f 90       	pop	r1
     f60:	18 95       	reti

00000f62 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
     f62:	1f 92       	push	r1
     f64:	0f 92       	push	r0
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	0f 92       	push	r0
     f6a:	00 90 3b 00 	lds	r0, 0x003B
     f6e:	0f 92       	push	r0
     f70:	11 24       	eor	r1, r1
     f72:	2f 93       	push	r18
     f74:	3f 93       	push	r19
     f76:	4f 93       	push	r20
     f78:	5f 93       	push	r21
     f7a:	6f 93       	push	r22
     f7c:	7f 93       	push	r23
     f7e:	8f 93       	push	r24
     f80:	9f 93       	push	r25
     f82:	af 93       	push	r26
     f84:	bf 93       	push	r27
     f86:	ef 93       	push	r30
     f88:	ff 93       	push	r31
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_ccb_callback) {
     f92:	80 91 3e 22 	lds	r24, 0x223E
     f96:	90 91 3f 22 	lds	r25, 0x223F
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	31 f0       	breq	.+12     	; 0xfaa <__vector_86+0x48>
		tc_tcd1_ccb_callback();
     f9e:	80 91 3e 22 	lds	r24, 0x223E
     fa2:	90 91 3f 22 	lds	r25, 0x223F
     fa6:	fc 01       	movw	r30, r24
     fa8:	19 95       	eicall
	}
}
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	ff 91       	pop	r31
     fb0:	ef 91       	pop	r30
     fb2:	bf 91       	pop	r27
     fb4:	af 91       	pop	r26
     fb6:	9f 91       	pop	r25
     fb8:	8f 91       	pop	r24
     fba:	7f 91       	pop	r23
     fbc:	6f 91       	pop	r22
     fbe:	5f 91       	pop	r21
     fc0:	4f 91       	pop	r20
     fc2:	3f 91       	pop	r19
     fc4:	2f 91       	pop	r18
     fc6:	0f 90       	pop	r0
     fc8:	00 92 3b 00 	sts	0x003B, r0
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	0f 90       	pop	r0
     fd2:	1f 90       	pop	r1
     fd4:	18 95       	reti

00000fd6 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
     fd6:	1f 92       	push	r1
     fd8:	0f 92       	push	r0
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	0f 92       	push	r0
     fde:	00 90 3b 00 	lds	r0, 0x003B
     fe2:	0f 92       	push	r0
     fe4:	11 24       	eor	r1, r1
     fe6:	2f 93       	push	r18
     fe8:	3f 93       	push	r19
     fea:	4f 93       	push	r20
     fec:	5f 93       	push	r21
     fee:	6f 93       	push	r22
     ff0:	7f 93       	push	r23
     ff2:	8f 93       	push	r24
     ff4:	9f 93       	push	r25
     ff6:	af 93       	push	r26
     ff8:	bf 93       	push	r27
     ffa:	ef 93       	push	r30
     ffc:	ff 93       	push	r31
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ovf_callback) {
    1006:	80 91 40 22 	lds	r24, 0x2240
    100a:	90 91 41 22 	lds	r25, 0x2241
    100e:	00 97       	sbiw	r24, 0x00	; 0
    1010:	31 f0       	breq	.+12     	; 0x101e <__vector_47+0x48>
		tc_tce0_ovf_callback();
    1012:	80 91 40 22 	lds	r24, 0x2240
    1016:	90 91 41 22 	lds	r25, 0x2241
    101a:	fc 01       	movw	r30, r24
    101c:	19 95       	eicall
	}
}
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	ff 91       	pop	r31
    1024:	ef 91       	pop	r30
    1026:	bf 91       	pop	r27
    1028:	af 91       	pop	r26
    102a:	9f 91       	pop	r25
    102c:	8f 91       	pop	r24
    102e:	7f 91       	pop	r23
    1030:	6f 91       	pop	r22
    1032:	5f 91       	pop	r21
    1034:	4f 91       	pop	r20
    1036:	3f 91       	pop	r19
    1038:	2f 91       	pop	r18
    103a:	0f 90       	pop	r0
    103c:	00 92 3b 00 	sts	0x003B, r0
    1040:	0f 90       	pop	r0
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	0f 90       	pop	r0
    1046:	1f 90       	pop	r1
    1048:	18 95       	reti

0000104a <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    104a:	1f 92       	push	r1
    104c:	0f 92       	push	r0
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	0f 92       	push	r0
    1052:	00 90 3b 00 	lds	r0, 0x003B
    1056:	0f 92       	push	r0
    1058:	11 24       	eor	r1, r1
    105a:	2f 93       	push	r18
    105c:	3f 93       	push	r19
    105e:	4f 93       	push	r20
    1060:	5f 93       	push	r21
    1062:	6f 93       	push	r22
    1064:	7f 93       	push	r23
    1066:	8f 93       	push	r24
    1068:	9f 93       	push	r25
    106a:	af 93       	push	r26
    106c:	bf 93       	push	r27
    106e:	ef 93       	push	r30
    1070:	ff 93       	push	r31
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_err_callback) {
    107a:	80 91 42 22 	lds	r24, 0x2242
    107e:	90 91 43 22 	lds	r25, 0x2243
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	31 f0       	breq	.+12     	; 0x1092 <__vector_48+0x48>
		tc_tce0_err_callback();
    1086:	80 91 42 22 	lds	r24, 0x2242
    108a:	90 91 43 22 	lds	r25, 0x2243
    108e:	fc 01       	movw	r30, r24
    1090:	19 95       	eicall
	}
}
    1092:	cf 91       	pop	r28
    1094:	df 91       	pop	r29
    1096:	ff 91       	pop	r31
    1098:	ef 91       	pop	r30
    109a:	bf 91       	pop	r27
    109c:	af 91       	pop	r26
    109e:	9f 91       	pop	r25
    10a0:	8f 91       	pop	r24
    10a2:	7f 91       	pop	r23
    10a4:	6f 91       	pop	r22
    10a6:	5f 91       	pop	r21
    10a8:	4f 91       	pop	r20
    10aa:	3f 91       	pop	r19
    10ac:	2f 91       	pop	r18
    10ae:	0f 90       	pop	r0
    10b0:	00 92 3b 00 	sts	0x003B, r0
    10b4:	0f 90       	pop	r0
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	0f 90       	pop	r0
    10ba:	1f 90       	pop	r1
    10bc:	18 95       	reti

000010be <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    10be:	1f 92       	push	r1
    10c0:	0f 92       	push	r0
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	0f 92       	push	r0
    10c6:	00 90 3b 00 	lds	r0, 0x003B
    10ca:	0f 92       	push	r0
    10cc:	11 24       	eor	r1, r1
    10ce:	2f 93       	push	r18
    10d0:	3f 93       	push	r19
    10d2:	4f 93       	push	r20
    10d4:	5f 93       	push	r21
    10d6:	6f 93       	push	r22
    10d8:	7f 93       	push	r23
    10da:	8f 93       	push	r24
    10dc:	9f 93       	push	r25
    10de:	af 93       	push	r26
    10e0:	bf 93       	push	r27
    10e2:	ef 93       	push	r30
    10e4:	ff 93       	push	r31
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_cca_callback) {
    10ee:	80 91 44 22 	lds	r24, 0x2244
    10f2:	90 91 45 22 	lds	r25, 0x2245
    10f6:	00 97       	sbiw	r24, 0x00	; 0
    10f8:	31 f0       	breq	.+12     	; 0x1106 <__vector_49+0x48>
		tc_tce0_cca_callback();
    10fa:	80 91 44 22 	lds	r24, 0x2244
    10fe:	90 91 45 22 	lds	r25, 0x2245
    1102:	fc 01       	movw	r30, r24
    1104:	19 95       	eicall
	}
}
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	ff 91       	pop	r31
    110c:	ef 91       	pop	r30
    110e:	bf 91       	pop	r27
    1110:	af 91       	pop	r26
    1112:	9f 91       	pop	r25
    1114:	8f 91       	pop	r24
    1116:	7f 91       	pop	r23
    1118:	6f 91       	pop	r22
    111a:	5f 91       	pop	r21
    111c:	4f 91       	pop	r20
    111e:	3f 91       	pop	r19
    1120:	2f 91       	pop	r18
    1122:	0f 90       	pop	r0
    1124:	00 92 3b 00 	sts	0x003B, r0
    1128:	0f 90       	pop	r0
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	0f 90       	pop	r0
    112e:	1f 90       	pop	r1
    1130:	18 95       	reti

00001132 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    1132:	1f 92       	push	r1
    1134:	0f 92       	push	r0
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	0f 92       	push	r0
    113a:	00 90 3b 00 	lds	r0, 0x003B
    113e:	0f 92       	push	r0
    1140:	11 24       	eor	r1, r1
    1142:	2f 93       	push	r18
    1144:	3f 93       	push	r19
    1146:	4f 93       	push	r20
    1148:	5f 93       	push	r21
    114a:	6f 93       	push	r22
    114c:	7f 93       	push	r23
    114e:	8f 93       	push	r24
    1150:	9f 93       	push	r25
    1152:	af 93       	push	r26
    1154:	bf 93       	push	r27
    1156:	ef 93       	push	r30
    1158:	ff 93       	push	r31
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccb_callback) {
    1162:	80 91 46 22 	lds	r24, 0x2246
    1166:	90 91 47 22 	lds	r25, 0x2247
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	31 f0       	breq	.+12     	; 0x117a <__vector_50+0x48>
		tc_tce0_ccb_callback();
    116e:	80 91 46 22 	lds	r24, 0x2246
    1172:	90 91 47 22 	lds	r25, 0x2247
    1176:	fc 01       	movw	r30, r24
    1178:	19 95       	eicall
	}
}
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	ff 91       	pop	r31
    1180:	ef 91       	pop	r30
    1182:	bf 91       	pop	r27
    1184:	af 91       	pop	r26
    1186:	9f 91       	pop	r25
    1188:	8f 91       	pop	r24
    118a:	7f 91       	pop	r23
    118c:	6f 91       	pop	r22
    118e:	5f 91       	pop	r21
    1190:	4f 91       	pop	r20
    1192:	3f 91       	pop	r19
    1194:	2f 91       	pop	r18
    1196:	0f 90       	pop	r0
    1198:	00 92 3b 00 	sts	0x003B, r0
    119c:	0f 90       	pop	r0
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	0f 90       	pop	r0
    11a2:	1f 90       	pop	r1
    11a4:	18 95       	reti

000011a6 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    11a6:	1f 92       	push	r1
    11a8:	0f 92       	push	r0
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	0f 92       	push	r0
    11ae:	00 90 3b 00 	lds	r0, 0x003B
    11b2:	0f 92       	push	r0
    11b4:	11 24       	eor	r1, r1
    11b6:	2f 93       	push	r18
    11b8:	3f 93       	push	r19
    11ba:	4f 93       	push	r20
    11bc:	5f 93       	push	r21
    11be:	6f 93       	push	r22
    11c0:	7f 93       	push	r23
    11c2:	8f 93       	push	r24
    11c4:	9f 93       	push	r25
    11c6:	af 93       	push	r26
    11c8:	bf 93       	push	r27
    11ca:	ef 93       	push	r30
    11cc:	ff 93       	push	r31
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccc_callback) {
    11d6:	80 91 48 22 	lds	r24, 0x2248
    11da:	90 91 49 22 	lds	r25, 0x2249
    11de:	00 97       	sbiw	r24, 0x00	; 0
    11e0:	31 f0       	breq	.+12     	; 0x11ee <__vector_51+0x48>
		tc_tce0_ccc_callback();
    11e2:	80 91 48 22 	lds	r24, 0x2248
    11e6:	90 91 49 22 	lds	r25, 0x2249
    11ea:	fc 01       	movw	r30, r24
    11ec:	19 95       	eicall
	}
}
    11ee:	cf 91       	pop	r28
    11f0:	df 91       	pop	r29
    11f2:	ff 91       	pop	r31
    11f4:	ef 91       	pop	r30
    11f6:	bf 91       	pop	r27
    11f8:	af 91       	pop	r26
    11fa:	9f 91       	pop	r25
    11fc:	8f 91       	pop	r24
    11fe:	7f 91       	pop	r23
    1200:	6f 91       	pop	r22
    1202:	5f 91       	pop	r21
    1204:	4f 91       	pop	r20
    1206:	3f 91       	pop	r19
    1208:	2f 91       	pop	r18
    120a:	0f 90       	pop	r0
    120c:	00 92 3b 00 	sts	0x003B, r0
    1210:	0f 90       	pop	r0
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	0f 90       	pop	r0
    1216:	1f 90       	pop	r1
    1218:	18 95       	reti

0000121a <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    121a:	1f 92       	push	r1
    121c:	0f 92       	push	r0
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	0f 92       	push	r0
    1222:	00 90 3b 00 	lds	r0, 0x003B
    1226:	0f 92       	push	r0
    1228:	11 24       	eor	r1, r1
    122a:	2f 93       	push	r18
    122c:	3f 93       	push	r19
    122e:	4f 93       	push	r20
    1230:	5f 93       	push	r21
    1232:	6f 93       	push	r22
    1234:	7f 93       	push	r23
    1236:	8f 93       	push	r24
    1238:	9f 93       	push	r25
    123a:	af 93       	push	r26
    123c:	bf 93       	push	r27
    123e:	ef 93       	push	r30
    1240:	ff 93       	push	r31
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccd_callback) {
    124a:	80 91 4a 22 	lds	r24, 0x224A
    124e:	90 91 4b 22 	lds	r25, 0x224B
    1252:	00 97       	sbiw	r24, 0x00	; 0
    1254:	31 f0       	breq	.+12     	; 0x1262 <__vector_52+0x48>
		tc_tce0_ccd_callback();
    1256:	80 91 4a 22 	lds	r24, 0x224A
    125a:	90 91 4b 22 	lds	r25, 0x224B
    125e:	fc 01       	movw	r30, r24
    1260:	19 95       	eicall
	}
}
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	ff 91       	pop	r31
    1268:	ef 91       	pop	r30
    126a:	bf 91       	pop	r27
    126c:	af 91       	pop	r26
    126e:	9f 91       	pop	r25
    1270:	8f 91       	pop	r24
    1272:	7f 91       	pop	r23
    1274:	6f 91       	pop	r22
    1276:	5f 91       	pop	r21
    1278:	4f 91       	pop	r20
    127a:	3f 91       	pop	r19
    127c:	2f 91       	pop	r18
    127e:	0f 90       	pop	r0
    1280:	00 92 3b 00 	sts	0x003B, r0
    1284:	0f 90       	pop	r0
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	0f 90       	pop	r0
    128a:	1f 90       	pop	r1
    128c:	18 95       	reti

0000128e <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    128e:	1f 92       	push	r1
    1290:	0f 92       	push	r0
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	0f 92       	push	r0
    1296:	00 90 3b 00 	lds	r0, 0x003B
    129a:	0f 92       	push	r0
    129c:	11 24       	eor	r1, r1
    129e:	2f 93       	push	r18
    12a0:	3f 93       	push	r19
    12a2:	4f 93       	push	r20
    12a4:	5f 93       	push	r21
    12a6:	6f 93       	push	r22
    12a8:	7f 93       	push	r23
    12aa:	8f 93       	push	r24
    12ac:	9f 93       	push	r25
    12ae:	af 93       	push	r26
    12b0:	bf 93       	push	r27
    12b2:	ef 93       	push	r30
    12b4:	ff 93       	push	r31
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_ovf_callback) {
    12be:	80 91 4c 22 	lds	r24, 0x224C
    12c2:	90 91 4d 22 	lds	r25, 0x224D
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	31 f0       	breq	.+12     	; 0x12d6 <__vector_53+0x48>
		tc_tce1_ovf_callback();
    12ca:	80 91 4c 22 	lds	r24, 0x224C
    12ce:	90 91 4d 22 	lds	r25, 0x224D
    12d2:	fc 01       	movw	r30, r24
    12d4:	19 95       	eicall
	}
}
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	ff 91       	pop	r31
    12dc:	ef 91       	pop	r30
    12de:	bf 91       	pop	r27
    12e0:	af 91       	pop	r26
    12e2:	9f 91       	pop	r25
    12e4:	8f 91       	pop	r24
    12e6:	7f 91       	pop	r23
    12e8:	6f 91       	pop	r22
    12ea:	5f 91       	pop	r21
    12ec:	4f 91       	pop	r20
    12ee:	3f 91       	pop	r19
    12f0:	2f 91       	pop	r18
    12f2:	0f 90       	pop	r0
    12f4:	00 92 3b 00 	sts	0x003B, r0
    12f8:	0f 90       	pop	r0
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	0f 90       	pop	r0
    12fe:	1f 90       	pop	r1
    1300:	18 95       	reti

00001302 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    1302:	1f 92       	push	r1
    1304:	0f 92       	push	r0
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	0f 92       	push	r0
    130a:	00 90 3b 00 	lds	r0, 0x003B
    130e:	0f 92       	push	r0
    1310:	11 24       	eor	r1, r1
    1312:	2f 93       	push	r18
    1314:	3f 93       	push	r19
    1316:	4f 93       	push	r20
    1318:	5f 93       	push	r21
    131a:	6f 93       	push	r22
    131c:	7f 93       	push	r23
    131e:	8f 93       	push	r24
    1320:	9f 93       	push	r25
    1322:	af 93       	push	r26
    1324:	bf 93       	push	r27
    1326:	ef 93       	push	r30
    1328:	ff 93       	push	r31
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_err_callback) {
    1332:	80 91 4e 22 	lds	r24, 0x224E
    1336:	90 91 4f 22 	lds	r25, 0x224F
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	31 f0       	breq	.+12     	; 0x134a <__vector_54+0x48>
		tc_tce1_err_callback();
    133e:	80 91 4e 22 	lds	r24, 0x224E
    1342:	90 91 4f 22 	lds	r25, 0x224F
    1346:	fc 01       	movw	r30, r24
    1348:	19 95       	eicall
	}
}
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	ff 91       	pop	r31
    1350:	ef 91       	pop	r30
    1352:	bf 91       	pop	r27
    1354:	af 91       	pop	r26
    1356:	9f 91       	pop	r25
    1358:	8f 91       	pop	r24
    135a:	7f 91       	pop	r23
    135c:	6f 91       	pop	r22
    135e:	5f 91       	pop	r21
    1360:	4f 91       	pop	r20
    1362:	3f 91       	pop	r19
    1364:	2f 91       	pop	r18
    1366:	0f 90       	pop	r0
    1368:	00 92 3b 00 	sts	0x003B, r0
    136c:	0f 90       	pop	r0
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	0f 90       	pop	r0
    1372:	1f 90       	pop	r1
    1374:	18 95       	reti

00001376 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    1376:	1f 92       	push	r1
    1378:	0f 92       	push	r0
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	0f 92       	push	r0
    137e:	00 90 3b 00 	lds	r0, 0x003B
    1382:	0f 92       	push	r0
    1384:	11 24       	eor	r1, r1
    1386:	2f 93       	push	r18
    1388:	3f 93       	push	r19
    138a:	4f 93       	push	r20
    138c:	5f 93       	push	r21
    138e:	6f 93       	push	r22
    1390:	7f 93       	push	r23
    1392:	8f 93       	push	r24
    1394:	9f 93       	push	r25
    1396:	af 93       	push	r26
    1398:	bf 93       	push	r27
    139a:	ef 93       	push	r30
    139c:	ff 93       	push	r31
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_cca_callback) {
    13a6:	80 91 50 22 	lds	r24, 0x2250
    13aa:	90 91 51 22 	lds	r25, 0x2251
    13ae:	00 97       	sbiw	r24, 0x00	; 0
    13b0:	31 f0       	breq	.+12     	; 0x13be <__vector_55+0x48>
		tc_tce1_cca_callback();
    13b2:	80 91 50 22 	lds	r24, 0x2250
    13b6:	90 91 51 22 	lds	r25, 0x2251
    13ba:	fc 01       	movw	r30, r24
    13bc:	19 95       	eicall
	}
}
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	ff 91       	pop	r31
    13c4:	ef 91       	pop	r30
    13c6:	bf 91       	pop	r27
    13c8:	af 91       	pop	r26
    13ca:	9f 91       	pop	r25
    13cc:	8f 91       	pop	r24
    13ce:	7f 91       	pop	r23
    13d0:	6f 91       	pop	r22
    13d2:	5f 91       	pop	r21
    13d4:	4f 91       	pop	r20
    13d6:	3f 91       	pop	r19
    13d8:	2f 91       	pop	r18
    13da:	0f 90       	pop	r0
    13dc:	00 92 3b 00 	sts	0x003B, r0
    13e0:	0f 90       	pop	r0
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	0f 90       	pop	r0
    13e6:	1f 90       	pop	r1
    13e8:	18 95       	reti

000013ea <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    13ea:	1f 92       	push	r1
    13ec:	0f 92       	push	r0
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	0f 92       	push	r0
    13f2:	00 90 3b 00 	lds	r0, 0x003B
    13f6:	0f 92       	push	r0
    13f8:	11 24       	eor	r1, r1
    13fa:	2f 93       	push	r18
    13fc:	3f 93       	push	r19
    13fe:	4f 93       	push	r20
    1400:	5f 93       	push	r21
    1402:	6f 93       	push	r22
    1404:	7f 93       	push	r23
    1406:	8f 93       	push	r24
    1408:	9f 93       	push	r25
    140a:	af 93       	push	r26
    140c:	bf 93       	push	r27
    140e:	ef 93       	push	r30
    1410:	ff 93       	push	r31
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce1_ccb_callback) {
    141a:	80 91 52 22 	lds	r24, 0x2252
    141e:	90 91 53 22 	lds	r25, 0x2253
    1422:	00 97       	sbiw	r24, 0x00	; 0
    1424:	31 f0       	breq	.+12     	; 0x1432 <__vector_56+0x48>
		tc_tce1_ccb_callback();
    1426:	80 91 52 22 	lds	r24, 0x2252
    142a:	90 91 53 22 	lds	r25, 0x2253
    142e:	fc 01       	movw	r30, r24
    1430:	19 95       	eicall
	}
}
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	ff 91       	pop	r31
    1438:	ef 91       	pop	r30
    143a:	bf 91       	pop	r27
    143c:	af 91       	pop	r26
    143e:	9f 91       	pop	r25
    1440:	8f 91       	pop	r24
    1442:	7f 91       	pop	r23
    1444:	6f 91       	pop	r22
    1446:	5f 91       	pop	r21
    1448:	4f 91       	pop	r20
    144a:	3f 91       	pop	r19
    144c:	2f 91       	pop	r18
    144e:	0f 90       	pop	r0
    1450:	00 92 3b 00 	sts	0x003B, r0
    1454:	0f 90       	pop	r0
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	0f 90       	pop	r0
    145a:	1f 90       	pop	r1
    145c:	18 95       	reti

0000145e <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    145e:	1f 92       	push	r1
    1460:	0f 92       	push	r0
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	0f 92       	push	r0
    1466:	00 90 3b 00 	lds	r0, 0x003B
    146a:	0f 92       	push	r0
    146c:	11 24       	eor	r1, r1
    146e:	2f 93       	push	r18
    1470:	3f 93       	push	r19
    1472:	4f 93       	push	r20
    1474:	5f 93       	push	r21
    1476:	6f 93       	push	r22
    1478:	7f 93       	push	r23
    147a:	8f 93       	push	r24
    147c:	9f 93       	push	r25
    147e:	af 93       	push	r26
    1480:	bf 93       	push	r27
    1482:	ef 93       	push	r30
    1484:	ff 93       	push	r31
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ovf_callback) {
    148e:	80 91 54 22 	lds	r24, 0x2254
    1492:	90 91 55 22 	lds	r25, 0x2255
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	31 f0       	breq	.+12     	; 0x14a6 <__vector_108+0x48>
		tc_tcf0_ovf_callback();
    149a:	80 91 54 22 	lds	r24, 0x2254
    149e:	90 91 55 22 	lds	r25, 0x2255
    14a2:	fc 01       	movw	r30, r24
    14a4:	19 95       	eicall
	}
}
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	ff 91       	pop	r31
    14ac:	ef 91       	pop	r30
    14ae:	bf 91       	pop	r27
    14b0:	af 91       	pop	r26
    14b2:	9f 91       	pop	r25
    14b4:	8f 91       	pop	r24
    14b6:	7f 91       	pop	r23
    14b8:	6f 91       	pop	r22
    14ba:	5f 91       	pop	r21
    14bc:	4f 91       	pop	r20
    14be:	3f 91       	pop	r19
    14c0:	2f 91       	pop	r18
    14c2:	0f 90       	pop	r0
    14c4:	00 92 3b 00 	sts	0x003B, r0
    14c8:	0f 90       	pop	r0
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	0f 90       	pop	r0
    14ce:	1f 90       	pop	r1
    14d0:	18 95       	reti

000014d2 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    14d2:	1f 92       	push	r1
    14d4:	0f 92       	push	r0
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	0f 92       	push	r0
    14da:	00 90 3b 00 	lds	r0, 0x003B
    14de:	0f 92       	push	r0
    14e0:	11 24       	eor	r1, r1
    14e2:	2f 93       	push	r18
    14e4:	3f 93       	push	r19
    14e6:	4f 93       	push	r20
    14e8:	5f 93       	push	r21
    14ea:	6f 93       	push	r22
    14ec:	7f 93       	push	r23
    14ee:	8f 93       	push	r24
    14f0:	9f 93       	push	r25
    14f2:	af 93       	push	r26
    14f4:	bf 93       	push	r27
    14f6:	ef 93       	push	r30
    14f8:	ff 93       	push	r31
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_err_callback) {
    1502:	80 91 56 22 	lds	r24, 0x2256
    1506:	90 91 57 22 	lds	r25, 0x2257
    150a:	00 97       	sbiw	r24, 0x00	; 0
    150c:	31 f0       	breq	.+12     	; 0x151a <__vector_109+0x48>
		tc_tcf0_err_callback();
    150e:	80 91 56 22 	lds	r24, 0x2256
    1512:	90 91 57 22 	lds	r25, 0x2257
    1516:	fc 01       	movw	r30, r24
    1518:	19 95       	eicall
	}
}
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	ff 91       	pop	r31
    1520:	ef 91       	pop	r30
    1522:	bf 91       	pop	r27
    1524:	af 91       	pop	r26
    1526:	9f 91       	pop	r25
    1528:	8f 91       	pop	r24
    152a:	7f 91       	pop	r23
    152c:	6f 91       	pop	r22
    152e:	5f 91       	pop	r21
    1530:	4f 91       	pop	r20
    1532:	3f 91       	pop	r19
    1534:	2f 91       	pop	r18
    1536:	0f 90       	pop	r0
    1538:	00 92 3b 00 	sts	0x003B, r0
    153c:	0f 90       	pop	r0
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	0f 90       	pop	r0
    1542:	1f 90       	pop	r1
    1544:	18 95       	reti

00001546 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    1546:	1f 92       	push	r1
    1548:	0f 92       	push	r0
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	0f 92       	push	r0
    154e:	00 90 3b 00 	lds	r0, 0x003B
    1552:	0f 92       	push	r0
    1554:	11 24       	eor	r1, r1
    1556:	2f 93       	push	r18
    1558:	3f 93       	push	r19
    155a:	4f 93       	push	r20
    155c:	5f 93       	push	r21
    155e:	6f 93       	push	r22
    1560:	7f 93       	push	r23
    1562:	8f 93       	push	r24
    1564:	9f 93       	push	r25
    1566:	af 93       	push	r26
    1568:	bf 93       	push	r27
    156a:	ef 93       	push	r30
    156c:	ff 93       	push	r31
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_cca_callback) {
    1576:	80 91 58 22 	lds	r24, 0x2258
    157a:	90 91 59 22 	lds	r25, 0x2259
    157e:	00 97       	sbiw	r24, 0x00	; 0
    1580:	31 f0       	breq	.+12     	; 0x158e <__vector_110+0x48>
		tc_tcf0_cca_callback();
    1582:	80 91 58 22 	lds	r24, 0x2258
    1586:	90 91 59 22 	lds	r25, 0x2259
    158a:	fc 01       	movw	r30, r24
    158c:	19 95       	eicall
	}
}
    158e:	cf 91       	pop	r28
    1590:	df 91       	pop	r29
    1592:	ff 91       	pop	r31
    1594:	ef 91       	pop	r30
    1596:	bf 91       	pop	r27
    1598:	af 91       	pop	r26
    159a:	9f 91       	pop	r25
    159c:	8f 91       	pop	r24
    159e:	7f 91       	pop	r23
    15a0:	6f 91       	pop	r22
    15a2:	5f 91       	pop	r21
    15a4:	4f 91       	pop	r20
    15a6:	3f 91       	pop	r19
    15a8:	2f 91       	pop	r18
    15aa:	0f 90       	pop	r0
    15ac:	00 92 3b 00 	sts	0x003B, r0
    15b0:	0f 90       	pop	r0
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	0f 90       	pop	r0
    15b6:	1f 90       	pop	r1
    15b8:	18 95       	reti

000015ba <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    15ba:	1f 92       	push	r1
    15bc:	0f 92       	push	r0
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	0f 92       	push	r0
    15c2:	00 90 3b 00 	lds	r0, 0x003B
    15c6:	0f 92       	push	r0
    15c8:	11 24       	eor	r1, r1
    15ca:	2f 93       	push	r18
    15cc:	3f 93       	push	r19
    15ce:	4f 93       	push	r20
    15d0:	5f 93       	push	r21
    15d2:	6f 93       	push	r22
    15d4:	7f 93       	push	r23
    15d6:	8f 93       	push	r24
    15d8:	9f 93       	push	r25
    15da:	af 93       	push	r26
    15dc:	bf 93       	push	r27
    15de:	ef 93       	push	r30
    15e0:	ff 93       	push	r31
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccb_callback) {
    15ea:	80 91 5a 22 	lds	r24, 0x225A
    15ee:	90 91 5b 22 	lds	r25, 0x225B
    15f2:	00 97       	sbiw	r24, 0x00	; 0
    15f4:	31 f0       	breq	.+12     	; 0x1602 <__vector_111+0x48>
		tc_tcf0_ccb_callback();
    15f6:	80 91 5a 22 	lds	r24, 0x225A
    15fa:	90 91 5b 22 	lds	r25, 0x225B
    15fe:	fc 01       	movw	r30, r24
    1600:	19 95       	eicall
	}
}
    1602:	cf 91       	pop	r28
    1604:	df 91       	pop	r29
    1606:	ff 91       	pop	r31
    1608:	ef 91       	pop	r30
    160a:	bf 91       	pop	r27
    160c:	af 91       	pop	r26
    160e:	9f 91       	pop	r25
    1610:	8f 91       	pop	r24
    1612:	7f 91       	pop	r23
    1614:	6f 91       	pop	r22
    1616:	5f 91       	pop	r21
    1618:	4f 91       	pop	r20
    161a:	3f 91       	pop	r19
    161c:	2f 91       	pop	r18
    161e:	0f 90       	pop	r0
    1620:	00 92 3b 00 	sts	0x003B, r0
    1624:	0f 90       	pop	r0
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	0f 90       	pop	r0
    162a:	1f 90       	pop	r1
    162c:	18 95       	reti

0000162e <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    162e:	1f 92       	push	r1
    1630:	0f 92       	push	r0
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	0f 92       	push	r0
    1636:	00 90 3b 00 	lds	r0, 0x003B
    163a:	0f 92       	push	r0
    163c:	11 24       	eor	r1, r1
    163e:	2f 93       	push	r18
    1640:	3f 93       	push	r19
    1642:	4f 93       	push	r20
    1644:	5f 93       	push	r21
    1646:	6f 93       	push	r22
    1648:	7f 93       	push	r23
    164a:	8f 93       	push	r24
    164c:	9f 93       	push	r25
    164e:	af 93       	push	r26
    1650:	bf 93       	push	r27
    1652:	ef 93       	push	r30
    1654:	ff 93       	push	r31
    1656:	df 93       	push	r29
    1658:	cf 93       	push	r28
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccc_callback) {
    165e:	80 91 5c 22 	lds	r24, 0x225C
    1662:	90 91 5d 22 	lds	r25, 0x225D
    1666:	00 97       	sbiw	r24, 0x00	; 0
    1668:	31 f0       	breq	.+12     	; 0x1676 <__vector_112+0x48>
		tc_tcf0_ccc_callback();
    166a:	80 91 5c 22 	lds	r24, 0x225C
    166e:	90 91 5d 22 	lds	r25, 0x225D
    1672:	fc 01       	movw	r30, r24
    1674:	19 95       	eicall
	}
}
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	ff 91       	pop	r31
    167c:	ef 91       	pop	r30
    167e:	bf 91       	pop	r27
    1680:	af 91       	pop	r26
    1682:	9f 91       	pop	r25
    1684:	8f 91       	pop	r24
    1686:	7f 91       	pop	r23
    1688:	6f 91       	pop	r22
    168a:	5f 91       	pop	r21
    168c:	4f 91       	pop	r20
    168e:	3f 91       	pop	r19
    1690:	2f 91       	pop	r18
    1692:	0f 90       	pop	r0
    1694:	00 92 3b 00 	sts	0x003B, r0
    1698:	0f 90       	pop	r0
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	0f 90       	pop	r0
    169e:	1f 90       	pop	r1
    16a0:	18 95       	reti

000016a2 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    16a2:	1f 92       	push	r1
    16a4:	0f 92       	push	r0
    16a6:	0f b6       	in	r0, 0x3f	; 63
    16a8:	0f 92       	push	r0
    16aa:	00 90 3b 00 	lds	r0, 0x003B
    16ae:	0f 92       	push	r0
    16b0:	11 24       	eor	r1, r1
    16b2:	2f 93       	push	r18
    16b4:	3f 93       	push	r19
    16b6:	4f 93       	push	r20
    16b8:	5f 93       	push	r21
    16ba:	6f 93       	push	r22
    16bc:	7f 93       	push	r23
    16be:	8f 93       	push	r24
    16c0:	9f 93       	push	r25
    16c2:	af 93       	push	r26
    16c4:	bf 93       	push	r27
    16c6:	ef 93       	push	r30
    16c8:	ff 93       	push	r31
    16ca:	df 93       	push	r29
    16cc:	cf 93       	push	r28
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcf0_ccd_callback) {
    16d2:	80 91 5e 22 	lds	r24, 0x225E
    16d6:	90 91 5f 22 	lds	r25, 0x225F
    16da:	00 97       	sbiw	r24, 0x00	; 0
    16dc:	31 f0       	breq	.+12     	; 0x16ea <__vector_113+0x48>
		tc_tcf0_ccd_callback();
    16de:	80 91 5e 22 	lds	r24, 0x225E
    16e2:	90 91 5f 22 	lds	r25, 0x225F
    16e6:	fc 01       	movw	r30, r24
    16e8:	19 95       	eicall
	}
}
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	ff 91       	pop	r31
    16f0:	ef 91       	pop	r30
    16f2:	bf 91       	pop	r27
    16f4:	af 91       	pop	r26
    16f6:	9f 91       	pop	r25
    16f8:	8f 91       	pop	r24
    16fa:	7f 91       	pop	r23
    16fc:	6f 91       	pop	r22
    16fe:	5f 91       	pop	r21
    1700:	4f 91       	pop	r20
    1702:	3f 91       	pop	r19
    1704:	2f 91       	pop	r18
    1706:	0f 90       	pop	r0
    1708:	00 92 3b 00 	sts	0x003B, r0
    170c:	0f 90       	pop	r0
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	0f 90       	pop	r0
    1712:	1f 90       	pop	r1
    1714:	18 95       	reti

00001716 <usart_rx_enable>:
 * \brief Enable USART receiver.
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
    1716:	df 93       	push	r29
    1718:	cf 93       	push	r28
    171a:	0f 92       	push	r0
    171c:	0f 92       	push	r0
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62
    1722:	89 83       	std	Y+1, r24	; 0x01
    1724:	9a 83       	std	Y+2, r25	; 0x02
	(usart)->CTRLB |= USART_RXEN_bm;
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	9a 81       	ldd	r25, Y+2	; 0x02
    172a:	fc 01       	movw	r30, r24
    172c:	84 81       	ldd	r24, Z+4	; 0x04
    172e:	28 2f       	mov	r18, r24
    1730:	20 61       	ori	r18, 0x10	; 16
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	9a 81       	ldd	r25, Y+2	; 0x02
    1736:	fc 01       	movw	r30, r24
    1738:	24 83       	std	Z+4, r18	; 0x04
}
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	cf 91       	pop	r28
    1740:	df 91       	pop	r29
    1742:	08 95       	ret

00001744 <usart_format_set>:
 *  \param parityMode The parity Mode. Use USART_PMODE_t type.
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
    1744:	df 93       	push	r29
    1746:	cf 93       	push	r28
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
    174c:	27 97       	sbiw	r28, 0x07	; 7
    174e:	cd bf       	out	0x3d, r28	; 61
    1750:	de bf       	out	0x3e, r29	; 62
    1752:	89 83       	std	Y+1, r24	; 0x01
    1754:	9a 83       	std	Y+2, r25	; 0x02
    1756:	6b 83       	std	Y+3, r22	; 0x03
    1758:	7c 83       	std	Y+4, r23	; 0x04
    175a:	4d 83       	std	Y+5, r20	; 0x05
    175c:	5e 83       	std	Y+6, r21	; 0x06
    175e:	2f 83       	std	Y+7, r18	; 0x07
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1760:	9b 81       	ldd	r25, Y+3	; 0x03
    1762:	8d 81       	ldd	r24, Y+5	; 0x05
    1764:	98 2b       	or	r25, r24
    1766:	8f 81       	ldd	r24, Y+7	; 0x07
    1768:	88 23       	and	r24, r24
    176a:	11 f0       	breq	.+4      	; 0x1770 <usart_format_set+0x2c>
    176c:	88 e0       	ldi	r24, 0x08	; 8
    176e:	01 c0       	rjmp	.+2      	; 0x1772 <usart_format_set+0x2e>
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	29 2f       	mov	r18, r25
    1774:	28 2b       	or	r18, r24
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	9a 81       	ldd	r25, Y+2	; 0x02
    177a:	fc 01       	movw	r30, r24
    177c:	25 83       	std	Z+5, r18	; 0x05
		| (twoStopBits ? USART_SBMODE_bm : 0);
}
    177e:	27 96       	adiw	r28, 0x07	; 7
    1780:	cd bf       	out	0x3d, r28	; 61
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <usart_tx_enable>:
 * \brief Enable USART transmitter.
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	0f 92       	push	r0
    1790:	0f 92       	push	r0
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	89 83       	std	Y+1, r24	; 0x01
    1798:	9a 83       	std	Y+2, r25	; 0x02
	(usart)->CTRLB |= USART_TXEN_bm;
    179a:	89 81       	ldd	r24, Y+1	; 0x01
    179c:	9a 81       	ldd	r25, Y+2	; 0x02
    179e:	fc 01       	movw	r30, r24
    17a0:	84 81       	ldd	r24, Z+4	; 0x04
    17a2:	28 2f       	mov	r18, r24
    17a4:	28 60       	ori	r18, 0x08	; 8
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	9a 81       	ldd	r25, Y+2	; 0x02
    17aa:	fc 01       	movw	r30, r24
    17ac:	24 83       	std	Z+4, r18	; 0x04
}
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	cf 91       	pop	r28
    17b4:	df 91       	pop	r29
    17b6:	08 95       	ret

000017b8 <usart_set_mode>:
 * - 0x1        : Synchronous mode.
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
    17b8:	df 93       	push	r29
    17ba:	cf 93       	push	r28
    17bc:	00 d0       	rcall	.+0      	; 0x17be <usart_set_mode+0x6>
    17be:	0f 92       	push	r0
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
    17c4:	89 83       	std	Y+1, r24	; 0x01
    17c6:	9a 83       	std	Y+2, r25	; 0x02
    17c8:	6b 83       	std	Y+3, r22	; 0x03
    17ca:	7c 83       	std	Y+4, r23	; 0x04
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    17cc:	89 81       	ldd	r24, Y+1	; 0x01
    17ce:	9a 81       	ldd	r25, Y+2	; 0x02
    17d0:	fc 01       	movw	r30, r24
    17d2:	85 81       	ldd	r24, Z+5	; 0x05
    17d4:	98 2f       	mov	r25, r24
    17d6:	9f 73       	andi	r25, 0x3F	; 63
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	29 2f       	mov	r18, r25
    17dc:	28 2b       	or	r18, r24
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	9a 81       	ldd	r25, Y+2	; 0x02
    17e2:	fc 01       	movw	r30, r24
    17e4:	25 83       	std	Z+5, r18	; 0x05
}
    17e6:	24 96       	adiw	r28, 0x04	; 4
    17e8:	cd bf       	out	0x3d, r28	; 61
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	cf 91       	pop	r28
    17ee:	df 91       	pop	r29
    17f0:	08 95       	ret

000017f2 <usart_data_register_is_empty>:
 * \brief Check if data register empty flag is set.
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
    17f2:	df 93       	push	r29
    17f4:	cf 93       	push	r28
    17f6:	0f 92       	push	r0
    17f8:	0f 92       	push	r0
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
    17fe:	89 83       	std	Y+1, r24	; 0x01
    1800:	9a 83       	std	Y+2, r25	; 0x02
	return (usart)->STATUS & USART_DREIF_bm;
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	9a 81       	ldd	r25, Y+2	; 0x02
    1806:	fc 01       	movw	r30, r24
    1808:	81 81       	ldd	r24, Z+1	; 0x01
    180a:	88 2f       	mov	r24, r24
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	80 72       	andi	r24, 0x20	; 32
    1810:	90 70       	andi	r25, 0x00	; 0
    1812:	21 e0       	ldi	r18, 0x01	; 1
    1814:	00 97       	sbiw	r24, 0x00	; 0
    1816:	09 f4       	brne	.+2      	; 0x181a <usart_data_register_is_empty+0x28>
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	82 2f       	mov	r24, r18
}
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <usart_rx_is_complete>:
 * Checks if the RX complete interrupt flag is set.
 *
 * \param usart The USART module.
 */
static inline bool usart_rx_is_complete(USART_t * usart)
{
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	0f 92       	push	r0
    182c:	0f 92       	push	r0
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	89 83       	std	Y+1, r24	; 0x01
    1834:	9a 83       	std	Y+2, r25	; 0x02
	return (usart)->STATUS & USART_RXCIF_bm;
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	9a 81       	ldd	r25, Y+2	; 0x02
    183a:	fc 01       	movw	r30, r24
    183c:	81 81       	ldd	r24, Z+1	; 0x01
    183e:	88 2f       	mov	r24, r24
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	80 78       	andi	r24, 0x80	; 128
    1844:	90 70       	andi	r25, 0x00	; 0
    1846:	21 e0       	ldi	r18, 0x01	; 1
    1848:	00 97       	sbiw	r24, 0x00	; 0
    184a:	09 f4       	brne	.+2      	; 0x184e <usart_rx_is_complete+0x28>
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	82 2f       	mov	r24, r18
}
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_SOURCE) {
	case SYSCLK_SRC_RC2MHZ:
		return 2000000UL;
    1862:	80 e8       	ldi	r24, 0x80	; 128
    1864:	94 e8       	ldi	r25, 0x84	; 132
    1866:	ae e1       	ldi	r26, 0x1E	; 30
    1868:	b0 e0       	ldi	r27, 0x00	; 0

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
    186a:	bc 01       	movw	r22, r24
    186c:	cd 01       	movw	r24, r26
    186e:	cf 91       	pop	r28
    1870:	df 91       	pop	r29
    1872:	08 95       	ret

00001874 <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
    1874:	df 93       	push	r29
    1876:	cf 93       	push	r28
    1878:	0f 92       	push	r0
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
    187e:	19 82       	std	Y+1, r1	; 0x01

	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
    1880:	ec df       	rcall	.-40     	; 0x185a <sysclk_get_main_hz>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	29 81       	ldd	r18, Y+1	; 0x01
    1888:	22 2f       	mov	r18, r18
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	02 2e       	mov	r0, r18
    188e:	04 c0       	rjmp	.+8      	; 0x1898 <sysclk_get_per4_hz+0x24>
    1890:	b6 95       	lsr	r27
    1892:	a7 95       	ror	r26
    1894:	97 95       	ror	r25
    1896:	87 95       	ror	r24
    1898:	0a 94       	dec	r0
    189a:	d2 f7       	brpl	.-12     	; 0x1890 <sysclk_get_per4_hz+0x1c>
}
    189c:	bc 01       	movw	r22, r24
    189e:	cd 01       	movw	r24, r26
    18a0:	0f 90       	pop	r0
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
    18b0:	e1 df       	rcall	.-62     	; 0x1874 <sysclk_get_per4_hz>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
    18b6:	bc 01       	movw	r22, r24
    18b8:	cd 01       	movw	r24, r26
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	08 95       	ret

000018c0 <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
    18c8:	ef df       	rcall	.-34     	; 0x18a8 <sysclk_get_per2_hz>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
}
    18ce:	bc 01       	movw	r22, r24
    18d0:	cd 01       	movw	r24, r26
    18d2:	cf 91       	pop	r28
    18d4:	df 91       	pop	r29
    18d6:	08 95       	ret

000018d8 <usart_enable_module_clock>:
 * module.
 *
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
    18d8:	df 93       	push	r29
    18da:	cf 93       	push	r28
    18dc:	0f 92       	push	r0
    18de:	0f 92       	push	r0
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
    18e4:	89 83       	std	Y+1, r24	; 0x01
    18e6:	9a 83       	std	Y+2, r25	; 0x02
#ifdef USARTC0
	if ((uintptr_t)usart == (uintptr_t)&USARTC0) {
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	9a 81       	ldd	r25, Y+2	; 0x02
    18ec:	28 e0       	ldi	r18, 0x08	; 8
    18ee:	80 3a       	cpi	r24, 0xA0	; 160
    18f0:	92 07       	cpc	r25, r18
    18f2:	29 f4       	brne	.+10     	; 0x18fe <usart_enable_module_clock+0x26>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    18f4:	83 e0       	ldi	r24, 0x03	; 3
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	60 e1       	ldi	r22, 0x10	; 16
    18fa:	0e 94 56 02 	call	0x4ac	; 0x4ac <sysclk_enable_module>
	}
#endif
#ifdef USARTC1
	if ((uintptr_t)usart == (uintptr_t)&USARTC1) {
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
    1900:	9a 81       	ldd	r25, Y+2	; 0x02
    1902:	28 e0       	ldi	r18, 0x08	; 8
    1904:	80 3b       	cpi	r24, 0xB0	; 176
    1906:	92 07       	cpc	r25, r18
    1908:	29 f4       	brne	.+10     	; 0x1914 <usart_enable_module_clock+0x3c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    190a:	83 e0       	ldi	r24, 0x03	; 3
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	60 e2       	ldi	r22, 0x20	; 32
    1910:	0e 94 56 02 	call	0x4ac	; 0x4ac <sysclk_enable_module>
	}
#endif
#ifdef USARTD0
	if ((uintptr_t)usart == (uintptr_t)&USARTD0) {
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	9a 81       	ldd	r25, Y+2	; 0x02
    1918:	29 e0       	ldi	r18, 0x09	; 9
    191a:	80 3a       	cpi	r24, 0xA0	; 160
    191c:	92 07       	cpc	r25, r18
    191e:	29 f4       	brne	.+10     	; 0x192a <usart_enable_module_clock+0x52>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1920:	84 e0       	ldi	r24, 0x04	; 4
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	60 e1       	ldi	r22, 0x10	; 16
    1926:	0e 94 56 02 	call	0x4ac	; 0x4ac <sysclk_enable_module>
	}
#endif
#ifdef USARTD1
	if ((uintptr_t)usart == (uintptr_t)&USARTD1) {
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	9a 81       	ldd	r25, Y+2	; 0x02
    192e:	29 e0       	ldi	r18, 0x09	; 9
    1930:	80 3b       	cpi	r24, 0xB0	; 176
    1932:	92 07       	cpc	r25, r18
    1934:	29 f4       	brne	.+10     	; 0x1940 <usart_enable_module_clock+0x68>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1936:	84 e0       	ldi	r24, 0x04	; 4
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	60 e2       	ldi	r22, 0x20	; 32
    193c:	0e 94 56 02 	call	0x4ac	; 0x4ac <sysclk_enable_module>
	}
#endif
#ifdef USARTE0
	if ((uintptr_t)usart == (uintptr_t)&USARTE0) {
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	9a 81       	ldd	r25, Y+2	; 0x02
    1944:	2a e0       	ldi	r18, 0x0A	; 10
    1946:	80 3a       	cpi	r24, 0xA0	; 160
    1948:	92 07       	cpc	r25, r18
    194a:	29 f4       	brne	.+10     	; 0x1956 <usart_enable_module_clock+0x7e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    194c:	85 e0       	ldi	r24, 0x05	; 5
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	60 e1       	ldi	r22, 0x10	; 16
    1952:	0e 94 56 02 	call	0x4ac	; 0x4ac <sysclk_enable_module>
	if ((uintptr_t)usart == (uintptr_t)&USARTE1) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
	}
#endif
#ifdef USARTF0
	if ((uintptr_t)usart == (uintptr_t)&USARTF0) {
    1956:	89 81       	ldd	r24, Y+1	; 0x01
    1958:	9a 81       	ldd	r25, Y+2	; 0x02
    195a:	2b e0       	ldi	r18, 0x0B	; 11
    195c:	80 3a       	cpi	r24, 0xA0	; 160
    195e:	92 07       	cpc	r25, r18
    1960:	29 f4       	brne	.+10     	; 0x196c <usart_enable_module_clock+0x94>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1962:	86 e0       	ldi	r24, 0x06	; 6
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	60 e1       	ldi	r22, 0x10	; 16
    1968:	0e 94 56 02 	call	0x4ac	; 0x4ac <sysclk_enable_module>
	}
#endif
#ifdef USARTF1
	if ((uintptr_t)usart == (uintptr_t)&USARTF1) {
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	9a 81       	ldd	r25, Y+2	; 0x02
    1970:	2b e0       	ldi	r18, 0x0B	; 11
    1972:	80 3b       	cpi	r24, 0xB0	; 176
    1974:	92 07       	cpc	r25, r18
    1976:	29 f4       	brne	.+10     	; 0x1982 <usart_enable_module_clock+0xaa>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    1978:	86 e0       	ldi	r24, 0x06	; 6
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	60 e2       	ldi	r22, 0x20	; 32
    197e:	0e 94 56 02 	call	0x4ac	; 0x4ac <sysclk_enable_module>
	}
#endif
}
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	cf 91       	pop	r28
    1988:	df 91       	pop	r29
    198a:	08 95       	ret

0000198c <usart_init_rs232>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    198c:	cf 92       	push	r12
    198e:	df 92       	push	r13
    1990:	ef 92       	push	r14
    1992:	ff 92       	push	r15
    1994:	0f 93       	push	r16
    1996:	1f 93       	push	r17
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	00 d0       	rcall	.+0      	; 0x199e <usart_init_rs232+0x12>
    199e:	0f 92       	push	r0
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	89 83       	std	Y+1, r24	; 0x01
    19a6:	9a 83       	std	Y+2, r25	; 0x02
    19a8:	6b 83       	std	Y+3, r22	; 0x03
    19aa:	7c 83       	std	Y+4, r23	; 0x04
	usart_enable_module_clock(usart);
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
    19ae:	9a 81       	ldd	r25, Y+2	; 0x02
    19b0:	93 df       	rcall	.-218    	; 0x18d8 <usart_enable_module_clock>
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	9a 81       	ldd	r25, Y+2	; 0x02
    19b6:	60 e0       	ldi	r22, 0x00	; 0
    19b8:	70 e0       	ldi	r23, 0x00	; 0
    19ba:	fe de       	rcall	.-516    	; 0x17b8 <usart_set_mode>
	usart_format_set(usart, opt->charlength, opt->paritytype,
    19bc:	8b 81       	ldd	r24, Y+3	; 0x03
    19be:	9c 81       	ldd	r25, Y+4	; 0x04
    19c0:	dc 01       	movw	r26, r24
    19c2:	14 96       	adiw	r26, 0x04	; 4
    19c4:	4d 91       	ld	r20, X+
    19c6:	5c 91       	ld	r21, X
    19c8:	15 97       	sbiw	r26, 0x05	; 5
    19ca:	8b 81       	ldd	r24, Y+3	; 0x03
    19cc:	9c 81       	ldd	r25, Y+4	; 0x04
    19ce:	fc 01       	movw	r30, r24
    19d0:	26 81       	ldd	r18, Z+6	; 0x06
    19d2:	37 81       	ldd	r19, Z+7	; 0x07
			opt->stopbits);
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	9c 81       	ldd	r25, Y+4	; 0x04
 */
void usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
	usart_enable_module_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
    19d8:	dc 01       	movw	r26, r24
    19da:	18 96       	adiw	r26, 0x08	; 8
    19dc:	ec 91       	ld	r30, X
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	9a 81       	ldd	r25, Y+2	; 0x02
    19e2:	ba 01       	movw	r22, r20
    19e4:	a9 01       	movw	r20, r18
    19e6:	2e 2f       	mov	r18, r30
    19e8:	ad de       	rcall	.-678    	; 0x1744 <usart_format_set>
			opt->stopbits);
	usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    19ea:	8b 81       	ldd	r24, Y+3	; 0x03
    19ec:	9c 81       	ldd	r25, Y+4	; 0x04
    19ee:	fc 01       	movw	r30, r24
    19f0:	c0 80       	ld	r12, Z
    19f2:	d1 80       	ldd	r13, Z+1	; 0x01
    19f4:	e2 80       	ldd	r14, Z+2	; 0x02
    19f6:	f3 80       	ldd	r15, Z+3	; 0x03
    19f8:	63 df       	rcall	.-314    	; 0x18c0 <sysclk_get_per_hz>
    19fa:	8b 01       	movw	r16, r22
    19fc:	9c 01       	movw	r18, r24
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	9a 81       	ldd	r25, Y+2	; 0x02
    1a02:	b7 01       	movw	r22, r14
    1a04:	a6 01       	movw	r20, r12
    1a06:	4a d0       	rcall	.+148    	; 0x1a9c <usart_set_baudrate>
	usart_tx_enable(usart);
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0c:	be de       	rcall	.-644    	; 0x178a <usart_tx_enable>
	usart_rx_enable(usart);
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
    1a10:	9a 81       	ldd	r25, Y+2	; 0x02
    1a12:	81 de       	rcall	.-766    	; 0x1716 <usart_rx_enable>
}
    1a14:	24 96       	adiw	r28, 0x04	; 4
    1a16:	cd bf       	out	0x3d, r28	; 61
    1a18:	de bf       	out	0x3e, r29	; 62
    1a1a:	cf 91       	pop	r28
    1a1c:	df 91       	pop	r29
    1a1e:	1f 91       	pop	r17
    1a20:	0f 91       	pop	r16
    1a22:	ff 90       	pop	r15
    1a24:	ef 90       	pop	r14
    1a26:	df 90       	pop	r13
    1a28:	cf 90       	pop	r12
    1a2a:	08 95       	ret

00001a2c <usart_putchar>:
 * \param c The data to send.
 *
 * \return STATUS_OK
 */
enum status_code usart_putchar(USART_t *usart, uint8_t c)
{
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	00 d0       	rcall	.+0      	; 0x1a32 <usart_putchar+0x6>
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	89 83       	std	Y+1, r24	; 0x01
    1a38:	9a 83       	std	Y+2, r25	; 0x02
    1a3a:	6b 83       	std	Y+3, r22	; 0x03
	while (usart_data_register_is_empty(usart) == false);
    1a3c:	00 00       	nop
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	9a 81       	ldd	r25, Y+2	; 0x02
    1a42:	d7 de       	rcall	.-594    	; 0x17f2 <usart_data_register_is_empty>
    1a44:	98 2f       	mov	r25, r24
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	89 27       	eor	r24, r25
    1a4a:	88 23       	and	r24, r24
    1a4c:	c1 f7       	brne	.-16     	; 0x1a3e <usart_putchar+0x12>
	(usart)->DATA = c;
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	9a 81       	ldd	r25, Y+2	; 0x02
    1a52:	2b 81       	ldd	r18, Y+3	; 0x03
    1a54:	fc 01       	movw	r30, r24
    1a56:	20 83       	st	Z, r18
	return STATUS_OK;
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
}
    1a5c:	23 96       	adiw	r28, 0x03	; 3
    1a5e:	cd bf       	out	0x3d, r28	; 61
    1a60:	de bf       	out	0x3e, r29	; 62
    1a62:	cf 91       	pop	r28
    1a64:	df 91       	pop	r29
    1a66:	08 95       	ret

00001a68 <usart_getchar>:
 * \param usart The USART module.
 *
 * \return The received data.
 */
uint8_t usart_getchar(USART_t *usart)
{
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	0f 92       	push	r0
    1a6e:	0f 92       	push	r0
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	89 83       	std	Y+1, r24	; 0x01
    1a76:	9a 83       	std	Y+2, r25	; 0x02
	while (usart_rx_is_complete(usart) == false);
    1a78:	00 00       	nop
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7e:	d3 de       	rcall	.-602    	; 0x1826 <usart_rx_is_complete>
    1a80:	98 2f       	mov	r25, r24
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	89 27       	eor	r24, r25
    1a86:	88 23       	and	r24, r24
    1a88:	c1 f7       	brne	.-16     	; 0x1a7a <usart_getchar+0x12>
	return ((uint8_t) (usart)->DATA);
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01
    1a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8e:	fc 01       	movw	r30, r24
    1a90:	80 81       	ld	r24, Z
}
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1a9c:	ef 92       	push	r14
    1a9e:	ff 92       	push	r15
    1aa0:	0f 93       	push	r16
    1aa2:	1f 93       	push	r17
    1aa4:	df 93       	push	r29
    1aa6:	cf 93       	push	r28
    1aa8:	cd b7       	in	r28, 0x3d	; 61
    1aaa:	de b7       	in	r29, 0x3e	; 62
    1aac:	6f 97       	sbiw	r28, 0x1f	; 31
    1aae:	cd bf       	out	0x3d, r28	; 61
    1ab0:	de bf       	out	0x3e, r29	; 62
    1ab2:	8e 8b       	std	Y+22, r24	; 0x16
    1ab4:	9f 8b       	std	Y+23, r25	; 0x17
    1ab6:	48 8f       	std	Y+24, r20	; 0x18
    1ab8:	59 8f       	std	Y+25, r21	; 0x19
    1aba:	6a 8f       	std	Y+26, r22	; 0x1a
    1abc:	7b 8f       	std	Y+27, r23	; 0x1b
    1abe:	0c 8f       	std	Y+28, r16	; 0x1c
    1ac0:	1d 8f       	std	Y+29, r17	; 0x1d
    1ac2:	2e 8f       	std	Y+30, r18	; 0x1e
    1ac4:	3f 8f       	std	Y+31, r19	; 0x1f

	/*
	 * Check if the hardware supports the given baud rate
	 */
	// 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN)
	max_rate = cpu_hz / 8;
    1ac6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ac8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1aca:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1acc:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1ace:	68 94       	set
    1ad0:	12 f8       	bld	r1, 2
    1ad2:	b6 95       	lsr	r27
    1ad4:	a7 95       	ror	r26
    1ad6:	97 95       	ror	r25
    1ad8:	87 95       	ror	r24
    1ada:	16 94       	lsr	r1
    1adc:	d1 f7       	brne	.-12     	; 0x1ad2 <usart_set_baudrate+0x36>
    1ade:	8e 87       	std	Y+14, r24	; 0x0e
    1ae0:	9f 87       	std	Y+15, r25	; 0x0f
    1ae2:	a8 8b       	std	Y+16, r26	; 0x10
    1ae4:	b9 8b       	std	Y+17, r27	; 0x11
	// 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1)
	min_rate = cpu_hz / 4194304;
    1ae6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ae8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1aea:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1aec:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1aee:	07 2e       	mov	r0, r23
    1af0:	76 e1       	ldi	r23, 0x16	; 22
    1af2:	b6 95       	lsr	r27
    1af4:	a7 95       	ror	r26
    1af6:	97 95       	ror	r25
    1af8:	87 95       	ror	r24
    1afa:	7a 95       	dec	r23
    1afc:	d1 f7       	brne	.-12     	; 0x1af2 <usart_set_baudrate+0x56>
    1afe:	70 2d       	mov	r23, r0
    1b00:	8a 87       	std	Y+10, r24	; 0x0a
    1b02:	9b 87       	std	Y+11, r25	; 0x0b
    1b04:	ac 87       	std	Y+12, r26	; 0x0c
    1b06:	bd 87       	std	Y+13, r27	; 0x0d

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1b08:	8e 89       	ldd	r24, Y+22	; 0x16
    1b0a:	9f 89       	ldd	r25, Y+23	; 0x17
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	84 81       	ldd	r24, Z+4	; 0x04
    1b10:	88 2f       	mov	r24, r24
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	84 70       	andi	r24, 0x04	; 4
    1b16:	90 70       	andi	r25, 0x00	; 0
    1b18:	00 97       	sbiw	r24, 0x00	; 0
    1b1a:	c1 f4       	brne	.+48     	; 0x1b4c <usart_set_baudrate+0xb0>
		max_rate /= 2;
    1b1c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b1e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b20:	a8 89       	ldd	r26, Y+16	; 0x10
    1b22:	b9 89       	ldd	r27, Y+17	; 0x11
    1b24:	b6 95       	lsr	r27
    1b26:	a7 95       	ror	r26
    1b28:	97 95       	ror	r25
    1b2a:	87 95       	ror	r24
    1b2c:	8e 87       	std	Y+14, r24	; 0x0e
    1b2e:	9f 87       	std	Y+15, r25	; 0x0f
    1b30:	a8 8b       	std	Y+16, r26	; 0x10
    1b32:	b9 8b       	std	Y+17, r27	; 0x11
		min_rate /= 2;
    1b34:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b36:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b38:	ac 85       	ldd	r26, Y+12	; 0x0c
    1b3a:	bd 85       	ldd	r27, Y+13	; 0x0d
    1b3c:	b6 95       	lsr	r27
    1b3e:	a7 95       	ror	r26
    1b40:	97 95       	ror	r25
    1b42:	87 95       	ror	r24
    1b44:	8a 87       	std	Y+10, r24	; 0x0a
    1b46:	9b 87       	std	Y+11, r25	; 0x0b
    1b48:	ac 87       	std	Y+12, r26	; 0x0c
    1b4a:	bd 87       	std	Y+13, r27	; 0x0d
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    1b4c:	28 8d       	ldd	r18, Y+24	; 0x18
    1b4e:	39 8d       	ldd	r19, Y+25	; 0x19
    1b50:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1b52:	5b 8d       	ldd	r21, Y+27	; 0x1b
    1b54:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b56:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b58:	a8 89       	ldd	r26, Y+16	; 0x10
    1b5a:	b9 89       	ldd	r27, Y+17	; 0x11
    1b5c:	82 17       	cp	r24, r18
    1b5e:	93 07       	cpc	r25, r19
    1b60:	a4 07       	cpc	r26, r20
    1b62:	b5 07       	cpc	r27, r21
    1b64:	68 f0       	brcs	.+26     	; 0x1b80 <usart_set_baudrate+0xe4>
    1b66:	28 8d       	ldd	r18, Y+24	; 0x18
    1b68:	39 8d       	ldd	r19, Y+25	; 0x19
    1b6a:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1b6c:	5b 8d       	ldd	r21, Y+27	; 0x1b
    1b6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b70:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b72:	ac 85       	ldd	r26, Y+12	; 0x0c
    1b74:	bd 85       	ldd	r27, Y+13	; 0x0d
    1b76:	28 17       	cp	r18, r24
    1b78:	39 07       	cpc	r19, r25
    1b7a:	4a 07       	cpc	r20, r26
    1b7c:	5b 07       	cpc	r21, r27
    1b7e:	10 f4       	brcc	.+4      	; 0x1b84 <usart_set_baudrate+0xe8>
		return false;
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	3c c1       	rjmp	.+632    	; 0x1dfc <usart_set_baudrate+0x360>
	}

	/*
	 * Check if double speed is enabled.
	 */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1b84:	8e 89       	ldd	r24, Y+22	; 0x16
    1b86:	9f 89       	ldd	r25, Y+23	; 0x17
    1b88:	fc 01       	movw	r30, r24
    1b8a:	84 81       	ldd	r24, Z+4	; 0x04
    1b8c:	88 2f       	mov	r24, r24
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	84 70       	andi	r24, 0x04	; 4
    1b92:	90 70       	andi	r25, 0x00	; 0
    1b94:	00 97       	sbiw	r24, 0x00	; 0
    1b96:	61 f4       	brne	.+24     	; 0x1bb0 <usart_set_baudrate+0x114>
		baud *= 2;
    1b98:	88 8d       	ldd	r24, Y+24	; 0x18
    1b9a:	99 8d       	ldd	r25, Y+25	; 0x19
    1b9c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1b9e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1ba0:	88 0f       	add	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	aa 1f       	adc	r26, r26
    1ba6:	bb 1f       	adc	r27, r27
    1ba8:	88 8f       	std	Y+24, r24	; 0x18
    1baa:	99 8f       	std	Y+25, r25	; 0x19
    1bac:	aa 8f       	std	Y+26, r26	; 0x1a
    1bae:	bb 8f       	std	Y+27, r27	; 0x1b
	}

	/*
	 * Find the lowest possible exponent.
	 */
	limit = 0xfffU >> 4;
    1bb0:	8f ef       	ldi	r24, 0xFF	; 255
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	a0 e0       	ldi	r26, 0x00	; 0
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	8e 83       	std	Y+6, r24	; 0x06
    1bba:	9f 83       	std	Y+7, r25	; 0x07
    1bbc:	a8 87       	std	Y+8, r26	; 0x08
    1bbe:	b9 87       	std	Y+9, r27	; 0x09
	ratio = cpu_hz / baud;
    1bc0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bc2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1bc4:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1bc6:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1bc8:	28 8d       	ldd	r18, Y+24	; 0x18
    1bca:	39 8d       	ldd	r19, Y+25	; 0x19
    1bcc:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1bce:	5b 8d       	ldd	r21, Y+27	; 0x1b
    1bd0:	bc 01       	movw	r22, r24
    1bd2:	cd 01       	movw	r24, r26
    1bd4:	0e 94 a6 1b 	call	0x374c	; 0x374c <__udivmodsi4>
    1bd8:	2a 8b       	std	Y+18, r18	; 0x12
    1bda:	3b 8b       	std	Y+19, r19	; 0x13
    1bdc:	4c 8b       	std	Y+20, r20	; 0x14
    1bde:	5d 8b       	std	Y+21, r21	; 0x15

	for (exp = -7; exp < 7; exp++) {
    1be0:	89 ef       	ldi	r24, 0xF9	; 249
    1be2:	89 83       	std	Y+1, r24	; 0x01
    1be4:	28 c0       	rjmp	.+80     	; 0x1c36 <usart_set_baudrate+0x19a>
		if (ratio < limit) {
    1be6:	2a 89       	ldd	r18, Y+18	; 0x12
    1be8:	3b 89       	ldd	r19, Y+19	; 0x13
    1bea:	4c 89       	ldd	r20, Y+20	; 0x14
    1bec:	5d 89       	ldd	r21, Y+21	; 0x15
    1bee:	8e 81       	ldd	r24, Y+6	; 0x06
    1bf0:	9f 81       	ldd	r25, Y+7	; 0x07
    1bf2:	a8 85       	ldd	r26, Y+8	; 0x08
    1bf4:	b9 85       	ldd	r27, Y+9	; 0x09
    1bf6:	28 17       	cp	r18, r24
    1bf8:	39 07       	cpc	r19, r25
    1bfa:	4a 07       	cpc	r20, r26
    1bfc:	5b 07       	cpc	r21, r27
    1bfe:	f8 f0       	brcs	.+62     	; 0x1c3e <usart_set_baudrate+0x1a2>
			break;
		}

		limit <<= 1;
    1c00:	8e 81       	ldd	r24, Y+6	; 0x06
    1c02:	9f 81       	ldd	r25, Y+7	; 0x07
    1c04:	a8 85       	ldd	r26, Y+8	; 0x08
    1c06:	b9 85       	ldd	r27, Y+9	; 0x09
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	aa 1f       	adc	r26, r26
    1c0e:	bb 1f       	adc	r27, r27
    1c10:	8e 83       	std	Y+6, r24	; 0x06
    1c12:	9f 83       	std	Y+7, r25	; 0x07
    1c14:	a8 87       	std	Y+8, r26	; 0x08
    1c16:	b9 87       	std	Y+9, r27	; 0x09

		if (exp < -3) {
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	8d 3f       	cpi	r24, 0xFD	; 253
    1c1c:	4c f4       	brge	.+18     	; 0x1c30 <usart_set_baudrate+0x194>
			limit |= 1;
    1c1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c20:	9f 81       	ldd	r25, Y+7	; 0x07
    1c22:	a8 85       	ldd	r26, Y+8	; 0x08
    1c24:	b9 85       	ldd	r27, Y+9	; 0x09
    1c26:	81 60       	ori	r24, 0x01	; 1
    1c28:	8e 83       	std	Y+6, r24	; 0x06
    1c2a:	9f 83       	std	Y+7, r25	; 0x07
    1c2c:	a8 87       	std	Y+8, r26	; 0x08
    1c2e:	b9 87       	std	Y+9, r27	; 0x09
	 * Find the lowest possible exponent.
	 */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	8f 5f       	subi	r24, 0xFF	; 255
    1c34:	89 83       	std	Y+1, r24	; 0x01
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	87 30       	cpi	r24, 0x07	; 7
    1c3a:	ac f2       	brlt	.-86     	; 0x1be6 <usart_set_baudrate+0x14a>
    1c3c:	01 c0       	rjmp	.+2      	; 0x1c40 <usart_set_baudrate+0x1a4>
		if (ratio < limit) {
			break;
    1c3e:	00 00       	nop
	 * operation as it ensures that we never exceeed 2**32 at any point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	88 23       	and	r24, r24
    1c44:	0c f0       	brlt	.+2      	; 0x1c48 <usart_set_baudrate+0x1ac>
    1c46:	88 c0       	rjmp	.+272    	; 0x1d58 <usart_set_baudrate+0x2bc>
		/*
		 * We are supposed to subtract 1, then apply BSCALE. We want to apply
		 * BSCALE first, so we need to turn everything inside the parenthesis
		 * into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1c48:	88 8d       	ldd	r24, Y+24	; 0x18
    1c4a:	99 8d       	ldd	r25, Y+25	; 0x19
    1c4c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1c4e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1c50:	88 0f       	add	r24, r24
    1c52:	99 1f       	adc	r25, r25
    1c54:	aa 1f       	adc	r26, r26
    1c56:	bb 1f       	adc	r27, r27
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	aa 1f       	adc	r26, r26
    1c5e:	bb 1f       	adc	r27, r27
    1c60:	88 0f       	add	r24, r24
    1c62:	99 1f       	adc	r25, r25
    1c64:	aa 1f       	adc	r26, r26
    1c66:	bb 1f       	adc	r27, r27
    1c68:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1c6a:	3d 8d       	ldd	r19, Y+29	; 0x1d
    1c6c:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1c6e:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1c70:	79 01       	movw	r14, r18
    1c72:	8a 01       	movw	r16, r20
    1c74:	e8 1a       	sub	r14, r24
    1c76:	f9 0a       	sbc	r15, r25
    1c78:	0a 0b       	sbc	r16, r26
    1c7a:	1b 0b       	sbc	r17, r27
    1c7c:	d8 01       	movw	r26, r16
    1c7e:	c7 01       	movw	r24, r14
    1c80:	8c 8f       	std	Y+28, r24	; 0x1c
    1c82:	9d 8f       	std	Y+29, r25	; 0x1d
    1c84:	ae 8f       	std	Y+30, r26	; 0x1e
    1c86:	bf 8f       	std	Y+31, r27	; 0x1f
		 * If we end up with a left-shift after taking the final divide-by-8
		 * into account, do the shift before the divide. Otherwise, left-shift
		 * the denominator instead (effectively resulting in an overall right 
		 * shift.)
		 */
		if (exp <= -3) {
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	8e 3f       	cpi	r24, 0xFE	; 254
    1c8c:	84 f5       	brge	.+96     	; 0x1cee <usart_set_baudrate+0x252>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	99 27       	eor	r25, r25
    1c92:	87 fd       	sbrc	r24, 7
    1c94:	90 95       	com	r25
    1c96:	2d ef       	ldi	r18, 0xFD	; 253
    1c98:	3f ef       	ldi	r19, 0xFF	; 255
    1c9a:	28 1b       	sub	r18, r24
    1c9c:	39 0b       	sbc	r19, r25
    1c9e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ca0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ca2:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1ca4:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1ca6:	7c 01       	movw	r14, r24
    1ca8:	8d 01       	movw	r16, r26
    1caa:	04 c0       	rjmp	.+8      	; 0x1cb4 <usart_set_baudrate+0x218>
    1cac:	ee 0c       	add	r14, r14
    1cae:	ff 1c       	adc	r15, r15
    1cb0:	00 1f       	adc	r16, r16
    1cb2:	11 1f       	adc	r17, r17
    1cb4:	2a 95       	dec	r18
    1cb6:	d2 f7       	brpl	.-12     	; 0x1cac <usart_set_baudrate+0x210>
    1cb8:	a8 01       	movw	r20, r16
    1cba:	97 01       	movw	r18, r14
    1cbc:	88 8d       	ldd	r24, Y+24	; 0x18
    1cbe:	99 8d       	ldd	r25, Y+25	; 0x19
    1cc0:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1cc2:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1cc4:	b6 95       	lsr	r27
    1cc6:	a7 95       	ror	r26
    1cc8:	97 95       	ror	r25
    1cca:	87 95       	ror	r24
    1ccc:	82 0f       	add	r24, r18
    1cce:	93 1f       	adc	r25, r19
    1cd0:	a4 1f       	adc	r26, r20
    1cd2:	b5 1f       	adc	r27, r21
    1cd4:	28 8d       	ldd	r18, Y+24	; 0x18
    1cd6:	39 8d       	ldd	r19, Y+25	; 0x19
    1cd8:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1cda:	5b 8d       	ldd	r21, Y+27	; 0x1b
    1cdc:	bc 01       	movw	r22, r24
    1cde:	cd 01       	movw	r24, r26
    1ce0:	0e 94 a6 1b 	call	0x374c	; 0x374c <__udivmodsi4>
    1ce4:	2a 83       	std	Y+2, r18	; 0x02
    1ce6:	3b 83       	std	Y+3, r19	; 0x03
    1ce8:	4c 83       	std	Y+4, r20	; 0x04
    1cea:	5d 83       	std	Y+5, r21	; 0x05
    1cec:	6e c0       	rjmp	.+220    	; 0x1dca <usart_set_baudrate+0x32e>
		} else {
			baud <<= exp + 3;
    1cee:	89 81       	ldd	r24, Y+1	; 0x01
    1cf0:	99 27       	eor	r25, r25
    1cf2:	87 fd       	sbrc	r24, 7
    1cf4:	90 95       	com	r25
    1cf6:	9c 01       	movw	r18, r24
    1cf8:	2d 5f       	subi	r18, 0xFD	; 253
    1cfa:	3f 4f       	sbci	r19, 0xFF	; 255
    1cfc:	88 8d       	ldd	r24, Y+24	; 0x18
    1cfe:	99 8d       	ldd	r25, Y+25	; 0x19
    1d00:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1d02:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1d04:	04 c0       	rjmp	.+8      	; 0x1d0e <usart_set_baudrate+0x272>
    1d06:	88 0f       	add	r24, r24
    1d08:	99 1f       	adc	r25, r25
    1d0a:	aa 1f       	adc	r26, r26
    1d0c:	bb 1f       	adc	r27, r27
    1d0e:	2a 95       	dec	r18
    1d10:	d2 f7       	brpl	.-12     	; 0x1d06 <usart_set_baudrate+0x26a>
    1d12:	88 8f       	std	Y+24, r24	; 0x18
    1d14:	99 8f       	std	Y+25, r25	; 0x19
    1d16:	aa 8f       	std	Y+26, r26	; 0x1a
    1d18:	bb 8f       	std	Y+27, r27	; 0x1b
			div = (cpu_hz + baud / 2) / baud;
    1d1a:	88 8d       	ldd	r24, Y+24	; 0x18
    1d1c:	99 8d       	ldd	r25, Y+25	; 0x19
    1d1e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1d20:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1d22:	9c 01       	movw	r18, r24
    1d24:	ad 01       	movw	r20, r26
    1d26:	56 95       	lsr	r21
    1d28:	47 95       	ror	r20
    1d2a:	37 95       	ror	r19
    1d2c:	27 95       	ror	r18
    1d2e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d30:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d32:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1d34:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1d36:	82 0f       	add	r24, r18
    1d38:	93 1f       	adc	r25, r19
    1d3a:	a4 1f       	adc	r26, r20
    1d3c:	b5 1f       	adc	r27, r21
    1d3e:	28 8d       	ldd	r18, Y+24	; 0x18
    1d40:	39 8d       	ldd	r19, Y+25	; 0x19
    1d42:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1d44:	5b 8d       	ldd	r21, Y+27	; 0x1b
    1d46:	bc 01       	movw	r22, r24
    1d48:	cd 01       	movw	r24, r26
    1d4a:	0e 94 a6 1b 	call	0x374c	; 0x374c <__udivmodsi4>
    1d4e:	2a 83       	std	Y+2, r18	; 0x02
    1d50:	3b 83       	std	Y+3, r19	; 0x03
    1d52:	4c 83       	std	Y+4, r20	; 0x04
    1d54:	5d 83       	std	Y+5, r21	; 0x05
    1d56:	39 c0       	rjmp	.+114    	; 0x1dca <usart_set_baudrate+0x32e>
	} else {
		/*
		 * We will always do a right shift in this case, but we need to shift
		 * three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
    1d5a:	99 27       	eor	r25, r25
    1d5c:	87 fd       	sbrc	r24, 7
    1d5e:	90 95       	com	r25
    1d60:	9c 01       	movw	r18, r24
    1d62:	2d 5f       	subi	r18, 0xFD	; 253
    1d64:	3f 4f       	sbci	r19, 0xFF	; 255
    1d66:	88 8d       	ldd	r24, Y+24	; 0x18
    1d68:	99 8d       	ldd	r25, Y+25	; 0x19
    1d6a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1d6c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1d6e:	04 c0       	rjmp	.+8      	; 0x1d78 <usart_set_baudrate+0x2dc>
    1d70:	88 0f       	add	r24, r24
    1d72:	99 1f       	adc	r25, r25
    1d74:	aa 1f       	adc	r26, r26
    1d76:	bb 1f       	adc	r27, r27
    1d78:	2a 95       	dec	r18
    1d7a:	d2 f7       	brpl	.-12     	; 0x1d70 <usart_set_baudrate+0x2d4>
    1d7c:	88 8f       	std	Y+24, r24	; 0x18
    1d7e:	99 8f       	std	Y+25, r25	; 0x19
    1d80:	aa 8f       	std	Y+26, r26	; 0x1a
    1d82:	bb 8f       	std	Y+27, r27	; 0x1b
		div = (cpu_hz + baud / 2) / baud - 1;
    1d84:	88 8d       	ldd	r24, Y+24	; 0x18
    1d86:	99 8d       	ldd	r25, Y+25	; 0x19
    1d88:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1d8a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1d8c:	9c 01       	movw	r18, r24
    1d8e:	ad 01       	movw	r20, r26
    1d90:	56 95       	lsr	r21
    1d92:	47 95       	ror	r20
    1d94:	37 95       	ror	r19
    1d96:	27 95       	ror	r18
    1d98:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d9a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d9c:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1d9e:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1da0:	82 0f       	add	r24, r18
    1da2:	93 1f       	adc	r25, r19
    1da4:	a4 1f       	adc	r26, r20
    1da6:	b5 1f       	adc	r27, r21
    1da8:	28 8d       	ldd	r18, Y+24	; 0x18
    1daa:	39 8d       	ldd	r19, Y+25	; 0x19
    1dac:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1dae:	5b 8d       	ldd	r21, Y+27	; 0x1b
    1db0:	bc 01       	movw	r22, r24
    1db2:	cd 01       	movw	r24, r26
    1db4:	0e 94 a6 1b 	call	0x374c	; 0x374c <__udivmodsi4>
    1db8:	da 01       	movw	r26, r20
    1dba:	c9 01       	movw	r24, r18
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	a1 09       	sbc	r26, r1
    1dc0:	b1 09       	sbc	r27, r1
    1dc2:	8a 83       	std	Y+2, r24	; 0x02
    1dc4:	9b 83       	std	Y+3, r25	; 0x03
    1dc6:	ac 83       	std	Y+4, r26	; 0x04
    1dc8:	bd 83       	std	Y+5, r27	; 0x05
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dce:	ac 81       	ldd	r26, Y+4	; 0x04
    1dd0:	bd 81       	ldd	r27, Y+5	; 0x05
    1dd2:	89 2f       	mov	r24, r25
    1dd4:	9a 2f       	mov	r25, r26
    1dd6:	ab 2f       	mov	r26, r27
    1dd8:	bb 27       	eor	r27, r27
    1dda:	98 2f       	mov	r25, r24
    1ddc:	9f 70       	andi	r25, 0x0F	; 15
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	82 95       	swap	r24
    1de2:	80 7f       	andi	r24, 0xF0	; 240
    1de4:	29 2f       	mov	r18, r25
    1de6:	28 2b       	or	r18, r24
    1de8:	8e 89       	ldd	r24, Y+22	; 0x16
    1dea:	9f 89       	ldd	r25, Y+23	; 0x17
    1dec:	fc 01       	movw	r30, r24
    1dee:	27 83       	std	Z+7, r18	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1df0:	2a 81       	ldd	r18, Y+2	; 0x02
    1df2:	8e 89       	ldd	r24, Y+22	; 0x16
    1df4:	9f 89       	ldd	r25, Y+23	; 0x17
    1df6:	fc 01       	movw	r30, r24
    1df8:	26 83       	std	Z+6, r18	; 0x06

	return true;
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
}
    1dfc:	6f 96       	adiw	r28, 0x1f	; 31
    1dfe:	cd bf       	out	0x3d, r28	; 61
    1e00:	de bf       	out	0x3e, r29	; 62
    1e02:	cf 91       	pop	r28
    1e04:	df 91       	pop	r29
    1e06:	1f 91       	pop	r17
    1e08:	0f 91       	pop	r16
    1e0a:	ff 90       	pop	r15
    1e0c:	ef 90       	pop	r14
    1e0e:	08 95       	ret

00001e10 <getOutOfProgMem>:
#include <stdio.h>



uint8_t getOutOfProgMem(uint8_t *buffer, PROGMEM_STRING_T str)
{
    1e10:	cf 93       	push	r28
    1e12:	df 93       	push	r29
    1e14:	dc 01       	movw	r26, r24
    1e16:	fb 01       	movw	r30, r22
	char holderChar;
	uint8_t cnt = 0;
	//this gets the command out of program memory and puts it in RAM
	holderChar = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)str);
    1e18:	26 2f       	mov	r18, r22
    1e1a:	94 91       	lpm	r25, Z+
	//repeat through the string until we hit a zero
	while(holderChar)
    1e1c:	99 23       	and	r25, r25
    1e1e:	51 f0       	breq	.+20     	; 0x1e34 <getOutOfProgMem+0x24>
    1e20:	ed 01       	movw	r28, r26
	{
		*buffer++ = holderChar;
    1e22:	99 93       	st	Y+, r25
    1e24:	de 01       	movw	r26, r28
		str++;
    1e26:	31 96       	adiw	r30, 0x01	; 1
    1e28:	8e 2f       	mov	r24, r30
    1e2a:	82 1b       	sub	r24, r18
		cnt++;
		holderChar = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)str);
    1e2c:	94 91       	lpm	r25, Z+
	char holderChar;
	uint8_t cnt = 0;
	//this gets the command out of program memory and puts it in RAM
	holderChar = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)str);
	//repeat through the string until we hit a zero
	while(holderChar)
    1e2e:	99 23       	and	r25, r25
    1e30:	c1 f7       	brne	.-16     	; 0x1e22 <getOutOfProgMem+0x12>
    1e32:	01 c0       	rjmp	.+2      	; 0x1e36 <getOutOfProgMem+0x26>


uint8_t getOutOfProgMem(uint8_t *buffer, PROGMEM_STRING_T str)
{
	char holderChar;
	uint8_t cnt = 0;
    1e34:	80 e0       	ldi	r24, 0x00	; 0
		*buffer++ = holderChar;
		str++;
		cnt++;
		holderChar = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)str);
	}
	*buffer = '\0';
    1e36:	1c 92       	st	X, r1
	return cnt;
}
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	08 95       	ret

00001e3e <matchString>:

void matchString(uint8_t *msg)
{
    1e3e:	8f 92       	push	r8
    1e40:	9f 92       	push	r9
    1e42:	af 92       	push	r10
    1e44:	bf 92       	push	r11
    1e46:	cf 92       	push	r12
    1e48:	df 92       	push	r13
    1e4a:	ef 92       	push	r14
    1e4c:	ff 92       	push	r15
    1e4e:	0f 93       	push	r16
    1e50:	1f 93       	push	r17
    1e52:	df 93       	push	r29
    1e54:	cf 93       	push	r28
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
    1e5a:	a8 97       	sbiw	r28, 0x28	; 40
    1e5c:	cd bf       	out	0x3d, r28	; 61
    1e5e:	de bf       	out	0x3e, r29	; 62
    1e60:	5c 01       	movw	r10, r24
    1e62:	03 e4       	ldi	r16, 0x43	; 67
    1e64:	11 e2       	ldi	r17, 0x21	; 33
    1e66:	0f 2e       	mov	r0, r31
    1e68:	fd e4       	ldi	r31, 0x4D	; 77
    1e6a:	cf 2e       	mov	r12, r31
    1e6c:	f1 e2       	ldi	r31, 0x21	; 33
    1e6e:	df 2e       	mov	r13, r31
    1e70:	f0 2d       	mov	r31, r0
	}
	*buffer = '\0';
	return cnt;
}

void matchString(uint8_t *msg)
    1e72:	0f 2e       	mov	r0, r31
    1e74:	fa e0       	ldi	r31, 0x0A	; 10
    1e76:	8f 2e       	mov	r8, r31
    1e78:	99 24       	eor	r9, r9
    1e7a:	f0 2d       	mov	r31, r0
    1e7c:	80 0e       	add	r8, r16
    1e7e:	91 1e       	adc	r9, r17
	
	//Go through all the options available and look for a match
	for(uint8_t x=0; x<size; x++)
	{
		match = false;
		cnt = getOutOfProgMem(strHolder, commands[x]);
    1e80:	7e 01       	movw	r14, r28
    1e82:	08 94       	sec
    1e84:	e1 1c       	adc	r14, r1
    1e86:	f1 1c       	adc	r15, r1
    1e88:	d8 01       	movw	r26, r16
    1e8a:	6d 91       	ld	r22, X+
    1e8c:	7d 91       	ld	r23, X+
    1e8e:	8d 01       	movw	r16, r26
    1e90:	c7 01       	movw	r24, r14
    1e92:	be df       	rcall	.-132    	; 0x1e10 <getOutOfProgMem>
    1e94:	48 2f       	mov	r20, r24


		// compare if the two strings are the same 0 is returned by memcmp
		match = memcmp(msg, strHolder, cnt); 
    1e96:	c5 01       	movw	r24, r10
    1e98:	b7 01       	movw	r22, r14
    1e9a:	50 e0       	ldi	r21, 0x00	; 0
    1e9c:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <memcmp>
    1ea0:	28 2f       	mov	r18, r24
    1ea2:	39 2f       	mov	r19, r25

		//execute the callback for the matched string
		if(!match)
    1ea4:	21 15       	cp	r18, r1
    1ea6:	31 05       	cpc	r19, r1
    1ea8:	89 f4       	brne	.+34     	; 0x1ecc <matchString+0x8e>
		{
			msg += (strlen(strHolder) + 1);	
    1eaa:	f7 01       	movw	r30, r14
    1eac:	01 90       	ld	r0, Z+
    1eae:	00 20       	and	r0, r0
    1eb0:	e9 f7       	brne	.-6      	; 0x1eac <matchString+0x6e>
    1eb2:	cf 01       	movw	r24, r30
    1eb4:	8e 19       	sub	r24, r14
    1eb6:	9f 09       	sbc	r25, r15
    1eb8:	a8 0e       	add	r10, r24
    1eba:	b9 1e       	adc	r11, r25
			status = transmit_OK;
			if(cmdCallBacks[x])
    1ebc:	d6 01       	movw	r26, r12
    1ebe:	ed 91       	ld	r30, X+
    1ec0:	fc 91       	ld	r31, X
    1ec2:	11 97       	sbiw	r26, 0x01	; 1
    1ec4:	30 97       	sbiw	r30, 0x00	; 0
    1ec6:	11 f0       	breq	.+4      	; 0x1ecc <matchString+0x8e>
			{
				(cmdCallBacks[x])(msg);
    1ec8:	c5 01       	movw	r24, r10
    1eca:	19 95       	eicall
    1ecc:	e2 e0       	ldi	r30, 0x02	; 2
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	ce 0e       	add	r12, r30
    1ed2:	df 1e       	adc	r13, r31
	uint8_t cnt;
	uint8_t size = 5; //sizeof(*cmdCallBacks) / sizeof(messageCB_t);
	
	
	//Go through all the options available and look for a match
	for(uint8_t x=0; x<size; x++)
    1ed4:	08 15       	cp	r16, r8
    1ed6:	19 05       	cpc	r17, r9
    1ed8:	b9 f6       	brne	.-82     	; 0x1e88 <matchString+0x4a>
			}				
		}
		
	}
	//Go through all keywords and execute keywords
}
    1eda:	a8 96       	adiw	r28, 0x28	; 40
    1edc:	cd bf       	out	0x3d, r28	; 61
    1ede:	de bf       	out	0x3e, r29	; 62
    1ee0:	cf 91       	pop	r28
    1ee2:	df 91       	pop	r29
    1ee4:	1f 91       	pop	r17
    1ee6:	0f 91       	pop	r16
    1ee8:	ff 90       	pop	r15
    1eea:	ef 90       	pop	r14
    1eec:	df 90       	pop	r13
    1eee:	cf 90       	pop	r12
    1ef0:	bf 90       	pop	r11
    1ef2:	af 90       	pop	r10
    1ef4:	9f 90       	pop	r9
    1ef6:	8f 90       	pop	r8
    1ef8:	08 95       	ret

00001efa <main>:

void tempSerial_init(void);


int main (void)
{
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	00 d0       	rcall	.+0      	; 0x1f00 <main+0x6>
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
	sysclk_init();
    1f04:	0e 94 35 02 	call	0x46a	; 0x46a <sysclk_init>
	
	board_init();
    1f08:	0e 94 79 02 	call	0x4f2	; 0x4f2 <board_init>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    1f0c:	e0 ea       	ldi	r30, 0xA0	; 160
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	87 e0       	ldi	r24, 0x07	; 7
    1f12:	82 83       	std	Z+2, r24	; 0x02
	pmic_init();
	sei();
    1f14:	78 94       	sei
 */
static inline void pmic_enable_level(enum pmic_level level)
{
	Assert((level & PMIC_LVL_NMI));

	PMIC.CTRL |= level;
    1f16:	82 81       	ldd	r24, Z+2	; 0x02
    1f18:	81 60       	ori	r24, 0x01	; 1
    1f1a:	82 83       	std	Z+2, r24	; 0x02
	pmic_enable_level(PMIC_LVL_LOW);
	
	usart_openPort(&usart_somfyDevice);
    1f1c:	8d e8       	ldi	r24, 0x8D	; 141
    1f1e:	91 e2       	ldi	r25, 0x21	; 33
    1f20:	b5 d1       	rcall	.+874    	; 0x228c <usart_openPort>
	usart_openPort(&usart_somfyDebug);
    1f22:	83 eb       	ldi	r24, 0xB3	; 179
    1f24:	91 e2       	ldi	r25, 0x21	; 33
    1f26:	b2 d1       	rcall	.+868    	; 0x228c <usart_openPort>
	usart_openPort(&usart_PCinter);
    1f28:	87 e5       	ldi	r24, 0x57	; 87
    1f2a:	91 e2       	ldi	r25, 0x21	; 33
    1f2c:	af d1       	rcall	.+862    	; 0x228c <usart_openPort>
	usart_openPort(&usart_temp);
    1f2e:	89 ed       	ldi	r24, 0xD9	; 217
    1f30:	91 e2       	ldi	r25, 0x21	; 33
    1f32:	ac d1       	rcall	.+856    	; 0x228c <usart_openPort>

	somfyMotor_defaults_init();
    1f34:	0e 94 a2 18 	call	0x3144	; 0x3144 <somfyMotor_defaults_init>
	somfyAddr_t dest = {0x06, 0x0f, 0x0d};
    1f38:	de 01       	movw	r26, r28
    1f3a:	11 96       	adiw	r26, 0x01	; 1
    1f3c:	ef ef       	ldi	r30, 0xFF	; 255
    1f3e:	f1 e2       	ldi	r31, 0x21	; 33
    1f40:	83 e0       	ldi	r24, 0x03	; 3
    1f42:	01 90       	ld	r0, Z+
    1f44:	0d 92       	st	X+, r0
    1f46:	81 50       	subi	r24, 0x01	; 1
    1f48:	e1 f7       	brne	.-8      	; 0x1f42 <main+0x48>
//	somfy_control_wink(dest);
	somfy_reqMotorPos(dest);
    1f4a:	69 81       	ldd	r22, Y+1	; 0x01
    1f4c:	7a 81       	ldd	r23, Y+2	; 0x02
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	0e 94 00 19 	call	0x3200	; 0x3200 <somfy_reqMotorPos>
	// usart run loop start
	return usart_task();
    1f54:	a3 d0       	rcall	.+326    	; 0x209c <usart_task>
	
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	23 96       	adiw	r28, 0x03	; 3
    1f5a:	cd bf       	out	0x3d, r28	; 61
    1f5c:	de bf       	out	0x3e, r29	; 62
    1f5e:	cf 91       	pop	r28
    1f60:	df 91       	pop	r29
    1f62:	08 95       	ret

00001f64 <usart_getSizeofData>:

size_t usart_getSizeofData(usartDescriptor_t *desc, Bool getTx)
{
	size_t bufferLen;
	
	if(!desc){return 0;}
    1f64:	00 97       	sbiw	r24, 0x00	; 0
    1f66:	19 f4       	brne	.+6      	; 0x1f6e <usart_getSizeofData+0xa>
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	08 95       	ret
		if(bufferLen >= desc->rxDataSize || bufferLen == 0)
		{
			bufferLen += desc->rxDataSize;
		}
	}	
}
    1f6e:	08 95       	ret

00001f70 <usart_readBytes>:

	return len;
}

uint8_t *usart_readBytes(usartDescriptor_t *desc, uint8_t cnt)
{
    1f70:	cf 92       	push	r12
    1f72:	df 92       	push	r13
    1f74:	ff 92       	push	r15
    1f76:	0f 93       	push	r16
    1f78:	1f 93       	push	r17
    1f7a:	cf 93       	push	r28
    1f7c:	df 93       	push	r29
    1f7e:	8c 01       	movw	r16, r24
    1f80:	f6 2e       	mov	r15, r22
	uint8_t *oldPoR = desc->rxPoR;
    1f82:	fc 01       	movw	r30, r24
    1f84:	c0 a0       	ldd	r12, Z+32	; 0x20
    1f86:	d1 a0       	ldd	r13, Z+33	; 0x21
	if((cnt > (usart_getSizeofData(desc, false)) || cnt == 0))
    1f88:	c6 2f       	mov	r28, r22
    1f8a:	d0 e0       	ldi	r29, 0x00	; 0
    1f8c:	60 e0       	ldi	r22, 0x00	; 0
    1f8e:	ea df       	rcall	.-44     	; 0x1f64 <usart_getSizeofData>
    1f90:	8c 17       	cp	r24, r28
    1f92:	9d 07       	cpc	r25, r29
    1f94:	10 f0       	brcs	.+4      	; 0x1f9a <usart_readBytes+0x2a>
    1f96:	ff 20       	and	r15, r15
    1f98:	31 f4       	brne	.+12     	; 0x1fa6 <usart_readBytes+0x36>
	{
		desc->rxPoR = desc->rxPoW;
    1f9a:	f8 01       	movw	r30, r16
    1f9c:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f9e:	97 8d       	ldd	r25, Z+31	; 0x1f
    1fa0:	80 a3       	std	Z+32, r24	; 0x20
    1fa2:	91 a3       	std	Z+33, r25	; 0x21
    1fa4:	05 c0       	rjmp	.+10     	; 0x1fb0 <usart_readBytes+0x40>
	}
	else
	{
		desc->rxPoR += cnt;
    1fa6:	cc 0d       	add	r28, r12
    1fa8:	dd 1d       	adc	r29, r13
    1faa:	f8 01       	movw	r30, r16
    1fac:	c0 a3       	std	Z+32, r28	; 0x20
    1fae:	d1 a3       	std	Z+33, r29	; 0x21
	}
	return oldPoR;
}
    1fb0:	8c 2d       	mov	r24, r12
    1fb2:	9d 2d       	mov	r25, r13
    1fb4:	df 91       	pop	r29
    1fb6:	cf 91       	pop	r28
    1fb8:	1f 91       	pop	r17
    1fba:	0f 91       	pop	r16
    1fbc:	ff 90       	pop	r15
    1fbe:	df 90       	pop	r13
    1fc0:	cf 90       	pop	r12
    1fc2:	08 95       	ret

00001fc4 <usart_terminateRxWithNull>:
*
*
##########################################################################
*/
void usart_terminateRxWithNull(usartDescriptor_t *desc)
{
    1fc4:	dc 01       	movw	r26, r24
	*desc->rxPoW++ = '\0';
    1fc6:	5e 96       	adiw	r26, 0x1e	; 30
    1fc8:	ed 91       	ld	r30, X+
    1fca:	fc 91       	ld	r31, X
    1fcc:	5f 97       	sbiw	r26, 0x1f	; 31
    1fce:	11 92       	st	Z+, r1
    1fd0:	5e 96       	adiw	r26, 0x1e	; 30
    1fd2:	ed 93       	st	X+, r30
    1fd4:	fc 93       	st	X, r31
    1fd6:	5f 97       	sbiw	r26, 0x1f	; 31
}
    1fd8:	08 95       	ret

00001fda <usart_getPort>:
*
##########################################################################
*/
usart_info_t *usart_getPort(uint16_t chan)
{
	switch( chan )
    1fda:	28 e0       	ldi	r18, 0x08	; 8
    1fdc:	80 3b       	cpi	r24, 0xB0	; 176
    1fde:	92 07       	cpc	r25, r18
    1fe0:	f1 f0       	breq	.+60     	; 0x201e <usart_getPort+0x44>
    1fe2:	28 e0       	ldi	r18, 0x08	; 8
    1fe4:	81 3b       	cpi	r24, 0xB1	; 177
    1fe6:	92 07       	cpc	r25, r18
    1fe8:	28 f4       	brcc	.+10     	; 0x1ff4 <usart_getPort+0x1a>
    1fea:	28 e0       	ldi	r18, 0x08	; 8
    1fec:	80 3a       	cpi	r24, 0xA0	; 160
    1fee:	92 07       	cpc	r25, r18
    1ff0:	99 f4       	brne	.+38     	; 0x2018 <usart_getPort+0x3e>
    1ff2:	09 c0       	rjmp	.+18     	; 0x2006 <usart_getPort+0x2c>
    1ff4:	29 e0       	ldi	r18, 0x09	; 9
    1ff6:	80 3a       	cpi	r24, 0xA0	; 160
    1ff8:	92 07       	cpc	r25, r18
    1ffa:	41 f0       	breq	.+16     	; 0x200c <usart_getPort+0x32>
    1ffc:	29 e0       	ldi	r18, 0x09	; 9
    1ffe:	80 3b       	cpi	r24, 0xB0	; 176
    2000:	92 07       	cpc	r25, r18
    2002:	51 f4       	brne	.+20     	; 0x2018 <usart_getPort+0x3e>
    2004:	06 c0       	rjmp	.+12     	; 0x2012 <usart_getPort+0x38>
	{
#ifdef CONF_BOARD_ENABLE_USARTC0
		case( USART_CHANNEL_USARTC0 ):
			return(&CHANNEL_USARTC0);
    2006:	23 e3       	ldi	r18, 0x33	; 51
    2008:	31 e2       	ldi	r19, 0x21	; 33
    200a:	0b c0       	rjmp	.+22     	; 0x2022 <usart_getPort+0x48>
			return(&CHANNEL_USARTC1);
		break;
#endif
#ifdef CONF_BOARD_ENABLE_USARTD0
		case( USART_CHANNEL_USARTD0 ):
			return(&CHANNEL_USARTD0);
    200c:	2b e3       	ldi	r18, 0x3B	; 59
    200e:	31 e2       	ldi	r19, 0x21	; 33
    2010:	08 c0       	rjmp	.+16     	; 0x2022 <usart_getPort+0x48>
		break;
#endif
#ifdef CONF_BOARD_ENABLE_USARTD1
		case ( USART_CHANNEL_USARTD1 ):
			return(&CHANNEL_USARTD1);
    2012:	2f e3       	ldi	r18, 0x3F	; 63
    2014:	31 e2       	ldi	r19, 0x21	; 33
    2016:	05 c0       	rjmp	.+10     	; 0x2022 <usart_getPort+0x48>
		case ( USART_CHANNEL_USARTF1 ):
			return( &CHANNEL_USARTF1 );
		break;
#endif
		default:
		return NULL;
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	02 c0       	rjmp	.+4      	; 0x2022 <usart_getPort+0x48>
			return(&CHANNEL_USARTC0);
		break;
#endif
#ifdef CONF_BOARD_ENABLE_USARTC1
		case ( USART_CHANNEL_USARTC1 ):
			return(&CHANNEL_USARTC1);
    201e:	27 e3       	ldi	r18, 0x37	; 55
    2020:	31 e2       	ldi	r19, 0x21	; 33
		break;
#endif
		default:
		return NULL;
	}		
}
    2022:	82 2f       	mov	r24, r18
    2024:	93 2f       	mov	r25, r19
    2026:	08 95       	ret

00002028 <usart_print>:
*
*
##########################################################################
*/
void usart_print(usartDescriptor_t *desc)
{
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29
    202c:	ec 01       	movw	r28, r24
	if(!desc)
    202e:	00 97       	sbiw	r24, 0x00	; 0
    2030:	91 f1       	breq	.+100    	; 0x2096 <usart_print+0x6e>
	return;
	
	USART_t *port;
	
	
	if(desc->txPoR != desc->txPoW)
    2032:	2e 89       	ldd	r18, Y+22	; 0x16
    2034:	3f 89       	ldd	r19, Y+23	; 0x17
    2036:	8c 89       	ldd	r24, Y+20	; 0x14
    2038:	9d 89       	ldd	r25, Y+21	; 0x15
    203a:	28 17       	cp	r18, r24
    203c:	39 07       	cpc	r19, r25
    203e:	59 f1       	breq	.+86     	; 0x2096 <usart_print+0x6e>
	{
		//hold the interrupt so we don't get in a case where we say we active when we are not
		cli();
    2040:	f8 94       	cli
		port = ((usart_info_t *)usart_getPort(desc->channel))->port;
    2042:	88 81       	ld	r24, Y
    2044:	99 81       	ldd	r25, Y+1	; 0x01
    2046:	c9 df       	rcall	.-110    	; 0x1fda <usart_getPort>
    2048:	fc 01       	movw	r30, r24
    204a:	80 81       	ld	r24, Z
    204c:	91 81       	ldd	r25, Z+1	; 0x01
		
		desc->txState = TX_ACTIVE;
    204e:	21 e0       	ldi	r18, 0x01	; 1
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	2a 8f       	std	Y+26, r18	; 0x1a
    2054:	3b 8f       	std	Y+27, r19	; 0x1b
		
		if(desc->RS485portPin)
    2056:	2b 85       	ldd	r18, Y+11	; 0x0b
    2058:	22 23       	and	r18, r18
    205a:	c1 f0       	breq	.+48     	; 0x208c <usart_print+0x64>
 * \return Pointer to the port on which the pin is located.
 */
static inline PORT_t *ioport_pin_to_port(port_pin_t pin)
{
	// Each port has an offset of 0x20
	return (PORT_t *)((uintptr_t)&PORTA + (pin >> 3) * 0x20);
    205c:	e2 2f       	mov	r30, r18
    205e:	e6 95       	lsr	r30
    2060:	e6 95       	lsr	r30
    2062:	e6 95       	lsr	r30
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	f0 96       	adiw	r30, 0x30	; 48
    2068:	ee 0f       	add	r30, r30
    206a:	ff 1f       	adc	r31, r31
    206c:	e2 95       	swap	r30
    206e:	f2 95       	swap	r31
    2070:	f0 7f       	andi	r31, 0xF0	; 240
    2072:	fe 27       	eor	r31, r30
    2074:	e0 7f       	andi	r30, 0xF0	; 240
    2076:	fe 27       	eor	r31, r30
 * \param pin PORT pin number.
 * \return Pin mask.
 */
static inline pin_mask_t ioport_pin_to_mask(port_pin_t pin)
{
	return 1U << (pin & 0x7);
    2078:	27 70       	andi	r18, 0x07	; 7
    207a:	41 e0       	ldi	r20, 0x01	; 1
    207c:	50 e0       	ldi	r21, 0x00	; 0
    207e:	ba 01       	movw	r22, r20
    2080:	02 c0       	rjmp	.+4      	; 0x2086 <usart_print+0x5e>
    2082:	66 0f       	add	r22, r22
    2084:	77 1f       	adc	r23, r23
    2086:	2a 95       	dec	r18
    2088:	e2 f7       	brpl	.-8      	; 0x2082 <usart_print+0x5a>
 * \param pin A number identifying the pin to act on.
 */
static inline void ioport_set_pin_high(port_pin_t pin)
{
	PORT_t *port = ioport_pin_to_port(pin);
	port->OUTSET=ioport_pin_to_mask(pin);
    208a:	65 83       	std	Z+5, r22	; 0x05
			ioport_set_pin_high(desc->RS485portPin);
		}
		
		
		//Send the Char
		usart_putchar(port, *desc->txPoR);
    208c:	ee 89       	ldd	r30, Y+22	; 0x16
    208e:	ff 89       	ldd	r31, Y+23	; 0x17
    2090:	60 81       	ld	r22, Z
    2092:	cc dc       	rcall	.-1640   	; 0x1a2c <usart_putchar>
		
	
		//startup interrupts again
		sei();
    2094:	78 94       	sei
	}
}
    2096:	df 91       	pop	r29
    2098:	cf 91       	pop	r28
    209a:	08 95       	ret

0000209c <usart_task>:
*
*
##########################################################################
*/
uint8_t usart_task(void)
{
    209c:	1f 93       	push	r17
    209e:	cf 93       	push	r28
    20a0:	df 93       	push	r29
	usartDescriptor_t *currentDesc;
	do 
	{
	
		for(uint8_t x = 0; x < NUM_OF_USART_CHANNELS; x++)
    20a2:	10 e0       	ldi	r17, 0x00	; 0
		{
			currentDesc = usartDescirptors[x];
    20a4:	c0 e6       	ldi	r28, 0x60	; 96
    20a6:	d2 e2       	ldi	r29, 0x22	; 34
    20a8:	e1 2f       	mov	r30, r17
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	ee 0f       	add	r30, r30
    20ae:	ff 1f       	adc	r31, r31
    20b0:	ec 0f       	add	r30, r28
    20b2:	fd 1f       	adc	r31, r29
    20b4:	01 90       	ld	r0, Z+
    20b6:	f0 81       	ld	r31, Z
    20b8:	e0 2d       	mov	r30, r0
			//Check for open ports
			if( currentDesc != NULL )
    20ba:	30 97       	sbiw	r30, 0x00	; 0
    20bc:	69 f0       	breq	.+26     	; 0x20d8 <usart_task+0x3c>
			{
				if (currentDesc->txPoW != currentDesc->txPoR)
    20be:	24 89       	ldd	r18, Z+20	; 0x14
    20c0:	35 89       	ldd	r19, Z+21	; 0x15
    20c2:	86 89       	ldd	r24, Z+22	; 0x16
    20c4:	97 89       	ldd	r25, Z+23	; 0x17
    20c6:	28 17       	cp	r18, r24
    20c8:	39 07       	cpc	r19, r25
    20ca:	31 f0       	breq	.+12     	; 0x20d8 <usart_task+0x3c>
				{
					if( currentDesc->txState == TX_IDLE)	
    20cc:	82 8d       	ldd	r24, Z+26	; 0x1a
    20ce:	93 8d       	ldd	r25, Z+27	; 0x1b
    20d0:	00 97       	sbiw	r24, 0x00	; 0
    20d2:	11 f4       	brne	.+4      	; 0x20d8 <usart_task+0x3c>
					{
						usart_print(currentDesc);
    20d4:	cf 01       	movw	r24, r30
    20d6:	a8 df       	rcall	.-176    	; 0x2028 <usart_print>
{
	usartDescriptor_t *currentDesc;
	do 
	{
	
		for(uint8_t x = 0; x < NUM_OF_USART_CHANNELS; x++)
    20d8:	1f 5f       	subi	r17, 0xFF	; 255
    20da:	14 30       	cpi	r17, 0x04	; 4
    20dc:	28 f3       	brcs	.-54     	; 0x20a8 <usart_task+0xc>
    20de:	10 e0       	ldi	r17, 0x00	; 0
    20e0:	e3 cf       	rjmp	.-58     	; 0x20a8 <usart_task+0xc>

000020e2 <usart_isPortOpen>:
*
##########################################################################
*/
uint8_t usart_isPortOpen(usartDescriptor_t *desc)
{
	usart_info_t *info = usart_getPort(desc->channel);
    20e2:	dc 01       	movw	r26, r24
    20e4:	8d 91       	ld	r24, X+
    20e6:	9c 91       	ld	r25, X
    20e8:	78 df       	rcall	.-272    	; 0x1fda <usart_getPort>

	//Validate the channel exists
	if(!info){return 0;}
    20ea:	00 97       	sbiw	r24, 0x00	; 0
    20ec:	89 f0       	breq	.+34     	; 0x2110 <usart_isPortOpen+0x2e>
	//Validate that channel is open
	if(!(usartDescirptors[info->indx])){return 0;}
    20ee:	dc 01       	movw	r26, r24
    20f0:	12 96       	adiw	r26, 0x02	; 2
    20f2:	ed 91       	ld	r30, X+
    20f4:	fc 91       	ld	r31, X
    20f6:	13 97       	sbiw	r26, 0x03	; 3
    20f8:	ee 0f       	add	r30, r30
    20fa:	ff 1f       	adc	r31, r31
    20fc:	e0 5a       	subi	r30, 0xA0	; 160
    20fe:	fd 4d       	sbci	r31, 0xDD	; 221
uint8_t usart_isPortOpen(usartDescriptor_t *desc)
{
	usart_info_t *info = usart_getPort(desc->channel);

	//Validate the channel exists
	if(!info){return 0;}
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	20 81       	ld	r18, Z
    2104:	31 81       	ldd	r19, Z+1	; 0x01
    2106:	21 15       	cp	r18, r1
    2108:	31 05       	cpc	r19, r1
    210a:	19 f4       	brne	.+6      	; 0x2112 <usart_isPortOpen+0x30>
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	08 95       	ret
    2110:	80 e0       	ldi	r24, 0x00	; 0
	//Validate that channel is open
	if(!(usartDescirptors[info->indx])){return 0;}
		
	return 1;
}
    2112:	08 95       	ret

00002114 <usart_writeByteArray>:
		desc->txPoW = desc->txBuffer;
	}
}

size_t usart_writeByteArray(usartDescriptor_t *desc, uint8_t *str, size_t len)
{
    2114:	cf 92       	push	r12
    2116:	df 92       	push	r13
    2118:	ef 92       	push	r14
    211a:	ff 92       	push	r15
    211c:	0f 93       	push	r16
    211e:	1f 93       	push	r17
    2120:	cf 93       	push	r28
    2122:	df 93       	push	r29
    2124:	ec 01       	movw	r28, r24
    2126:	7b 01       	movw	r14, r22
    2128:	8a 01       	movw	r16, r20
	size_t sizeOfString, bufferLen, sizeToEdge;
	
	if(!usart_isPortOpen(desc)){return 0;}
    212a:	db df       	rcall	.-74     	; 0x20e2 <usart_isPortOpen>
    212c:	88 23       	and	r24, r24
    212e:	b1 f1       	breq	.+108    	; 0x219c <usart_writeByteArray+0x88>
	
	//get the overall size of the string in question
	sizeOfString = len;
	
	bufferLen = usart_getSizeofData(desc, true);
    2130:	ce 01       	movw	r24, r28
    2132:	61 e0       	ldi	r22, 0x01	; 1
    2134:	17 df       	rcall	.-466    	; 0x1f64 <usart_getSizeofData>
	
	//if there is not enough room in the buffer for the string exit without adding it to the buffer
	if(bufferLen < len){return 0;}
    2136:	80 17       	cp	r24, r16
    2138:	91 07       	cpc	r25, r17
    213a:	98 f1       	brcs	.+102    	; 0x21a2 <usart_writeByteArray+0x8e>
	
	//check to see if adding the string to the buffer will cause our PoW to go out of bounds with the buffer
	sizeToEdge = (desc->txBuffer + desc->txDataSize) - desc->txPoW;
    213c:	2c 89       	ldd	r18, Y+20	; 0x14
    213e:	3d 89       	ldd	r19, Y+21	; 0x15
    2140:	cf 84       	ldd	r12, Y+15	; 0x0f
    2142:	d8 88       	ldd	r13, Y+16	; 0x10
    2144:	88 8d       	ldd	r24, Y+24	; 0x18
    2146:	99 8d       	ldd	r25, Y+25	; 0x19
    2148:	c8 0e       	add	r12, r24
    214a:	d9 1e       	adc	r13, r25
    214c:	c2 1a       	sub	r12, r18
    214e:	d3 0a       	sbc	r13, r19
	
/*	if we go out of bounds in our buffer break the memcpy to two parts
		1. to fill to the end of the buffer
		2. to fill from the beginning again*/
	if(sizeToEdge < len)
    2150:	c0 16       	cp	r12, r16
    2152:	d1 06       	cpc	r13, r17
    2154:	98 f4       	brcc	.+38     	; 0x217c <usart_writeByteArray+0x68>
	{
		//fill to the edge
		memcpy(desc->txPoW, str, sizeToEdge);
    2156:	82 2f       	mov	r24, r18
    2158:	93 2f       	mov	r25, r19
    215a:	6e 2d       	mov	r22, r14
    215c:	7f 2d       	mov	r23, r15
    215e:	4c 2d       	mov	r20, r12
    2160:	5d 2d       	mov	r21, r13
    2162:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <memcpy>
		desc->txPoW = desc->txBuffer;//reset the pointer to the front of the buffer
    2166:	8f 85       	ldd	r24, Y+15	; 0x0f
    2168:	98 89       	ldd	r25, Y+16	; 0x10
    216a:	8c 8b       	std	Y+20, r24	; 0x14
    216c:	9d 8b       	std	Y+21, r25	; 0x15
		str += sizeToEdge;// move the pointer of the string to the uncopied data
    216e:	ec 0c       	add	r14, r12
    2170:	fd 1c       	adc	r15, r13
		sizeOfString = len - sizeToEdge;// adjust the size of the string to leftover length
    2172:	c8 01       	movw	r24, r16
    2174:	8c 19       	sub	r24, r12
    2176:	9d 09       	sbc	r25, r13
    2178:	6c 01       	movw	r12, r24
    217a:	01 c0       	rjmp	.+2      	; 0x217e <usart_writeByteArray+0x6a>
	size_t sizeOfString, bufferLen, sizeToEdge;
	
	if(!usart_isPortOpen(desc)){return 0;}
	
	//get the overall size of the string in question
	sizeOfString = len;
    217c:	68 01       	movw	r12, r16
		desc->txPoW = desc->txBuffer;//reset the pointer to the front of the buffer
		str += sizeToEdge;// move the pointer of the string to the uncopied data
		sizeOfString = len - sizeToEdge;// adjust the size of the string to leftover length
	}		
	//copy rest/all of the data to the buffer
	memcpy(desc->txPoW, str, sizeOfString);
    217e:	8c 89       	ldd	r24, Y+20	; 0x14
    2180:	9d 89       	ldd	r25, Y+21	; 0x15
    2182:	6e 2d       	mov	r22, r14
    2184:	7f 2d       	mov	r23, r15
    2186:	4c 2d       	mov	r20, r12
    2188:	5d 2d       	mov	r21, r13
    218a:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <memcpy>
	
	//move the PoW to end of the newly added string
	desc->txPoW += sizeOfString;
    218e:	8c 89       	ldd	r24, Y+20	; 0x14
    2190:	9d 89       	ldd	r25, Y+21	; 0x15
    2192:	c8 0e       	add	r12, r24
    2194:	d9 1e       	adc	r13, r25
    2196:	cc 8a       	std	Y+20, r12	; 0x14
    2198:	dd 8a       	std	Y+21, r13	; 0x15

	return len;
    219a:	05 c0       	rjmp	.+10     	; 0x21a6 <usart_writeByteArray+0x92>

size_t usart_writeByteArray(usartDescriptor_t *desc, uint8_t *str, size_t len)
{
	size_t sizeOfString, bufferLen, sizeToEdge;
	
	if(!usart_isPortOpen(desc)){return 0;}
    219c:	00 e0       	ldi	r16, 0x00	; 0
    219e:	10 e0       	ldi	r17, 0x00	; 0
    21a0:	02 c0       	rjmp	.+4      	; 0x21a6 <usart_writeByteArray+0x92>
	sizeOfString = len;
	
	bufferLen = usart_getSizeofData(desc, true);
	
	//if there is not enough room in the buffer for the string exit without adding it to the buffer
	if(bufferLen < len){return 0;}
    21a2:	00 e0       	ldi	r16, 0x00	; 0
    21a4:	10 e0       	ldi	r17, 0x00	; 0
	
	//move the PoW to end of the newly added string
	desc->txPoW += sizeOfString;

	return len;
}
    21a6:	80 2f       	mov	r24, r16
    21a8:	91 2f       	mov	r25, r17
    21aa:	df 91       	pop	r29
    21ac:	cf 91       	pop	r28
    21ae:	1f 91       	pop	r17
    21b0:	0f 91       	pop	r16
    21b2:	ff 90       	pop	r15
    21b4:	ef 90       	pop	r14
    21b6:	df 90       	pop	r13
    21b8:	cf 90       	pop	r12
    21ba:	08 95       	ret

000021bc <usart_writeString>:
*
##########################################################################
*/
size_t usart_writeString( usartDescriptor_t *desc, uint8_t *str )
{
	return(usart_writeByteArray(desc, str, (strlen(str))));
    21bc:	e6 2f       	mov	r30, r22
    21be:	f7 2f       	mov	r31, r23
    21c0:	df 01       	movw	r26, r30
    21c2:	0d 90       	ld	r0, X+
    21c4:	00 20       	and	r0, r0
    21c6:	e9 f7       	brne	.-6      	; 0x21c2 <usart_writeString+0x6>
    21c8:	ad 01       	movw	r20, r26
    21ca:	41 50       	subi	r20, 0x01	; 1
    21cc:	50 40       	sbci	r21, 0x00	; 0
    21ce:	4e 1b       	sub	r20, r30
    21d0:	5f 0b       	sbc	r21, r31
}
    21d2:	a0 cf       	rjmp	.-192    	; 0x2114 <usart_writeByteArray>

000021d4 <usart_writeByte>:

void usart_writeByte(usartDescriptor_t *desc, uint8_t num)
{
    21d4:	1f 93       	push	r17
    21d6:	cf 93       	push	r28
    21d8:	df 93       	push	r29
    21da:	ec 01       	movw	r28, r24
    21dc:	16 2f       	mov	r17, r22
	if(!usart_isPortOpen(desc)){return;}
    21de:	81 df       	rcall	.-254    	; 0x20e2 <usart_isPortOpen>
    21e0:	88 23       	and	r24, r24
    21e2:	81 f0       	breq	.+32     	; 0x2204 <usart_writeByte+0x30>
	
	ADD_TO_BUFFER(desc, num);
    21e4:	ec 89       	ldd	r30, Y+20	; 0x14
    21e6:	fd 89       	ldd	r31, Y+21	; 0x15
    21e8:	11 93       	st	Z+, r17
    21ea:	ec 8b       	std	Y+20, r30	; 0x14
    21ec:	fd 8b       	std	Y+21, r31	; 0x15
	
	if(desc->txPoW > (desc->txBuffer + desc->txDataSize))
    21ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    21f0:	98 89       	ldd	r25, Y+16	; 0x10
    21f2:	28 8d       	ldd	r18, Y+24	; 0x18
    21f4:	39 8d       	ldd	r19, Y+25	; 0x19
    21f6:	28 0f       	add	r18, r24
    21f8:	39 1f       	adc	r19, r25
    21fa:	2e 17       	cp	r18, r30
    21fc:	3f 07       	cpc	r19, r31
    21fe:	10 f4       	brcc	.+4      	; 0x2204 <usart_writeByte+0x30>
	{
		desc->txPoW = desc->txBuffer;
    2200:	8c 8b       	std	Y+20, r24	; 0x14
    2202:	9d 8b       	std	Y+21, r25	; 0x15
	}
}
    2204:	df 91       	pop	r29
    2206:	cf 91       	pop	r28
    2208:	1f 91       	pop	r17
    220a:	08 95       	ret

0000220c <usart_init>:
*
*
##########################################################################
*/
uint8_t usart_init( usartDescriptor_t *desc )
{
    220c:	0f 93       	push	r16
    220e:	1f 93       	push	r17
    2210:	df 93       	push	r29
    2212:	cf 93       	push	r28
    2214:	cd b7       	in	r28, 0x3d	; 61
    2216:	de b7       	in	r29, 0x3e	; 62
    2218:	29 97       	sbiw	r28, 0x09	; 9
    221a:	cd bf       	out	0x3d, r28	; 61
    221c:	de bf       	out	0x3e, r29	; 62
    221e:	8c 01       	movw	r16, r24
	//Need to add the different possible modes that I can have in SPI
	usart_rs232_options_t options;
	USART_t *port = NULL;
	
	options.baudrate = desc->baudrate;
    2220:	fc 01       	movw	r30, r24
    2222:	82 81       	ldd	r24, Z+2	; 0x02
    2224:	93 81       	ldd	r25, Z+3	; 0x03
    2226:	a4 81       	ldd	r26, Z+4	; 0x04
    2228:	b5 81       	ldd	r27, Z+5	; 0x05
    222a:	89 83       	std	Y+1, r24	; 0x01
    222c:	9a 83       	std	Y+2, r25	; 0x02
    222e:	ab 83       	std	Y+3, r26	; 0x03
    2230:	bc 83       	std	Y+4, r27	; 0x04
	options.charlength = desc->charlength;
    2232:	86 81       	ldd	r24, Z+6	; 0x06
    2234:	97 81       	ldd	r25, Z+7	; 0x07
    2236:	8d 83       	std	Y+5, r24	; 0x05
    2238:	9e 83       	std	Y+6, r25	; 0x06
	options.paritytype = desc->paritytype;
    223a:	80 85       	ldd	r24, Z+8	; 0x08
    223c:	91 85       	ldd	r25, Z+9	; 0x09
    223e:	8f 83       	std	Y+7, r24	; 0x07
    2240:	98 87       	std	Y+8, r25	; 0x08
	options.stopbits = desc->stopbits;
    2242:	82 85       	ldd	r24, Z+10	; 0x0a
    2244:	89 87       	std	Y+9, r24	; 0x09
	
	port = (usart_getPort(desc->channel))->port;
    2246:	80 81       	ld	r24, Z
    2248:	91 81       	ldd	r25, Z+1	; 0x01
    224a:	c7 de       	rcall	.-626    	; 0x1fda <usart_getPort>
    224c:	fc 01       	movw	r30, r24
    224e:	80 81       	ld	r24, Z
    2250:	91 81       	ldd	r25, Z+1	; 0x01
	
	//! If there is a supplied Tx buffer point the point of write and reads	
	if(desc->txBuffer)
    2252:	f8 01       	movw	r30, r16
    2254:	27 85       	ldd	r18, Z+15	; 0x0f
    2256:	30 89       	ldd	r19, Z+16	; 0x10
    2258:	21 15       	cp	r18, r1
    225a:	31 05       	cpc	r19, r1
    225c:	51 f0       	breq	.+20     	; 0x2272 <usart_init+0x66>
	{
		desc->txPoW = desc->txBuffer;
    225e:	24 8b       	std	Z+20, r18	; 0x14
    2260:	35 8b       	std	Z+21, r19	; 0x15
		desc->txPoR = desc->txBuffer;
    2262:	26 8b       	std	Z+22, r18	; 0x16
    2264:	37 8b       	std	Z+23, r19	; 0x17
	}

	//! If there is a supplied Rx buffer point the point of write and reads	
	if(desc->txBuffer)
	{
		desc->rxPoW = desc->rxBuffer;
    2266:	24 8d       	ldd	r18, Z+28	; 0x1c
    2268:	35 8d       	ldd	r19, Z+29	; 0x1d
    226a:	26 8f       	std	Z+30, r18	; 0x1e
    226c:	37 8f       	std	Z+31, r19	; 0x1f
		desc->rxPoR = desc->rxBuffer;
    226e:	20 a3       	std	Z+32, r18	; 0x20
    2270:	31 a3       	std	Z+33, r19	; 0x21
	}

	
	usart_init_rs232(port, &options);
    2272:	be 01       	movw	r22, r28
    2274:	6f 5f       	subi	r22, 0xFF	; 255
    2276:	7f 4f       	sbci	r23, 0xFF	; 255
    2278:	89 db       	rcall	.-2286   	; 0x198c <usart_init_rs232>
	
	return 1;
}
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	29 96       	adiw	r28, 0x09	; 9
    227e:	cd bf       	out	0x3d, r28	; 61
    2280:	de bf       	out	0x3e, r29	; 62
    2282:	cf 91       	pop	r28
    2284:	df 91       	pop	r29
    2286:	1f 91       	pop	r17
    2288:	0f 91       	pop	r16
    228a:	08 95       	ret

0000228c <usart_openPort>:
*
*
##########################################################################
*/
uint8_t usart_openPort( usartDescriptor_t *descr )
{
    228c:	0f 93       	push	r16
    228e:	1f 93       	push	r17
    2290:	cf 93       	push	r28
    2292:	df 93       	push	r29
    2294:	ec 01       	movw	r28, r24
	//Make sure we receive a valid descriptor
	if( descr == NULL )
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	b1 f1       	breq	.+108    	; 0x2306 <usart_openPort+0x7a>
		return 0;// no descriptor sent
	
	//Get the descriptor number	
	uint8_t x = (uint8_t)((usart_getPort( descr->channel ))->indx);
    229a:	88 81       	ld	r24, Y
    229c:	99 81       	ldd	r25, Y+1	; 0x01
    229e:	9d de       	rcall	.-710    	; 0x1fda <usart_getPort>
    22a0:	dc 01       	movw	r26, r24
    22a2:	12 96       	adiw	r26, 0x02	; 2
    22a4:	0c 91       	ld	r16, X
    22a6:	12 97       	sbiw	r26, 0x02	; 2
	
	if(x == USART_FILLER_DUMMY)
    22a8:	04 30       	cpi	r16, 0x04	; 4
    22aa:	79 f1       	breq	.+94     	; 0x230a <usart_openPort+0x7e>
		return 0; //unknown descriptor channel
	if(usartDescirptors[ x ] != NULL)
    22ac:	10 e0       	ldi	r17, 0x00	; 0
    22ae:	f8 01       	movw	r30, r16
    22b0:	ee 0f       	add	r30, r30
    22b2:	ff 1f       	adc	r31, r31
    22b4:	e0 5a       	subi	r30, 0xA0	; 160
    22b6:	fd 4d       	sbci	r31, 0xDD	; 221
    22b8:	80 81       	ld	r24, Z
    22ba:	91 81       	ldd	r25, Z+1	; 0x01
    22bc:	00 97       	sbiw	r24, 0x00	; 0
    22be:	39 f5       	brne	.+78     	; 0x230e <usart_openPort+0x82>
		return 0;// channel currently open
	
	//init the usart port and return true if successful	
	if(!usart_init(descr)){return 0;}
    22c0:	ce 01       	movw	r24, r28
    22c2:	a4 df       	rcall	.-184    	; 0x220c <usart_init>
    22c4:	88 23       	and	r24, r24
    22c6:	29 f1       	breq	.+74     	; 0x2312 <usart_openPort+0x86>
	
	//Set the interrupt level to low
	usart_set_rx_interrupt_level((usart_getPort(descr->channel)->port), USART_RXCINTLVL_LO_gc);
    22c8:	88 81       	ld	r24, Y
    22ca:	99 81       	ldd	r25, Y+1	; 0x01
    22cc:	86 de       	rcall	.-756    	; 0x1fda <usart_getPort>
    22ce:	dc 01       	movw	r26, r24
    22d0:	ed 91       	ld	r30, X+
    22d2:	fc 91       	ld	r31, X
 * \param level Interrupt level of the RXD interrupt.
 */
static inline void usart_set_rx_interrupt_level(USART_t *usart,
		enum pmic_level level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_RXCINTLVL_gm) | level;
    22d4:	83 81       	ldd	r24, Z+3	; 0x03
    22d6:	8f 7c       	andi	r24, 0xCF	; 207
    22d8:	80 61       	ori	r24, 0x10	; 16
    22da:	83 83       	std	Z+3, r24	; 0x03
	usart_set_tx_interrupt_level((usart_getPort(descr->channel)->port), USART_TXCINTLVL_LO_gc);
    22dc:	88 81       	ld	r24, Y
    22de:	99 81       	ldd	r25, Y+1	; 0x01
    22e0:	7c de       	rcall	.-776    	; 0x1fda <usart_getPort>
    22e2:	dc 01       	movw	r26, r24
    22e4:	ed 91       	ld	r30, X+
    22e6:	fc 91       	ld	r31, X
    22e8:	11 97       	sbiw	r26, 0x01	; 1
 * \param level Interrupt level of the TXD interrupt.
 */
static inline void usart_set_tx_interrupt_level(USART_t *usart,
		enum pmic_level level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_TXCINTLVL_gm) | level;
    22ea:	83 81       	ldd	r24, Z+3	; 0x03
    22ec:	83 7f       	andi	r24, 0xF3	; 243
    22ee:	84 60       	ori	r24, 0x04	; 4
    22f0:	83 83       	std	Z+3, r24	; 0x03
	//put the opened device in the descriptors list	
	usartDescirptors[ x ] = descr;
    22f2:	f8 01       	movw	r30, r16
    22f4:	ee 0f       	add	r30, r30
    22f6:	ff 1f       	adc	r31, r31
    22f8:	e0 5a       	subi	r30, 0xA0	; 160
    22fa:	fd 4d       	sbci	r31, 0xDD	; 221
    22fc:	c0 83       	st	Z, r28
    22fe:	d1 83       	std	Z+1, r29	; 0x01
	
	sei();
    2300:	78 94       	sei
	
	return 1;
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	07 c0       	rjmp	.+14     	; 0x2314 <usart_openPort+0x88>
*/
uint8_t usart_openPort( usartDescriptor_t *descr )
{
	//Make sure we receive a valid descriptor
	if( descr == NULL )
		return 0;// no descriptor sent
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	05 c0       	rjmp	.+10     	; 0x2314 <usart_openPort+0x88>
	
	//Get the descriptor number	
	uint8_t x = (uint8_t)((usart_getPort( descr->channel ))->indx);
	
	if(x == USART_FILLER_DUMMY)
		return 0; //unknown descriptor channel
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	03 c0       	rjmp	.+6      	; 0x2314 <usart_openPort+0x88>
	if(usartDescirptors[ x ] != NULL)
		return 0;// channel currently open
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	01 c0       	rjmp	.+2      	; 0x2314 <usart_openPort+0x88>
	
	//init the usart port and return true if successful	
	if(!usart_init(descr)){return 0;}
    2312:	80 e0       	ldi	r24, 0x00	; 0
	
	sei();
	
	return 1;

}
    2314:	df 91       	pop	r29
    2316:	cf 91       	pop	r28
    2318:	1f 91       	pop	r17
    231a:	0f 91       	pop	r16
    231c:	08 95       	ret

0000231e <usart_txHandler>:
*
*
##########################################################################
*/
void usart_txHandler(uint8_t i)
{
    231e:	cf 93       	push	r28
    2320:	df 93       	push	r29
	usartDescriptor_t *desc = usartDescirptors[i];
    2322:	e8 2f       	mov	r30, r24
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	ee 0f       	add	r30, r30
    2328:	ff 1f       	adc	r31, r31
    232a:	e0 5a       	subi	r30, 0xA0	; 160
    232c:	fd 4d       	sbci	r31, 0xDD	; 221
    232e:	c0 81       	ld	r28, Z
    2330:	d1 81       	ldd	r29, Z+1	; 0x01
	//TODO I need to add some kind of reset if the data size needs to be reset to zero
	// right now I will just have buffers of size 128
	
	//If the POR is outside the buffer reset it
	if((desc->txPoR - desc->txBuffer) >= desc->txDataSize)
    2332:	8f 85       	ldd	r24, Y+15	; 0x0f
    2334:	98 89       	ldd	r25, Y+16	; 0x10
    2336:	4e 89       	ldd	r20, Y+22	; 0x16
    2338:	5f 89       	ldd	r21, Y+23	; 0x17
    233a:	48 1b       	sub	r20, r24
    233c:	59 0b       	sbc	r21, r25
    233e:	28 8d       	ldd	r18, Y+24	; 0x18
    2340:	39 8d       	ldd	r19, Y+25	; 0x19
    2342:	42 17       	cp	r20, r18
    2344:	53 07       	cpc	r21, r19
    2346:	10 f0       	brcs	.+4      	; 0x234c <usart_txHandler+0x2e>
	{
		desc->txPoR = desc->txBuffer;
    2348:	8e 8b       	std	Y+22, r24	; 0x16
    234a:	9f 8b       	std	Y+23, r25	; 0x17
	}
	
	if(desc->RS485portPin)
    234c:	eb 85       	ldd	r30, Y+11	; 0x0b
    234e:	ee 23       	and	r30, r30
    2350:	b9 f0       	breq	.+46     	; 0x2380 <usart_txHandler+0x62>
 * \param pin PORT pin number.
 * \return Pin mask.
 */
static inline pin_mask_t ioport_pin_to_mask(port_pin_t pin)
{
	return 1U << (pin & 0x7);
    2352:	2e 2f       	mov	r18, r30
    2354:	27 70       	andi	r18, 0x07	; 7
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	02 c0       	rjmp	.+4      	; 0x2360 <usart_txHandler+0x42>
    235c:	88 0f       	add	r24, r24
    235e:	99 1f       	adc	r25, r25
    2360:	2a 95       	dec	r18
    2362:	e2 f7       	brpl	.-8      	; 0x235c <usart_txHandler+0x3e>
 * \return Pointer to the port on which the pin is located.
 */
static inline PORT_t *ioport_pin_to_port(port_pin_t pin)
{
	// Each port has an offset of 0x20
	return (PORT_t *)((uintptr_t)&PORTA + (pin >> 3) * 0x20);
    2364:	e6 95       	lsr	r30
    2366:	e6 95       	lsr	r30
    2368:	e6 95       	lsr	r30
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	f0 96       	adiw	r30, 0x30	; 48
    236e:	ee 0f       	add	r30, r30
    2370:	ff 1f       	adc	r31, r31
    2372:	e2 95       	swap	r30
    2374:	f2 95       	swap	r31
    2376:	f0 7f       	andi	r31, 0xF0	; 240
    2378:	fe 27       	eor	r31, r30
    237a:	e0 7f       	andi	r30, 0xF0	; 240
    237c:	fe 27       	eor	r31, r30
 */
static inline void ioport_toggle_pin(port_pin_t pin)
{
	pin_mask_t pin_mask = ioport_pin_to_mask(pin);
	PORT_t *port = ioport_pin_to_port(pin);
	port->OUTTGL = pin_mask;
    237e:	87 83       	std	Z+7, r24	; 0x07
	{
		ioport_toggle_pin(desc->RS485portPin);
	}
	//execute the callback for a transmit done
	if(desc->txCallBack)
    2380:	ed 85       	ldd	r30, Y+13	; 0x0d
    2382:	fe 85       	ldd	r31, Y+14	; 0x0e
    2384:	30 97       	sbiw	r30, 0x00	; 0
    2386:	21 f0       	breq	.+8      	; 0x2390 <usart_txHandler+0x72>
	{
		desc->txCallBack(*desc->txPoR);
    2388:	ae 89       	ldd	r26, Y+22	; 0x16
    238a:	bf 89       	ldd	r27, Y+23	; 0x17
    238c:	8c 91       	ld	r24, X
    238e:	19 95       	eicall
	}
	
	//increment transmit read
	desc->txPoR++;
    2390:	8e 89       	ldd	r24, Y+22	; 0x16
    2392:	9f 89       	ldd	r25, Y+23	; 0x17
    2394:	01 96       	adiw	r24, 0x01	; 1
    2396:	8e 8b       	std	Y+22, r24	; 0x16
    2398:	9f 8b       	std	Y+23, r25	; 0x17
	
	//set the state of transmit back to ideal
	desc->txState = TX_IDLE;
    239a:	1a 8e       	std	Y+26, r1	; 0x1a
    239c:	1b 8e       	std	Y+27, r1	; 0x1b
}
    239e:	df 91       	pop	r29
    23a0:	cf 91       	pop	r28
    23a2:	08 95       	ret

000023a4 <usart_rxHandler>:
/*
TODO: I need to create protection in this handler to keep POW hitting the POR This will
prevent the buffer from overfilling*/

uint8_t usart_rxHandler(uint8_t i)
{
    23a4:	1f 93       	push	r17
    23a6:	cf 93       	push	r28
    23a8:	df 93       	push	r29
	uint8_t value;
	USART_t *port;
	usartDescriptor_t *currentDesc = usartDescirptors[i];
    23aa:	e8 2f       	mov	r30, r24
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	ee 0f       	add	r30, r30
    23b0:	ff 1f       	adc	r31, r31
    23b2:	e0 5a       	subi	r30, 0xA0	; 160
    23b4:	fd 4d       	sbci	r31, 0xDD	; 221
    23b6:	c0 81       	ld	r28, Z
    23b8:	d1 81       	ldd	r29, Z+1	; 0x01
	
	//find the port that has received data and fetch the data
	port = usart_getPort(currentDesc->channel)->port;
    23ba:	88 81       	ld	r24, Y
    23bc:	99 81       	ldd	r25, Y+1	; 0x01
    23be:	0d de       	rcall	.-998    	; 0x1fda <usart_getPort>
	value = usart_getchar(port);
    23c0:	fc 01       	movw	r30, r24
    23c2:	80 81       	ld	r24, Z
    23c4:	91 81       	ldd	r25, Z+1	; 0x01
    23c6:	50 db       	rcall	.-2400   	; 0x1a68 <usart_getchar>
    23c8:	18 2f       	mov	r17, r24
	
	//Echo value if enabled
	if(currentDesc->echoEnabled)
    23ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    23cc:	88 23       	and	r24, r24
    23ce:	19 f0       	breq	.+6      	; 0x23d6 <usart_rxHandler+0x32>
	{
		usart_writeByte(currentDesc, value);
    23d0:	ce 01       	movw	r24, r28
    23d2:	61 2f       	mov	r22, r17
    23d4:	ff de       	rcall	.-514    	; 0x21d4 <usart_writeByte>
	}
	
	//! If there is a receive buffer then add the value to the buffer
	//! if there is no buffer then just report back the read char
	if(currentDesc->rxBuffer)
    23d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23d8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23da:	00 97       	sbiw	r24, 0x00	; 0
    23dc:	81 f0       	breq	.+32     	; 0x23fe <usart_rxHandler+0x5a>
	{
		//add the read bit into the buffer
		*currentDesc->rxPoW++ = value;
    23de:	ee 8d       	ldd	r30, Y+30	; 0x1e
    23e0:	ff 8d       	ldd	r31, Y+31	; 0x1f
    23e2:	11 93       	st	Z+, r17
    23e4:	ee 8f       	std	Y+30, r30	; 0x1e
    23e6:	ff 8f       	std	Y+31, r31	; 0x1f
	
		//check if we are at the end of the buffer.  If we are at the end reset the pointer to the beginning
		if((currentDesc->rxPoW -  currentDesc->rxBuffer) >= currentDesc->rxDataSize)
    23e8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23ea:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23ec:	e8 1b       	sub	r30, r24
    23ee:	f9 0b       	sbc	r31, r25
    23f0:	2c a1       	ldd	r18, Y+36	; 0x24
    23f2:	3d a1       	ldd	r19, Y+37	; 0x25
    23f4:	e2 17       	cp	r30, r18
    23f6:	f3 07       	cpc	r31, r19
    23f8:	10 f0       	brcs	.+4      	; 0x23fe <usart_rxHandler+0x5a>
		{
			currentDesc->rxPoW = currentDesc->rxBuffer;
    23fa:	8e 8f       	std	Y+30, r24	; 0x1e
    23fc:	9f 8f       	std	Y+31, r25	; 0x1f
		}
	}

	//execute the callback
	if(currentDesc->rxCallBack)
    23fe:	ea a1       	ldd	r30, Y+34	; 0x22
    2400:	fb a1       	ldd	r31, Y+35	; 0x23
    2402:	30 97       	sbiw	r30, 0x00	; 0
    2404:	11 f0       	breq	.+4      	; 0x240a <usart_rxHandler+0x66>
	{
		currentDesc->rxCallBack(value);
    2406:	81 2f       	mov	r24, r17
    2408:	19 95       	eicall
	}
}
    240a:	df 91       	pop	r29
    240c:	cf 91       	pop	r28
    240e:	1f 91       	pop	r17
    2410:	08 95       	ret

00002412 <__vector_27>:

#ifdef CONF_BOARD_ENABLE_USARTC0
ISR(USARTC0_TXC_vect)
{
    2412:	1f 92       	push	r1
    2414:	0f 92       	push	r0
    2416:	0f b6       	in	r0, 0x3f	; 63
    2418:	0f 92       	push	r0
    241a:	0b b6       	in	r0, 0x3b	; 59
    241c:	0f 92       	push	r0
    241e:	11 24       	eor	r1, r1
    2420:	2f 93       	push	r18
    2422:	3f 93       	push	r19
    2424:	4f 93       	push	r20
    2426:	5f 93       	push	r21
    2428:	6f 93       	push	r22
    242a:	7f 93       	push	r23
    242c:	8f 93       	push	r24
    242e:	9f 93       	push	r25
    2430:	af 93       	push	r26
    2432:	bf 93       	push	r27
    2434:	ef 93       	push	r30
    2436:	ff 93       	push	r31
	usart_txHandler(USARTC0_ARRAY_INDEX);
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	71 df       	rcall	.-286    	; 0x231e <usart_txHandler>
}
    243c:	ff 91       	pop	r31
    243e:	ef 91       	pop	r30
    2440:	bf 91       	pop	r27
    2442:	af 91       	pop	r26
    2444:	9f 91       	pop	r25
    2446:	8f 91       	pop	r24
    2448:	7f 91       	pop	r23
    244a:	6f 91       	pop	r22
    244c:	5f 91       	pop	r21
    244e:	4f 91       	pop	r20
    2450:	3f 91       	pop	r19
    2452:	2f 91       	pop	r18
    2454:	0f 90       	pop	r0
    2456:	0b be       	out	0x3b, r0	; 59
    2458:	0f 90       	pop	r0
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	0f 90       	pop	r0
    245e:	1f 90       	pop	r1
    2460:	18 95       	reti

00002462 <__vector_25>:

ISR(USARTC0_RXC_vect)
{
    2462:	1f 92       	push	r1
    2464:	0f 92       	push	r0
    2466:	0f b6       	in	r0, 0x3f	; 63
    2468:	0f 92       	push	r0
    246a:	0b b6       	in	r0, 0x3b	; 59
    246c:	0f 92       	push	r0
    246e:	11 24       	eor	r1, r1
    2470:	2f 93       	push	r18
    2472:	3f 93       	push	r19
    2474:	4f 93       	push	r20
    2476:	5f 93       	push	r21
    2478:	6f 93       	push	r22
    247a:	7f 93       	push	r23
    247c:	8f 93       	push	r24
    247e:	9f 93       	push	r25
    2480:	af 93       	push	r26
    2482:	bf 93       	push	r27
    2484:	ef 93       	push	r30
    2486:	ff 93       	push	r31
	usart_rxHandler(USARTC0_ARRAY_INDEX);	
    2488:	80 e0       	ldi	r24, 0x00	; 0
    248a:	8c df       	rcall	.-232    	; 0x23a4 <usart_rxHandler>
}
    248c:	ff 91       	pop	r31
    248e:	ef 91       	pop	r30
    2490:	bf 91       	pop	r27
    2492:	af 91       	pop	r26
    2494:	9f 91       	pop	r25
    2496:	8f 91       	pop	r24
    2498:	7f 91       	pop	r23
    249a:	6f 91       	pop	r22
    249c:	5f 91       	pop	r21
    249e:	4f 91       	pop	r20
    24a0:	3f 91       	pop	r19
    24a2:	2f 91       	pop	r18
    24a4:	0f 90       	pop	r0
    24a6:	0b be       	out	0x3b, r0	; 59
    24a8:	0f 90       	pop	r0
    24aa:	0f be       	out	0x3f, r0	; 63
    24ac:	0f 90       	pop	r0
    24ae:	1f 90       	pop	r1
    24b0:	18 95       	reti

000024b2 <__vector_30>:
#endif

#ifdef CONF_BOARD_ENABLE_USARTC1
ISR(USARTC1_TXC_vect)
{
    24b2:	1f 92       	push	r1
    24b4:	0f 92       	push	r0
    24b6:	0f b6       	in	r0, 0x3f	; 63
    24b8:	0f 92       	push	r0
    24ba:	0b b6       	in	r0, 0x3b	; 59
    24bc:	0f 92       	push	r0
    24be:	11 24       	eor	r1, r1
    24c0:	2f 93       	push	r18
    24c2:	3f 93       	push	r19
    24c4:	4f 93       	push	r20
    24c6:	5f 93       	push	r21
    24c8:	6f 93       	push	r22
    24ca:	7f 93       	push	r23
    24cc:	8f 93       	push	r24
    24ce:	9f 93       	push	r25
    24d0:	af 93       	push	r26
    24d2:	bf 93       	push	r27
    24d4:	ef 93       	push	r30
    24d6:	ff 93       	push	r31
	usart_txHandler(USARTC1_ARRAY_INDEX);
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	21 df       	rcall	.-446    	; 0x231e <usart_txHandler>
}
    24dc:	ff 91       	pop	r31
    24de:	ef 91       	pop	r30
    24e0:	bf 91       	pop	r27
    24e2:	af 91       	pop	r26
    24e4:	9f 91       	pop	r25
    24e6:	8f 91       	pop	r24
    24e8:	7f 91       	pop	r23
    24ea:	6f 91       	pop	r22
    24ec:	5f 91       	pop	r21
    24ee:	4f 91       	pop	r20
    24f0:	3f 91       	pop	r19
    24f2:	2f 91       	pop	r18
    24f4:	0f 90       	pop	r0
    24f6:	0b be       	out	0x3b, r0	; 59
    24f8:	0f 90       	pop	r0
    24fa:	0f be       	out	0x3f, r0	; 63
    24fc:	0f 90       	pop	r0
    24fe:	1f 90       	pop	r1
    2500:	18 95       	reti

00002502 <__vector_28>:

ISR(USARTC1_RXC_vect)
{
    2502:	1f 92       	push	r1
    2504:	0f 92       	push	r0
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	0f 92       	push	r0
    250a:	0b b6       	in	r0, 0x3b	; 59
    250c:	0f 92       	push	r0
    250e:	11 24       	eor	r1, r1
    2510:	2f 93       	push	r18
    2512:	3f 93       	push	r19
    2514:	4f 93       	push	r20
    2516:	5f 93       	push	r21
    2518:	6f 93       	push	r22
    251a:	7f 93       	push	r23
    251c:	8f 93       	push	r24
    251e:	9f 93       	push	r25
    2520:	af 93       	push	r26
    2522:	bf 93       	push	r27
    2524:	ef 93       	push	r30
    2526:	ff 93       	push	r31
	usart_rxHandler(USARTC1_ARRAY_INDEX);
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	3c df       	rcall	.-392    	; 0x23a4 <usart_rxHandler>
}
    252c:	ff 91       	pop	r31
    252e:	ef 91       	pop	r30
    2530:	bf 91       	pop	r27
    2532:	af 91       	pop	r26
    2534:	9f 91       	pop	r25
    2536:	8f 91       	pop	r24
    2538:	7f 91       	pop	r23
    253a:	6f 91       	pop	r22
    253c:	5f 91       	pop	r21
    253e:	4f 91       	pop	r20
    2540:	3f 91       	pop	r19
    2542:	2f 91       	pop	r18
    2544:	0f 90       	pop	r0
    2546:	0b be       	out	0x3b, r0	; 59
    2548:	0f 90       	pop	r0
    254a:	0f be       	out	0x3f, r0	; 63
    254c:	0f 90       	pop	r0
    254e:	1f 90       	pop	r1
    2550:	18 95       	reti

00002552 <__vector_90>:
#endif

#ifdef CONF_BOARD_ENABLE_USARTD0
ISR(USARTD0_TXC_vect)
{
    2552:	1f 92       	push	r1
    2554:	0f 92       	push	r0
    2556:	0f b6       	in	r0, 0x3f	; 63
    2558:	0f 92       	push	r0
    255a:	0b b6       	in	r0, 0x3b	; 59
    255c:	0f 92       	push	r0
    255e:	11 24       	eor	r1, r1
    2560:	2f 93       	push	r18
    2562:	3f 93       	push	r19
    2564:	4f 93       	push	r20
    2566:	5f 93       	push	r21
    2568:	6f 93       	push	r22
    256a:	7f 93       	push	r23
    256c:	8f 93       	push	r24
    256e:	9f 93       	push	r25
    2570:	af 93       	push	r26
    2572:	bf 93       	push	r27
    2574:	ef 93       	push	r30
    2576:	ff 93       	push	r31
	usart_txHandler(USARTD0_ARRAY_INDEX);
    2578:	82 e0       	ldi	r24, 0x02	; 2
    257a:	d1 de       	rcall	.-606    	; 0x231e <usart_txHandler>
}
    257c:	ff 91       	pop	r31
    257e:	ef 91       	pop	r30
    2580:	bf 91       	pop	r27
    2582:	af 91       	pop	r26
    2584:	9f 91       	pop	r25
    2586:	8f 91       	pop	r24
    2588:	7f 91       	pop	r23
    258a:	6f 91       	pop	r22
    258c:	5f 91       	pop	r21
    258e:	4f 91       	pop	r20
    2590:	3f 91       	pop	r19
    2592:	2f 91       	pop	r18
    2594:	0f 90       	pop	r0
    2596:	0b be       	out	0x3b, r0	; 59
    2598:	0f 90       	pop	r0
    259a:	0f be       	out	0x3f, r0	; 63
    259c:	0f 90       	pop	r0
    259e:	1f 90       	pop	r1
    25a0:	18 95       	reti

000025a2 <__vector_88>:

ISR(USARTD0_RXC_vect)
{
    25a2:	1f 92       	push	r1
    25a4:	0f 92       	push	r0
    25a6:	0f b6       	in	r0, 0x3f	; 63
    25a8:	0f 92       	push	r0
    25aa:	0b b6       	in	r0, 0x3b	; 59
    25ac:	0f 92       	push	r0
    25ae:	11 24       	eor	r1, r1
    25b0:	2f 93       	push	r18
    25b2:	3f 93       	push	r19
    25b4:	4f 93       	push	r20
    25b6:	5f 93       	push	r21
    25b8:	6f 93       	push	r22
    25ba:	7f 93       	push	r23
    25bc:	8f 93       	push	r24
    25be:	9f 93       	push	r25
    25c0:	af 93       	push	r26
    25c2:	bf 93       	push	r27
    25c4:	ef 93       	push	r30
    25c6:	ff 93       	push	r31
	usart_rxHandler(USARTD0_ARRAY_INDEX);
    25c8:	82 e0       	ldi	r24, 0x02	; 2
    25ca:	ec de       	rcall	.-552    	; 0x23a4 <usart_rxHandler>
}
    25cc:	ff 91       	pop	r31
    25ce:	ef 91       	pop	r30
    25d0:	bf 91       	pop	r27
    25d2:	af 91       	pop	r26
    25d4:	9f 91       	pop	r25
    25d6:	8f 91       	pop	r24
    25d8:	7f 91       	pop	r23
    25da:	6f 91       	pop	r22
    25dc:	5f 91       	pop	r21
    25de:	4f 91       	pop	r20
    25e0:	3f 91       	pop	r19
    25e2:	2f 91       	pop	r18
    25e4:	0f 90       	pop	r0
    25e6:	0b be       	out	0x3b, r0	; 59
    25e8:	0f 90       	pop	r0
    25ea:	0f be       	out	0x3f, r0	; 63
    25ec:	0f 90       	pop	r0
    25ee:	1f 90       	pop	r1
    25f0:	18 95       	reti

000025f2 <__vector_93>:
#endif

#ifdef CONF_BOARD_ENABLE_USARTD1
ISR(USARTD1_TXC_vect)
{
    25f2:	1f 92       	push	r1
    25f4:	0f 92       	push	r0
    25f6:	0f b6       	in	r0, 0x3f	; 63
    25f8:	0f 92       	push	r0
    25fa:	0b b6       	in	r0, 0x3b	; 59
    25fc:	0f 92       	push	r0
    25fe:	11 24       	eor	r1, r1
    2600:	2f 93       	push	r18
    2602:	3f 93       	push	r19
    2604:	4f 93       	push	r20
    2606:	5f 93       	push	r21
    2608:	6f 93       	push	r22
    260a:	7f 93       	push	r23
    260c:	8f 93       	push	r24
    260e:	9f 93       	push	r25
    2610:	af 93       	push	r26
    2612:	bf 93       	push	r27
    2614:	ef 93       	push	r30
    2616:	ff 93       	push	r31
	usart_txHandler(USARTD1_ARRAY_INDEX);
    2618:	83 e0       	ldi	r24, 0x03	; 3
    261a:	81 de       	rcall	.-766    	; 0x231e <usart_txHandler>
}
    261c:	ff 91       	pop	r31
    261e:	ef 91       	pop	r30
    2620:	bf 91       	pop	r27
    2622:	af 91       	pop	r26
    2624:	9f 91       	pop	r25
    2626:	8f 91       	pop	r24
    2628:	7f 91       	pop	r23
    262a:	6f 91       	pop	r22
    262c:	5f 91       	pop	r21
    262e:	4f 91       	pop	r20
    2630:	3f 91       	pop	r19
    2632:	2f 91       	pop	r18
    2634:	0f 90       	pop	r0
    2636:	0b be       	out	0x3b, r0	; 59
    2638:	0f 90       	pop	r0
    263a:	0f be       	out	0x3f, r0	; 63
    263c:	0f 90       	pop	r0
    263e:	1f 90       	pop	r1
    2640:	18 95       	reti

00002642 <__vector_91>:

ISR(USARTD1_RXC_vect)
{
    2642:	1f 92       	push	r1
    2644:	0f 92       	push	r0
    2646:	0f b6       	in	r0, 0x3f	; 63
    2648:	0f 92       	push	r0
    264a:	0b b6       	in	r0, 0x3b	; 59
    264c:	0f 92       	push	r0
    264e:	11 24       	eor	r1, r1
    2650:	2f 93       	push	r18
    2652:	3f 93       	push	r19
    2654:	4f 93       	push	r20
    2656:	5f 93       	push	r21
    2658:	6f 93       	push	r22
    265a:	7f 93       	push	r23
    265c:	8f 93       	push	r24
    265e:	9f 93       	push	r25
    2660:	af 93       	push	r26
    2662:	bf 93       	push	r27
    2664:	ef 93       	push	r30
    2666:	ff 93       	push	r31
	usart_rxHandler(USARTD1_ARRAY_INDEX);	
    2668:	83 e0       	ldi	r24, 0x03	; 3
    266a:	9c de       	rcall	.-712    	; 0x23a4 <usart_rxHandler>
}
    266c:	ff 91       	pop	r31
    266e:	ef 91       	pop	r30
    2670:	bf 91       	pop	r27
    2672:	af 91       	pop	r26
    2674:	9f 91       	pop	r25
    2676:	8f 91       	pop	r24
    2678:	7f 91       	pop	r23
    267a:	6f 91       	pop	r22
    267c:	5f 91       	pop	r21
    267e:	4f 91       	pop	r20
    2680:	3f 91       	pop	r19
    2682:	2f 91       	pop	r18
    2684:	0f 90       	pop	r0
    2686:	0b be       	out	0x3b, r0	; 59
    2688:	0f 90       	pop	r0
    268a:	0f be       	out	0x3f, r0	; 63
    268c:	0f 90       	pop	r0
    268e:	1f 90       	pop	r1
    2690:	18 95       	reti

00002692 <cmd_downHandler>:
	//execute move
	somfy_control_moveAbsPos(addr, &move);
}

void cmd_downHandler(uint8_t *data)
{
    2692:	cf 92       	push	r12
    2694:	df 92       	push	r13
    2696:	ef 92       	push	r14
    2698:	ff 92       	push	r15
    269a:	0f 93       	push	r16
    269c:	1f 93       	push	r17
    269e:	df 93       	push	r29
    26a0:	cf 93       	push	r28
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
    26a6:	2d 97       	sbiw	r28, 0x0d	; 13
    26a8:	cd bf       	out	0x3d, r28	; 61
    26aa:	de bf       	out	0x3e, r29	; 62
    26ac:	8c 01       	movw	r16, r24
    26ae:	7e 01       	movw	r14, r28
    26b0:	08 94       	sec
    26b2:	e1 1c       	adc	r14, r1
    26b4:	f1 1c       	adc	r15, r1
	
	//execute move
	somfy_control_moveAbsPos(addr, &move);
}

void cmd_downHandler(uint8_t *data)
    26b6:	cc 24       	eor	r12, r12
    26b8:	dd 24       	eor	r13, r13
    26ba:	68 94       	set
    26bc:	c2 f8       	bld	r12, 2
    26be:	cc 0e       	add	r12, r28
    26c0:	dd 1e       	adc	r13, r29
    26c2:	13 c0       	rjmp	.+38     	; 0x26ea <cmd_downHandler+0x58>
    26c4:	8f 01       	movw	r16, r30
	control_move_t move;
	
	//cycle thru string to get all 3 bytes
	for(uint8_t y = 0; y < 3; y++)
	{
		while(*data == ' ')
    26c6:	81 91       	ld	r24, Z+
    26c8:	80 32       	cpi	r24, 0x20	; 32
    26ca:	e1 f3       	breq	.-8      	; 0x26c4 <cmd_downHandler+0x32>
		{
			data++;
		}
		
		//convert the string Byte to an Interger Byte;(must be a decimal value)
		*ptr = atoi(data);
    26cc:	c8 01       	movw	r24, r16
    26ce:	0e 94 c8 1b 	call	0x3790	; 0x3790 <atoi>
    26d2:	f7 01       	movw	r30, r14
    26d4:	81 93       	st	Z+, r24
    26d6:	7f 01       	movw	r14, r30
		if(*ptr > 99 )
    26d8:	84 36       	cpi	r24, 0x64	; 100
    26da:	10 f0       	brcs	.+4      	; 0x26e0 <cmd_downHandler+0x4e>
		{
			data++;
    26dc:	0f 5f       	subi	r16, 0xFF	; 255
    26de:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t device[3], x = 0;
	uint8_t *ptr = &addr.firstByte;
	control_move_t move;
	
	//cycle thru string to get all 3 bytes
	for(uint8_t y = 0; y < 3; y++)
    26e0:	ec 14       	cp	r14, r12
    26e2:	fd 04       	cpc	r15, r13
    26e4:	41 f0       	breq	.+16     	; 0x26f6 <cmd_downHandler+0x64>
		if(*ptr > 99 )
		{
			data++;
		}//if the string is greater than 2 digits long		
		//increment data the size of a byte
		data += 2;
    26e6:	0e 5f       	subi	r16, 0xFE	; 254
    26e8:	1f 4f       	sbci	r17, 0xFF	; 255
	control_move_t move;
	
	//cycle thru string to get all 3 bytes
	for(uint8_t y = 0; y < 3; y++)
	{
		while(*data == ' ')
    26ea:	f8 01       	movw	r30, r16
    26ec:	80 81       	ld	r24, Z
    26ee:	80 32       	cpi	r24, 0x20	; 32
    26f0:	69 f7       	brne	.-38     	; 0x26cc <cmd_downHandler+0x3a>
	
	//execute move
	somfy_control_moveAbsPos(addr, &move);
}

void cmd_downHandler(uint8_t *data)
    26f2:	31 96       	adiw	r30, 0x01	; 1
    26f4:	e7 cf       	rjmp	.-50     	; 0x26c4 <cmd_downHandler+0x32>
		data += 2;
		ptr++;
	}	
	
	//populate move data
	move.moveTo = move_to_down_limit;
    26f6:	18 86       	std	Y+8, r1	; 0x08
    26f8:	19 86       	std	Y+9, r1	; 0x09
	move.value = 100;
    26fa:	84 e6       	ldi	r24, 0x64	; 100
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	8c 87       	std	Y+12, r24	; 0x0c
    2700:	9d 87       	std	Y+13, r25	; 0x0d
	
	//execute move
	somfy_control_moveAbsPos(addr, &move);
    2702:	69 81       	ldd	r22, Y+1	; 0x01
    2704:	7a 81       	ldd	r23, Y+2	; 0x02
    2706:	8b 81       	ldd	r24, Y+3	; 0x03
    2708:	ae 01       	movw	r20, r28
    270a:	4c 5f       	subi	r20, 0xFC	; 252
    270c:	5f 4f       	sbci	r21, 0xFF	; 255
    270e:	d2 d4       	rcall	.+2468   	; 0x30b4 <somfy_control_moveAbsPos>
    2710:	2d 96       	adiw	r28, 0x0d	; 13
    2712:	cd bf       	out	0x3d, r28	; 61
    2714:	de bf       	out	0x3e, r29	; 62
    2716:	cf 91       	pop	r28
    2718:	df 91       	pop	r29
    271a:	1f 91       	pop	r17
    271c:	0f 91       	pop	r16
    271e:	ff 90       	pop	r15
    2720:	ef 90       	pop	r14
    2722:	df 90       	pop	r13
    2724:	cf 90       	pop	r12
    2726:	08 95       	ret

00002728 <cmd_upHandler>:
	//execute move
	somfy_control_moveAbsPos(addr, &move);
}

void cmd_upHandler(uint8_t *data)
{
    2728:	cf 92       	push	r12
    272a:	df 92       	push	r13
    272c:	ef 92       	push	r14
    272e:	ff 92       	push	r15
    2730:	0f 93       	push	r16
    2732:	1f 93       	push	r17
    2734:	df 93       	push	r29
    2736:	cf 93       	push	r28
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
    273c:	2d 97       	sbiw	r28, 0x0d	; 13
    273e:	cd bf       	out	0x3d, r28	; 61
    2740:	de bf       	out	0x3e, r29	; 62
    2742:	8c 01       	movw	r16, r24
    2744:	7e 01       	movw	r14, r28
    2746:	08 94       	sec
    2748:	e1 1c       	adc	r14, r1
    274a:	f1 1c       	adc	r15, r1
	
	//execute move
	somfy_control_moveAbsPos(addr, &move);
}

void cmd_upHandler(uint8_t *data)
    274c:	cc 24       	eor	r12, r12
    274e:	dd 24       	eor	r13, r13
    2750:	68 94       	set
    2752:	c2 f8       	bld	r12, 2
    2754:	cc 0e       	add	r12, r28
    2756:	dd 1e       	adc	r13, r29
    2758:	13 c0       	rjmp	.+38     	; 0x2780 <cmd_upHandler+0x58>
    275a:	8f 01       	movw	r16, r30
	control_move_t move;
	
	// get all three bytes of the address
	for(uint8_t y = 0; y < 3; y++)
	{
		while(*data == ' ')
    275c:	81 91       	ld	r24, Z+
    275e:	80 32       	cpi	r24, 0x20	; 32
    2760:	e1 f3       	breq	.-8      	; 0x275a <cmd_upHandler+0x32>
		{
			data++;
		}
		
		//convert the string Byte to an Interger Byte;
		*ptr = atoi(data);
    2762:	c8 01       	movw	r24, r16
    2764:	0e 94 c8 1b 	call	0x3790	; 0x3790 <atoi>
    2768:	f7 01       	movw	r30, r14
    276a:	81 93       	st	Z+, r24
    276c:	7f 01       	movw	r14, r30
		if(*ptr > 99 )
    276e:	84 36       	cpi	r24, 0x64	; 100
    2770:	10 f0       	brcs	.+4      	; 0x2776 <cmd_upHandler+0x4e>
		{
			data++;
    2772:	0f 5f       	subi	r16, 0xFF	; 255
    2774:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t device[3], x = 0;
	uint8_t *ptr = &addr.firstByte;
	control_move_t move;
	
	// get all three bytes of the address
	for(uint8_t y = 0; y < 3; y++)
    2776:	ec 14       	cp	r14, r12
    2778:	fd 04       	cpc	r15, r13
    277a:	41 f0       	breq	.+16     	; 0x278c <cmd_upHandler+0x64>
		{
			data++;
		}//if the string is greater than 2 digits long		
		
		//increment data the size of a byte
		data += 2;
    277c:	0e 5f       	subi	r16, 0xFE	; 254
    277e:	1f 4f       	sbci	r17, 0xFF	; 255
	control_move_t move;
	
	// get all three bytes of the address
	for(uint8_t y = 0; y < 3; y++)
	{
		while(*data == ' ')
    2780:	f8 01       	movw	r30, r16
    2782:	80 81       	ld	r24, Z
    2784:	80 32       	cpi	r24, 0x20	; 32
    2786:	69 f7       	brne	.-38     	; 0x2762 <cmd_upHandler+0x3a>
	
	//execute move
	somfy_control_moveAbsPos(addr, &move);
}

void cmd_upHandler(uint8_t *data)
    2788:	31 96       	adiw	r30, 0x01	; 1
    278a:	e7 cf       	rjmp	.-50     	; 0x275a <cmd_upHandler+0x32>
		//increment data the size of a byte
		data += 2;
		ptr++;
	}		
	//populate the move data
	move.moveTo = move_to_up_limit;
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	88 87       	std	Y+8, r24	; 0x08
    2792:	99 87       	std	Y+9, r25	; 0x09
	move.value = 100;
    2794:	84 e6       	ldi	r24, 0x64	; 100
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	8c 87       	std	Y+12, r24	; 0x0c
    279a:	9d 87       	std	Y+13, r25	; 0x0d
	
	//execute move
	somfy_control_moveAbsPos(addr, &move);
    279c:	69 81       	ldd	r22, Y+1	; 0x01
    279e:	7a 81       	ldd	r23, Y+2	; 0x02
    27a0:	8b 81       	ldd	r24, Y+3	; 0x03
    27a2:	ae 01       	movw	r20, r28
    27a4:	4c 5f       	subi	r20, 0xFC	; 252
    27a6:	5f 4f       	sbci	r21, 0xFF	; 255
    27a8:	85 d4       	rcall	.+2314   	; 0x30b4 <somfy_control_moveAbsPos>
}
    27aa:	2d 96       	adiw	r28, 0x0d	; 13
    27ac:	cd bf       	out	0x3d, r28	; 61
    27ae:	de bf       	out	0x3e, r29	; 62
    27b0:	cf 91       	pop	r28
    27b2:	df 91       	pop	r29
    27b4:	1f 91       	pop	r17
    27b6:	0f 91       	pop	r16
    27b8:	ff 90       	pop	r15
    27ba:	ef 90       	pop	r14
    27bc:	df 90       	pop	r13
    27be:	cf 90       	pop	r12
    27c0:	08 95       	ret

000027c2 <cmd_sendHandler>:
	//execute move
	somfy_reqMotorPos(addr);
}

void cmd_sendHandler(uint8_t *data)
{
    27c2:	cf 92       	push	r12
    27c4:	df 92       	push	r13
    27c6:	ef 92       	push	r14
    27c8:	ff 92       	push	r15
    27ca:	0f 93       	push	r16
    27cc:	1f 93       	push	r17
    27ce:	df 93       	push	r29
    27d0:	cf 93       	push	r28
    27d2:	cd b7       	in	r28, 0x3d	; 61
    27d4:	de b7       	in	r29, 0x3e	; 62
    27d6:	2d 97       	sbiw	r28, 0x0d	; 13
    27d8:	cd bf       	out	0x3d, r28	; 61
    27da:	de bf       	out	0x3e, r29	; 62
    27dc:	8c 01       	movw	r16, r24
    27de:	7e 01       	movw	r14, r28
    27e0:	08 94       	sec
    27e2:	e1 1c       	adc	r14, r1
    27e4:	f1 1c       	adc	r15, r1
	
	//execute move
	somfy_reqMotorPos(addr);
}

void cmd_sendHandler(uint8_t *data)
    27e6:	cc 24       	eor	r12, r12
    27e8:	dd 24       	eor	r13, r13
    27ea:	68 94       	set
    27ec:	c2 f8       	bld	r12, 2
    27ee:	cc 0e       	add	r12, r28
    27f0:	dd 1e       	adc	r13, r29
    27f2:	12 c0       	rjmp	.+36     	; 0x2818 <cmd_sendHandler+0x56>
    27f4:	8f 01       	movw	r16, r30
	control_move_t move;
	
	// get all three bytes of the address
	for(uint8_t y = 0; y < 3; y++)
	{
		while(*data == ' ')
    27f6:	81 91       	ld	r24, Z+
    27f8:	80 32       	cpi	r24, 0x20	; 32
    27fa:	e1 f3       	breq	.-8      	; 0x27f4 <cmd_sendHandler+0x32>
		{
			data++;
		}
		
		//convert the string Byte to an Interger Byte;
		*ptr = atoi(data);
    27fc:	c8 01       	movw	r24, r16
    27fe:	c8 d7       	rcall	.+3984   	; 0x3790 <atoi>
    2800:	f7 01       	movw	r30, r14
    2802:	81 93       	st	Z+, r24
    2804:	7f 01       	movw	r14, r30
		if(*ptr > 99 )
    2806:	84 36       	cpi	r24, 0x64	; 100
    2808:	10 f0       	brcs	.+4      	; 0x280e <cmd_sendHandler+0x4c>
		{
			data++;
    280a:	0f 5f       	subi	r16, 0xFF	; 255
    280c:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t device[3], x = 0;
	uint8_t *ptr = &addr.firstByte;
	control_move_t move;
	
	// get all three bytes of the address
	for(uint8_t y = 0; y < 3; y++)
    280e:	ec 14       	cp	r14, r12
    2810:	fd 04       	cpc	r15, r13
    2812:	41 f0       	breq	.+16     	; 0x2824 <cmd_sendHandler+0x62>
		{
			data++;
		}//if the string is greater than 2 digits long		
		
		//increment data the size of a byte
		data += 2;
    2814:	0e 5f       	subi	r16, 0xFE	; 254
    2816:	1f 4f       	sbci	r17, 0xFF	; 255
	control_move_t move;
	
	// get all three bytes of the address
	for(uint8_t y = 0; y < 3; y++)
	{
		while(*data == ' ')
    2818:	f8 01       	movw	r30, r16
    281a:	80 81       	ld	r24, Z
    281c:	80 32       	cpi	r24, 0x20	; 32
    281e:	71 f7       	brne	.-36     	; 0x27fc <cmd_sendHandler+0x3a>
	
	//execute move
	somfy_reqMotorPos(addr);
}

void cmd_sendHandler(uint8_t *data)
    2820:	31 96       	adiw	r30, 0x01	; 1
    2822:	e8 cf       	rjmp	.-48     	; 0x27f4 <cmd_sendHandler+0x32>
		//increment data the size of a byte
		data += 2;
		ptr++;
	}		
	//populate the move data
	move.moveTo = move_to_up_limit;
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	88 87       	std	Y+8, r24	; 0x08
    282a:	99 87       	std	Y+9, r25	; 0x09
	move.value = 100;
    282c:	84 e6       	ldi	r24, 0x64	; 100
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	8c 87       	std	Y+12, r24	; 0x0c
    2832:	9d 87       	std	Y+13, r25	; 0x0d
	
	//execute move
	somfy_control_moveAbsPos(addr, &move);
    2834:	69 81       	ldd	r22, Y+1	; 0x01
    2836:	7a 81       	ldd	r23, Y+2	; 0x02
    2838:	8b 81       	ldd	r24, Y+3	; 0x03
    283a:	ae 01       	movw	r20, r28
    283c:	4c 5f       	subi	r20, 0xFC	; 252
    283e:	5f 4f       	sbci	r21, 0xFF	; 255
    2840:	39 d4       	rcall	.+2162   	; 0x30b4 <somfy_control_moveAbsPos>
}
    2842:	2d 96       	adiw	r28, 0x0d	; 13
    2844:	cd bf       	out	0x3d, r28	; 61
    2846:	de bf       	out	0x3e, r29	; 62
    2848:	cf 91       	pop	r28
    284a:	df 91       	pop	r29
    284c:	1f 91       	pop	r17
    284e:	0f 91       	pop	r16
    2850:	ff 90       	pop	r15
    2852:	ef 90       	pop	r14
    2854:	df 90       	pop	r13
    2856:	cf 90       	pop	r12
    2858:	08 95       	ret

0000285a <cmd_QueryHandler>:
	cmd_downHandler, //down
	PCserial_statusCallBack, //stop
};

void cmd_QueryHandler(uint8_t *data)
{
    285a:	cf 92       	push	r12
    285c:	df 92       	push	r13
    285e:	ef 92       	push	r14
    2860:	ff 92       	push	r15
    2862:	0f 93       	push	r16
    2864:	1f 93       	push	r17
    2866:	df 93       	push	r29
    2868:	cf 93       	push	r28
    286a:	00 d0       	rcall	.+0      	; 0x286c <cmd_QueryHandler+0x12>
    286c:	cd b7       	in	r28, 0x3d	; 61
    286e:	de b7       	in	r29, 0x3e	; 62
    2870:	8c 01       	movw	r16, r24
    2872:	7e 01       	movw	r14, r28
    2874:	08 94       	sec
    2876:	e1 1c       	adc	r14, r1
    2878:	f1 1c       	adc	r15, r1
	cmd_upHandler, //up
	cmd_downHandler, //down
	PCserial_statusCallBack, //stop
};

void cmd_QueryHandler(uint8_t *data)
    287a:	cc 24       	eor	r12, r12
    287c:	dd 24       	eor	r13, r13
    287e:	68 94       	set
    2880:	c2 f8       	bld	r12, 2
    2882:	cc 0e       	add	r12, r28
    2884:	dd 1e       	adc	r13, r29
    2886:	12 c0       	rjmp	.+36     	; 0x28ac <cmd_QueryHandler+0x52>
    2888:	8f 01       	movw	r16, r30
	control_move_t move;
	
	// get all three bytes of the address
	for(uint8_t y = 0; y < 3; y++)
	{
		while(*data == ' ')
    288a:	81 91       	ld	r24, Z+
    288c:	80 32       	cpi	r24, 0x20	; 32
    288e:	e1 f3       	breq	.-8      	; 0x2888 <cmd_QueryHandler+0x2e>
		{
			data++;
		}
		
		//convert the string Byte to an Interger Byte;
		*ptr = atoi(data);
    2890:	c8 01       	movw	r24, r16
    2892:	7e d7       	rcall	.+3836   	; 0x3790 <atoi>
    2894:	f7 01       	movw	r30, r14
    2896:	81 93       	st	Z+, r24
    2898:	7f 01       	movw	r14, r30
		if(*ptr > 99 )
    289a:	84 36       	cpi	r24, 0x64	; 100
    289c:	10 f0       	brcs	.+4      	; 0x28a2 <cmd_QueryHandler+0x48>
		{
			data++;
    289e:	0f 5f       	subi	r16, 0xFF	; 255
    28a0:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t device[3], x = 0;
	uint8_t *ptr = &addr.firstByte;
	control_move_t move;
	
	// get all three bytes of the address
	for(uint8_t y = 0; y < 3; y++)
    28a2:	ec 14       	cp	r14, r12
    28a4:	fd 04       	cpc	r15, r13
    28a6:	41 f0       	breq	.+16     	; 0x28b8 <cmd_QueryHandler+0x5e>
		{
			data++;
		}//if the string is greater than 2 digits long		
		
		//increment data the size of a byte
		data += 2;
    28a8:	0e 5f       	subi	r16, 0xFE	; 254
    28aa:	1f 4f       	sbci	r17, 0xFF	; 255
	control_move_t move;
	
	// get all three bytes of the address
	for(uint8_t y = 0; y < 3; y++)
	{
		while(*data == ' ')
    28ac:	f8 01       	movw	r30, r16
    28ae:	80 81       	ld	r24, Z
    28b0:	80 32       	cpi	r24, 0x20	; 32
    28b2:	71 f7       	brne	.-36     	; 0x2890 <cmd_QueryHandler+0x36>
	cmd_upHandler, //up
	cmd_downHandler, //down
	PCserial_statusCallBack, //stop
};

void cmd_QueryHandler(uint8_t *data)
    28b4:	31 96       	adiw	r30, 0x01	; 1
    28b6:	e8 cf       	rjmp	.-48     	; 0x2888 <cmd_QueryHandler+0x2e>
	//populate the move data
	move.moveTo = move_to_up_limit;
	move.value = 100;
	
	//execute move
	somfy_reqMotorPos(addr);
    28b8:	69 81       	ldd	r22, Y+1	; 0x01
    28ba:	7a 81       	ldd	r23, Y+2	; 0x02
    28bc:	8b 81       	ldd	r24, Y+3	; 0x03
    28be:	a0 d4       	rcall	.+2368   	; 0x3200 <somfy_reqMotorPos>
}
    28c0:	23 96       	adiw	r28, 0x03	; 3
    28c2:	cd bf       	out	0x3d, r28	; 61
    28c4:	de bf       	out	0x3e, r29	; 62
    28c6:	cf 91       	pop	r28
    28c8:	df 91       	pop	r29
    28ca:	1f 91       	pop	r17
    28cc:	0f 91       	pop	r16
    28ce:	ff 90       	pop	r15
    28d0:	ef 90       	pop	r14
    28d2:	df 90       	pop	r13
    28d4:	cf 90       	pop	r12
    28d6:	08 95       	ret

000028d8 <PCserial_txCBhandler>:
};

void PCserial_txCBhandler(void)
{
	
}
    28d8:	08 95       	ret

000028da <PCserial_rxCBhandler>:
void PCserial_rxCBhandler(uint8_t num)
{
    28da:	cf 93       	push	r28
    28dc:	df 93       	push	r29
	uint8_t cnt;
	
	if(num == 2)
    28de:	82 30       	cpi	r24, 0x02	; 2
    28e0:	89 f4       	brne	.+34     	; 0x2904 <PCserial_rxCBhandler+0x2a>
	{
		cli();
    28e2:	f8 94       	cli
		usart_PCinter.rxBuffer = PCinterRxBuffer;
    28e4:	8b e6       	ldi	r24, 0x6B	; 107
    28e6:	95 e2       	ldi	r25, 0x25	; 37
    28e8:	80 93 73 21 	sts	0x2173, r24
    28ec:	90 93 74 21 	sts	0x2174, r25
		usart_PCinter.rxPoW = PCinterRxBuffer;
    28f0:	80 93 75 21 	sts	0x2175, r24
    28f4:	90 93 76 21 	sts	0x2176, r25
		usart_PCinter.rxPoR = PCinterRxBuffer;
    28f8:	80 93 77 21 	sts	0x2177, r24
    28fc:	90 93 78 21 	sts	0x2178, r25
		sei();
    2900:	78 94       	sei
    2902:	0d c0       	rjmp	.+26     	; 0x291e <PCserial_rxCBhandler+0x44>
	}

	if(num == 13)
    2904:	8d 30       	cpi	r24, 0x0D	; 13
    2906:	59 f4       	brne	.+22     	; 0x291e <PCserial_rxCBhandler+0x44>
	{	
			
		
		//add a zero to the buffer to terminate the string
		usart_terminateRxWithNull(&usart_PCinter);
    2908:	c7 e5       	ldi	r28, 0x57	; 87
    290a:	d1 e2       	ldi	r29, 0x21	; 33
    290c:	ce 01       	movw	r24, r28
    290e:	5a db       	rcall	.-2380   	; 0x1fc4 <usart_terminateRxWithNull>
		
		newMsgFlag = true;
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	80 93 68 22 	sts	0x2268, r24
		usart_writeString(&usart_somfyDebug, &usart_PCinter.rxPoR);
		usart_writeByte(&usart_somfyDebug, '\r');
		usart_writeByte(&usart_somfyDebug, '\n');
#endif
				
		matchString((usart_readBytes(&usart_PCinter, 0)));
    2916:	ce 01       	movw	r24, r28
    2918:	60 e0       	ldi	r22, 0x00	; 0
    291a:	2a db       	rcall	.-2476   	; 0x1f70 <usart_readBytes>
    291c:	90 da       	rcall	.-2784   	; 0x1e3e <matchString>
	}	

}
    291e:	df 91       	pop	r29
    2920:	cf 91       	pop	r28
    2922:	08 95       	ret

00002924 <PCserial_statusCallBack>:

void PCserial_statusCallBack(uint8_t *data)
{

}
    2924:	08 95       	ret

00002926 <print_char_hex>:
#include "board.h"

static const char HEX_DIGITS[16] = "0123456789ABCDEF";
 
void print_char_hex(uint8_t num, uint8_t *buffer)
{
    2926:	df 93       	push	r29
    2928:	cf 93       	push	r28
    292a:	00 d0       	rcall	.+0      	; 0x292c <print_char_hex+0x6>
    292c:	cd b7       	in	r28, 0x3d	; 61
    292e:	de b7       	in	r29, 0x3e	; 62
    2930:	89 83       	std	Y+1, r24	; 0x01
    2932:	6a 83       	std	Y+2, r22	; 0x02
    2934:	7b 83       	std	Y+3, r23	; 0x03
	uint8_t x;
	
	buffer[2] = '\0';
    2936:	8a 81       	ldd	r24, Y+2	; 0x02
    2938:	9b 81       	ldd	r25, Y+3	; 0x03
    293a:	02 96       	adiw	r24, 0x02	; 2
    293c:	fc 01       	movw	r30, r24
    293e:	10 82       	st	Z, r1
	buffer[1] =  HEX_DIGITS[num & 0xf];
    2940:	8a 81       	ldd	r24, Y+2	; 0x02
    2942:	9b 81       	ldd	r25, Y+3	; 0x03
    2944:	01 96       	adiw	r24, 0x01	; 1
    2946:	29 81       	ldd	r18, Y+1	; 0x01
    2948:	22 2f       	mov	r18, r18
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	2f 70       	andi	r18, 0x0F	; 15
    294e:	30 70       	andi	r19, 0x00	; 0
    2950:	2e 5f       	subi	r18, 0xFE	; 254
    2952:	3d 4d       	sbci	r19, 0xDD	; 221
    2954:	f9 01       	movw	r30, r18
    2956:	20 81       	ld	r18, Z
    2958:	fc 01       	movw	r30, r24
    295a:	20 83       	st	Z, r18
	num >>= 4;
    295c:	89 81       	ldd	r24, Y+1	; 0x01
    295e:	82 95       	swap	r24
    2960:	8f 70       	andi	r24, 0x0F	; 15
    2962:	89 83       	std	Y+1, r24	; 0x01
	buffer[0] = HEX_DIGITS[num & 0xf];
    2964:	89 81       	ldd	r24, Y+1	; 0x01
    2966:	88 2f       	mov	r24, r24
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	8f 70       	andi	r24, 0x0F	; 15
    296c:	90 70       	andi	r25, 0x00	; 0
    296e:	8e 5f       	subi	r24, 0xFE	; 254
    2970:	9d 4d       	sbci	r25, 0xDD	; 221
    2972:	fc 01       	movw	r30, r24
    2974:	80 81       	ld	r24, Z
    2976:	28 2f       	mov	r18, r24
    2978:	8a 81       	ldd	r24, Y+2	; 0x02
    297a:	9b 81       	ldd	r25, Y+3	; 0x03
    297c:	fc 01       	movw	r30, r24
    297e:	20 83       	st	Z, r18
	
}
    2980:	23 96       	adiw	r28, 0x03	; 3
    2982:	cd bf       	out	0x3d, r28	; 61
    2984:	de bf       	out	0x3e, r29	; 62
    2986:	cf 91       	pop	r28
    2988:	df 91       	pop	r29
    298a:	08 95       	ret

0000298c <somfy_displayRxPktWithInvert>:
void somfy_displayRxPktWithInvert(somfy_packet_t *pkt)
{
    298c:	af 92       	push	r10
    298e:	bf 92       	push	r11
    2990:	cf 92       	push	r12
    2992:	df 92       	push	r13
    2994:	ff 92       	push	r15
    2996:	0f 93       	push	r16
    2998:	1f 93       	push	r17
    299a:	df 93       	push	r29
    299c:	cf 93       	push	r28
    299e:	cd b7       	in	r28, 0x3d	; 61
    29a0:	de b7       	in	r29, 0x3e	; 62
    29a2:	c4 56       	subi	r28, 0x64	; 100
    29a4:	d0 40       	sbci	r29, 0x00	; 0
    29a6:	cd bf       	out	0x3d, r28	; 61
    29a8:	de bf       	out	0x3e, r29	; 62
    29aa:	8c 01       	movw	r16, r24
	
	uint8_t i, temp, x = 0;
	size_t dataSentSize;
	uint8_t buffer[100];

	cli();	
    29ac:	f8 94       	cli
	uint8_t *ptr = pkt->packet;
	
	usart_writeString(&usart_somfyDebug, "<incoming packet:\>");
    29ae:	83 eb       	ldi	r24, 0xB3	; 179
    29b0:	91 e2       	ldi	r25, 0x21	; 33
    29b2:	60 e0       	ldi	r22, 0x00	; 0
    29b4:	70 e2       	ldi	r23, 0x20	; 32
    29b6:	02 dc       	rcall	.-2044   	; 0x21bc <usart_writeString>
	/* This goes through the packet an converts all the values to ASCII
	 */
	for (i = 0; i < pkt->packet_size; i++)
    29b8:	d8 01       	movw	r26, r16
    29ba:	58 96       	adiw	r26, 0x18	; 24
    29bc:	7c 91       	ld	r23, X
    29be:	58 97       	sbiw	r26, 0x18	; 24
    29c0:	77 23       	and	r23, r23
    29c2:	89 f1       	breq	.+98     	; 0x2a26 <somfy_displayRxPktWithInvert+0x9a>
	uint8_t i, temp, x = 0;
	size_t dataSentSize;
	uint8_t buffer[100];

	cli();	
	uint8_t *ptr = pkt->packet;
    29c4:	f0 2e       	mov	r15, r16
    29c6:	e0 2f       	mov	r30, r16
    29c8:	f1 2f       	mov	r31, r17
	}	
}
void somfy_displayRxPktWithInvert(somfy_packet_t *pkt)
{
	
	uint8_t i, temp, x = 0;
    29ca:	00 e0       	ldi	r16, 0x00	; 0
	{
		//get the next byte in the packet
		temp = ~(*ptr);
		ptr++;
		// Upper nibble
		buffer[x++] = nibble_to_ascii[(temp & 0xF0) >> 4];
    29cc:	ce 01       	movw	r24, r28
    29ce:	01 96       	adiw	r24, 0x01	; 1
    29d0:	2d e7       	ldi	r18, 0x7D	; 125
    29d2:	31 e2       	ldi	r19, 0x21	; 33
		// Lower nibble
		buffer[x++] = nibble_to_ascii[temp & 0x0F];
		buffer[x++] = ' ';
    29d4:	10 e2       	ldi	r17, 0x20	; 32
	/* This goes through the packet an converts all the values to ASCII
	 */
	for (i = 0; i < pkt->packet_size; i++)
	{
		//get the next byte in the packet
		temp = ~(*ptr);
    29d6:	61 91       	ld	r22, Z+
    29d8:	60 95       	com	r22
		ptr++;
		// Upper nibble
		buffer[x++] = nibble_to_ascii[(temp & 0xF0) >> 4];
    29da:	5c 01       	movw	r10, r24
    29dc:	a0 0e       	add	r10, r16
    29de:	b1 1c       	adc	r11, r1
    29e0:	46 2f       	mov	r20, r22
    29e2:	42 95       	swap	r20
    29e4:	4f 70       	andi	r20, 0x0F	; 15
    29e6:	69 01       	movw	r12, r18
    29e8:	c4 0e       	add	r12, r20
    29ea:	d1 1c       	adc	r13, r1
    29ec:	d6 01       	movw	r26, r12
    29ee:	4c 91       	ld	r20, X
    29f0:	d5 01       	movw	r26, r10
    29f2:	4c 93       	st	X, r20
		// Lower nibble
		buffer[x++] = nibble_to_ascii[temp & 0x0F];
    29f4:	40 2f       	mov	r20, r16
    29f6:	4f 5f       	subi	r20, 0xFF	; 255
    29f8:	5c 01       	movw	r10, r24
    29fa:	a4 0e       	add	r10, r20
    29fc:	b1 1c       	adc	r11, r1
    29fe:	6f 70       	andi	r22, 0x0F	; 15
    2a00:	a9 01       	movw	r20, r18
    2a02:	46 0f       	add	r20, r22
    2a04:	51 1d       	adc	r21, r1
    2a06:	da 01       	movw	r26, r20
    2a08:	4c 91       	ld	r20, X
    2a0a:	d5 01       	movw	r26, r10
    2a0c:	4c 93       	st	X, r20
		buffer[x++] = ' ';
    2a0e:	40 2f       	mov	r20, r16
    2a10:	4e 5f       	subi	r20, 0xFE	; 254
    2a12:	dc 01       	movw	r26, r24
    2a14:	a4 0f       	add	r26, r20
    2a16:	b1 1d       	adc	r27, r1
    2a18:	1c 93       	st	X, r17
    2a1a:	0d 5f       	subi	r16, 0xFD	; 253
	uint8_t *ptr = pkt->packet;
	
	usart_writeString(&usart_somfyDebug, "<incoming packet:\>");
	/* This goes through the packet an converts all the values to ASCII
	 */
	for (i = 0; i < pkt->packet_size; i++)
    2a1c:	4e 2f       	mov	r20, r30
    2a1e:	4f 19       	sub	r20, r15
    2a20:	47 17       	cp	r20, r23
    2a22:	c8 f2       	brcs	.-78     	; 0x29d6 <somfy_displayRxPktWithInvert+0x4a>
    2a24:	01 c0       	rjmp	.+2      	; 0x2a28 <somfy_displayRxPktWithInvert+0x9c>
	}	
}
void somfy_displayRxPktWithInvert(somfy_packet_t *pkt)
{
	
	uint8_t i, temp, x = 0;
    2a26:	00 e0       	ldi	r16, 0x00	; 0
		buffer[x++] = nibble_to_ascii[(temp & 0xF0) >> 4];
		// Lower nibble
		buffer[x++] = nibble_to_ascii[temp & 0x0F];
		buffer[x++] = ' ';
	}	
	buffer[x++] = '\r';
    2a28:	be 01       	movw	r22, r28
    2a2a:	6f 5f       	subi	r22, 0xFF	; 255
    2a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a2e:	fb 01       	movw	r30, r22
    2a30:	e0 0f       	add	r30, r16
    2a32:	f1 1d       	adc	r31, r1
    2a34:	8d e0       	ldi	r24, 0x0D	; 13
    2a36:	80 83       	st	Z, r24
    2a38:	0f 5f       	subi	r16, 0xFF	; 255
	buffer[x++] = '\n';
    2a3a:	fb 01       	movw	r30, r22
    2a3c:	e0 0f       	add	r30, r16
    2a3e:	f1 1d       	adc	r31, r1
    2a40:	8a e0       	ldi	r24, 0x0A	; 10
    2a42:	80 83       	st	Z, r24
    2a44:	0f 5f       	subi	r16, 0xFF	; 255
	buffer[x++] = '\0';
    2a46:	fb 01       	movw	r30, r22
    2a48:	e0 0f       	add	r30, r16
    2a4a:	f1 1d       	adc	r31, r1
    2a4c:	10 82       	st	Z, r1

	usart_writeString(&usart_somfyDebug, buffer);
    2a4e:	83 eb       	ldi	r24, 0xB3	; 179
    2a50:	91 e2       	ldi	r25, 0x21	; 33
    2a52:	b4 db       	rcall	.-2200   	; 0x21bc <usart_writeString>
			
	sei();
    2a54:	78 94       	sei
}
    2a56:	cc 59       	subi	r28, 0x9C	; 156
    2a58:	df 4f       	sbci	r29, 0xFF	; 255
    2a5a:	cd bf       	out	0x3d, r28	; 61
    2a5c:	de bf       	out	0x3e, r29	; 62
    2a5e:	cf 91       	pop	r28
    2a60:	df 91       	pop	r29
    2a62:	1f 91       	pop	r17
    2a64:	0f 91       	pop	r16
    2a66:	ff 90       	pop	r15
    2a68:	df 90       	pop	r13
    2a6a:	cf 90       	pop	r12
    2a6c:	bf 90       	pop	r11
    2a6e:	af 90       	pop	r10
    2a70:	08 95       	ret

00002a72 <somfy_Rx_data>:
    somfy_buildPkt(pkt);
	somfy_serial_Tx(pkt);
}

void somfy_Rx_data(uint8_t data)
{
    2a72:	0f 93       	push	r16
    2a74:	1f 93       	push	r17
    2a76:	df 93       	push	r29
    2a78:	cf 93       	push	r28
    2a7a:	cd b7       	in	r28, 0x3d	; 61
    2a7c:	de b7       	in	r29, 0x3e	; 62
    2a7e:	c4 56       	subi	r28, 0x64	; 100
    2a80:	d0 40       	sbci	r29, 0x00	; 0
    2a82:	cd bf       	out	0x3d, r28	; 61
    2a84:	de bf       	out	0x3e, r29	; 62
	running_Checksum += data;
    2a86:	48 2f       	mov	r20, r24
    2a88:	50 e0       	ldi	r21, 0x00	; 0
    2a8a:	60 91 8b 22 	lds	r22, 0x228B
    2a8e:	70 91 8c 22 	lds	r23, 0x228C
    2a92:	64 0f       	add	r22, r20
    2a94:	75 1f       	adc	r23, r21
    2a96:	60 93 8b 22 	sts	0x228B, r22
    2a9a:	70 93 8c 22 	sts	0x228C, r23
	
	switch(currentPktStage){
    2a9e:	20 91 8d 22 	lds	r18, 0x228D
    2aa2:	30 91 8e 22 	lds	r19, 0x228E
    2aa6:	23 30       	cpi	r18, 0x03	; 3
    2aa8:	31 05       	cpc	r19, r1
    2aaa:	09 f4       	brne	.+2      	; 0x2aae <somfy_Rx_data+0x3c>
    2aac:	67 c0       	rjmp	.+206    	; 0x2b7c <somfy_Rx_data+0x10a>
    2aae:	24 30       	cpi	r18, 0x04	; 4
    2ab0:	31 05       	cpc	r19, r1
    2ab2:	40 f4       	brcc	.+16     	; 0x2ac4 <somfy_Rx_data+0x52>
    2ab4:	21 30       	cpi	r18, 0x01	; 1
    2ab6:	31 05       	cpc	r19, r1
    2ab8:	31 f1       	breq	.+76     	; 0x2b06 <somfy_Rx_data+0x94>
    2aba:	22 30       	cpi	r18, 0x02	; 2
    2abc:	31 05       	cpc	r19, r1
    2abe:	08 f0       	brcs	.+2      	; 0x2ac2 <somfy_Rx_data+0x50>
    2ac0:	42 c0       	rjmp	.+132    	; 0x2b46 <somfy_Rx_data+0xd4>
    2ac2:	0d c0       	rjmp	.+26     	; 0x2ade <somfy_Rx_data+0x6c>
    2ac4:	25 30       	cpi	r18, 0x05	; 5
    2ac6:	31 05       	cpc	r19, r1
    2ac8:	09 f4       	brne	.+2      	; 0x2acc <somfy_Rx_data+0x5a>
    2aca:	af c0       	rjmp	.+350    	; 0x2c2a <somfy_Rx_data+0x1b8>
    2acc:	25 30       	cpi	r18, 0x05	; 5
    2ace:	31 05       	cpc	r19, r1
    2ad0:	08 f4       	brcc	.+2      	; 0x2ad4 <somfy_Rx_data+0x62>
    2ad2:	79 c0       	rjmp	.+242    	; 0x2bc6 <somfy_Rx_data+0x154>
    2ad4:	26 30       	cpi	r18, 0x06	; 6
    2ad6:	31 05       	cpc	r19, r1
    2ad8:	09 f0       	breq	.+2      	; 0x2adc <somfy_Rx_data+0x6a>
    2ada:	2e c1       	rjmp	.+604    	; 0x2d38 <somfy_Rx_data+0x2c6>
    2adc:	cf c0       	rjmp	.+414    	; 0x2c7c <somfy_Rx_data+0x20a>
		case WAITING_FOR_NEW_MSG:
			//reset the pointer of the packet
			data_pointer = incoming_pkt.packet;
			
			//put the data in the packet... The data still has not been inverted
			*data_pointer++ = data;
    2ade:	80 93 69 22 	sts	0x2269, r24
    2ae2:	2a e6       	ldi	r18, 0x6A	; 106
    2ae4:	32 e2       	ldi	r19, 0x22	; 34
    2ae6:	20 93 8f 22 	sts	0x228F, r18
    2aea:	30 93 90 22 	sts	0x2290, r19
			
			//put the inverted data in the msg tag of the structure
			incoming_pkt.msg = ~data & 0x00ff;
    2aee:	80 95       	com	r24
    2af0:	80 93 7e 22 	sts	0x227E, r24
    2af4:	10 92 7f 22 	sts	0x227F, r1
			
			//TODO check that it is valid msg
		//increment the stage for next data byte
		currentPktStage++;
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	80 93 8d 22 	sts	0x228D, r24
    2b00:	90 93 8e 22 	sts	0x228E, r25
		
		break;
    2b04:	19 c1       	rjmp	.+562    	; 0x2d38 <somfy_Rx_data+0x2c6>
		case WAITING_FOR_PACKET_SIZE:
			
			*data_pointer++ = data;
    2b06:	e0 91 8f 22 	lds	r30, 0x228F
    2b0a:	f0 91 90 22 	lds	r31, 0x2290
    2b0e:	81 93       	st	Z+, r24
    2b10:	e0 93 8f 22 	sts	0x228F, r30
    2b14:	f0 93 90 22 	sts	0x2290, r31
			incoming_pkt.packet_size = ~data;
    2b18:	80 95       	com	r24
    2b1a:	80 93 81 22 	sts	0x2281, r24
			incoming_pkt.data_size = incoming_pkt.packet_size - kminPacketSize;
    2b1e:	8b 50       	subi	r24, 0x0B	; 11
    2b20:	80 93 80 22 	sts	0x2280, r24
			
			if(incoming_pkt.packet_size < 11 || incoming_pkt.packet_size > 16)
    2b24:	86 30       	cpi	r24, 0x06	; 6
    2b26:	28 f0       	brcs	.+10     	; 0x2b32 <somfy_Rx_data+0xc0>
			{
#ifdef DEBUG_ERR
				usart_writeString(&usart_somfyDebug, "Incoming Packet out of size out of Range\r\n");
    2b28:	83 eb       	ldi	r24, 0xB3	; 179
    2b2a:	91 e2       	ldi	r25, 0x21	; 33
    2b2c:	63 e1       	ldi	r22, 0x13	; 19
    2b2e:	70 e2       	ldi	r23, 0x20	; 32
    2b30:	45 db       	rcall	.-2422   	; 0x21bc <usart_writeString>

#endif	
			}
		
		//increment the stage for next data byte
		currentPktStage++;	
    2b32:	80 91 8d 22 	lds	r24, 0x228D
    2b36:	90 91 8e 22 	lds	r25, 0x228E
    2b3a:	01 96       	adiw	r24, 0x01	; 1
    2b3c:	80 93 8d 22 	sts	0x228D, r24
    2b40:	90 93 8e 22 	sts	0x228E, r25
		
		break;
    2b44:	f9 c0       	rjmp	.+498    	; 0x2d38 <somfy_Rx_data+0x2c6>
		case WAITING_FOR_DIRECTION:
			*data_pointer++ = data;
    2b46:	e0 91 8f 22 	lds	r30, 0x228F
    2b4a:	f0 91 90 22 	lds	r31, 0x2290
    2b4e:	81 93       	st	Z+, r24
    2b50:	e0 93 8f 22 	sts	0x228F, r30
    2b54:	f0 93 90 22 	sts	0x2290, r31
			incoming_pkt.dir = ~data;
    2b58:	80 95       	com	r24
    2b5a:	80 93 82 22 	sts	0x2282, r24
			
			//increment the stage for next data byte
			currentPktStage++;	
    2b5e:	23 e0       	ldi	r18, 0x03	; 3
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	20 93 8d 22 	sts	0x228D, r18
    2b66:	30 93 8e 22 	sts	0x228E, r19
			
			if(incoming_pkt.dir != kReceivedPacket)
    2b6a:	80 32       	cpi	r24, 0x20	; 32
    2b6c:	09 f4       	brne	.+2      	; 0x2b70 <somfy_Rx_data+0xfe>
    2b6e:	e4 c0       	rjmp	.+456    	; 0x2d38 <somfy_Rx_data+0x2c6>
			{
#ifdef DEBUG_ERR
				usart_writeString(&usart_somfyDebug, "Incoming Packet direction is invalid\r\n");
    2b70:	83 eb       	ldi	r24, 0xB3	; 179
    2b72:	91 e2       	ldi	r25, 0x21	; 33
    2b74:	6e e3       	ldi	r22, 0x3E	; 62
    2b76:	70 e2       	ldi	r23, 0x20	; 32
    2b78:	21 db       	rcall	.-2494   	; 0x21bc <usart_writeString>
    2b7a:	de c0       	rjmp	.+444    	; 0x2d38 <somfy_Rx_data+0x2c6>

#endif				
			}
		break;
		case WAITING_FOR_SRC_ADDR:
			*data_pointer++ = data;
    2b7c:	20 91 8f 22 	lds	r18, 0x228F
    2b80:	30 91 90 22 	lds	r19, 0x2290
    2b84:	f9 01       	movw	r30, r18
    2b86:	81 93       	st	Z+, r24
    2b88:	e0 93 8f 22 	sts	0x228F, r30
    2b8c:	f0 93 90 22 	sts	0x2290, r31
			
			if((data_pointer-1) == &incoming_pkt.packet[5])
    2b90:	82 e2       	ldi	r24, 0x22	; 34
    2b92:	2e 36       	cpi	r18, 0x6E	; 110
    2b94:	38 07       	cpc	r19, r24
    2b96:	09 f0       	breq	.+2      	; 0x2b9a <somfy_Rx_data+0x128>
    2b98:	cf c0       	rjmp	.+414    	; 0x2d38 <somfy_Rx_data+0x2c6>
			{
				incoming_pkt.src.firstByte = ~incoming_pkt.packet[5];
    2b9a:	80 91 6e 22 	lds	r24, 0x226E
    2b9e:	80 95       	com	r24
    2ba0:	80 93 83 22 	sts	0x2283, r24
				incoming_pkt.src.secondByte = ~incoming_pkt.packet[4];
    2ba4:	80 91 6d 22 	lds	r24, 0x226D
    2ba8:	80 95       	com	r24
    2baa:	80 93 84 22 	sts	0x2284, r24
				incoming_pkt.src.thirdByte = ~incoming_pkt.packet[3];
    2bae:	80 91 6c 22 	lds	r24, 0x226C
    2bb2:	80 95       	com	r24
    2bb4:	80 93 85 22 	sts	0x2285, r24
				
				//increment the stage for next data byte
				currentPktStage++;	
    2bb8:	84 e0       	ldi	r24, 0x04	; 4
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	80 93 8d 22 	sts	0x228D, r24
    2bc0:	90 93 8e 22 	sts	0x228E, r25
    2bc4:	b9 c0       	rjmp	.+370    	; 0x2d38 <somfy_Rx_data+0x2c6>
			}
		break;
		case WAITING_FOR_DEST_ADDR:
			*data_pointer++ = data;
    2bc6:	20 91 8f 22 	lds	r18, 0x228F
    2bca:	30 91 90 22 	lds	r19, 0x2290
    2bce:	f9 01       	movw	r30, r18
    2bd0:	81 93       	st	Z+, r24
    2bd2:	e0 93 8f 22 	sts	0x228F, r30
    2bd6:	f0 93 90 22 	sts	0x2290, r31
			
			if((data_pointer-1) == &incoming_pkt.packet[8])
    2bda:	92 e2       	ldi	r25, 0x22	; 34
    2bdc:	21 37       	cpi	r18, 0x71	; 113
    2bde:	39 07       	cpc	r19, r25
    2be0:	a9 f4       	brne	.+42     	; 0x2c0c <somfy_Rx_data+0x19a>
			{
				incoming_pkt.dest.firstByte = ~incoming_pkt.packet[6];
    2be2:	80 91 6f 22 	lds	r24, 0x226F
    2be6:	80 95       	com	r24
    2be8:	80 93 86 22 	sts	0x2286, r24
				incoming_pkt.dest.secondByte = ~incoming_pkt.packet[7];
    2bec:	80 91 70 22 	lds	r24, 0x2270
    2bf0:	80 95       	com	r24
    2bf2:	80 93 87 22 	sts	0x2287, r24
				incoming_pkt.dest.thirdByte = ~incoming_pkt.packet[8];
    2bf6:	80 91 71 22 	lds	r24, 0x2271
    2bfa:	80 95       	com	r24
    2bfc:	80 93 88 22 	sts	0x2288, r24
				//increment the stage for next data byte
				currentPktStage++;
    2c00:	85 e0       	ldi	r24, 0x05	; 5
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	80 93 8d 22 	sts	0x228D, r24
    2c08:	90 93 8e 22 	sts	0x228E, r25
			}
			//If there is no data do an extra increment in the stages
			if(incoming_pkt.data_size == 0)
    2c0c:	80 91 80 22 	lds	r24, 0x2280
    2c10:	88 23       	and	r24, r24
    2c12:	09 f0       	breq	.+2      	; 0x2c16 <somfy_Rx_data+0x1a4>
    2c14:	91 c0       	rjmp	.+290    	; 0x2d38 <somfy_Rx_data+0x2c6>
			{
				currentPktStage++;
    2c16:	80 91 8d 22 	lds	r24, 0x228D
    2c1a:	90 91 8e 22 	lds	r25, 0x228E
    2c1e:	01 96       	adiw	r24, 0x01	; 1
    2c20:	80 93 8d 22 	sts	0x228D, r24
    2c24:	90 93 8e 22 	sts	0x228E, r25
    2c28:	87 c0       	rjmp	.+270    	; 0x2d38 <somfy_Rx_data+0x2c6>
			}

		break;
		case WAITING_FOR_DATA:
			*data_pointer++ = data;
    2c2a:	e0 91 8f 22 	lds	r30, 0x228F
    2c2e:	f0 91 90 22 	lds	r31, 0x2290
    2c32:	81 93       	st	Z+, r24
    2c34:	e0 93 8f 22 	sts	0x228F, r30
    2c38:	f0 93 90 22 	sts	0x2290, r31

			
			if(data_pointer == &incoming_pkt.packet[(9+incoming_pkt.data_size)])
    2c3c:	20 91 80 22 	lds	r18, 0x2280
    2c40:	82 2f       	mov	r24, r18
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	8e 58       	subi	r24, 0x8E	; 142
    2c46:	9d 4d       	sbci	r25, 0xDD	; 221
    2c48:	e8 17       	cp	r30, r24
    2c4a:	f9 07       	cpc	r31, r25
    2c4c:	09 f0       	breq	.+2      	; 0x2c50 <somfy_Rx_data+0x1de>
    2c4e:	74 c0       	rjmp	.+232    	; 0x2d38 <somfy_Rx_data+0x2c6>
			{
				for(uint8_t x = 0; x<incoming_pkt.data_size; x++)
    2c50:	22 23       	and	r18, r18
    2c52:	69 f0       	breq	.+26     	; 0x2c6e <somfy_Rx_data+0x1fc>
    2c54:	e2 e7       	ldi	r30, 0x72	; 114
    2c56:	f2 e2       	ldi	r31, 0x22	; 34
{
    somfy_buildPkt(pkt);
	somfy_serial_Tx(pkt);
}

void somfy_Rx_data(uint8_t data)
    2c58:	cf 01       	movw	r24, r30
    2c5a:	01 96       	adiw	r24, 0x01	; 1
    2c5c:	21 50       	subi	r18, 0x01	; 1
    2c5e:	82 0f       	add	r24, r18
    2c60:	91 1d       	adc	r25, r1
			
			if(data_pointer == &incoming_pkt.packet[(9+incoming_pkt.data_size)])
			{
				for(uint8_t x = 0; x<incoming_pkt.data_size; x++)
				{
					incoming_pkt.data[x] = ~incoming_pkt.packet[(9+x)];
    2c62:	21 91       	ld	r18, Z+
    2c64:	20 95       	com	r18
    2c66:	26 83       	std	Z+6, r18	; 0x06
			*data_pointer++ = data;

			
			if(data_pointer == &incoming_pkt.packet[(9+incoming_pkt.data_size)])
			{
				for(uint8_t x = 0; x<incoming_pkt.data_size; x++)
    2c68:	e8 17       	cp	r30, r24
    2c6a:	f9 07       	cpc	r31, r25
    2c6c:	d1 f7       	brne	.-12     	; 0x2c62 <somfy_Rx_data+0x1f0>
				{
					incoming_pkt.data[x] = ~incoming_pkt.packet[(9+x)];
				}
				//increment the stage for next data byte
				currentPktStage++;	
    2c6e:	86 e0       	ldi	r24, 0x06	; 6
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	80 93 8d 22 	sts	0x228D, r24
    2c76:	90 93 8e 22 	sts	0x228E, r25
    2c7a:	5e c0       	rjmp	.+188    	; 0x2d38 <somfy_Rx_data+0x2c6>
			}
		break;
		case WAITING_FOR_CHECKSUM:
			*data_pointer++ = data;
    2c7c:	e0 91 8f 22 	lds	r30, 0x228F
    2c80:	f0 91 90 22 	lds	r31, 0x2290
    2c84:	81 93       	st	Z+, r24
    2c86:	e0 93 8f 22 	sts	0x228F, r30
    2c8a:	f0 93 90 22 	sts	0x2290, r31
			running_Checksum -= data;
    2c8e:	64 1b       	sub	r22, r20
    2c90:	75 0b       	sbc	r23, r21
    2c92:	60 93 8b 22 	sts	0x228B, r22
    2c96:	70 93 8c 22 	sts	0x228C, r23
			if(data_pointer == &incoming_pkt.packet[incoming_pkt.packet_size])
    2c9a:	20 91 81 22 	lds	r18, 0x2281
    2c9e:	82 2f       	mov	r24, r18
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	87 59       	subi	r24, 0x97	; 151
    2ca4:	9d 4d       	sbci	r25, 0xDD	; 221
    2ca6:	e8 17       	cp	r30, r24
    2ca8:	f9 07       	cpc	r31, r25
    2caa:	09 f0       	breq	.+2      	; 0x2cae <somfy_Rx_data+0x23c>
    2cac:	45 c0       	rjmp	.+138    	; 0x2d38 <somfy_Rx_data+0x2c6>
			{
				MSB(incoming_pkt.checksum) = incoming_pkt.packet[incoming_pkt.packet_size - 2];
    2cae:	e9 e6       	ldi	r30, 0x69	; 105
    2cb0:	f2 e2       	ldi	r31, 0x22	; 34
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	12 97       	sbiw	r26, 0x02	; 2
    2cb6:	8c 91       	ld	r24, X
    2cb8:	80 93 8a 22 	sts	0x228A, r24
				LSB(incoming_pkt.checksum) = incoming_pkt.packet[incoming_pkt.packet_size - 1];
    2cbc:	80 8d       	ldd	r24, Z+24	; 0x18
    2cbe:	e8 0f       	add	r30, r24
    2cc0:	f1 1d       	adc	r31, r1
    2cc2:	31 97       	sbiw	r30, 0x01	; 1
    2cc4:	80 81       	ld	r24, Z
    2cc6:	80 93 89 22 	sts	0x2289, r24
				if(incoming_pkt.checksum != running_Checksum)
    2cca:	80 91 89 22 	lds	r24, 0x2289
    2cce:	90 91 8a 22 	lds	r25, 0x228A
    2cd2:	68 17       	cp	r22, r24
    2cd4:	79 07       	cpc	r23, r25
    2cd6:	11 f1       	breq	.+68     	; 0x2d1c <somfy_Rx_data+0x2aa>
				{
					uint8_t buff[100];
					sprintf(buff, "Checksum did not match %i != %i\r\n", incoming_pkt.checksum, running_Checksum);
    2cd8:	ad b7       	in	r26, 0x3d	; 61
    2cda:	be b7       	in	r27, 0x3e	; 62
    2cdc:	18 97       	sbiw	r26, 0x08	; 8
    2cde:	ad bf       	out	0x3d, r26	; 61
    2ce0:	be bf       	out	0x3e, r27	; 62
    2ce2:	ed b7       	in	r30, 0x3d	; 61
    2ce4:	fe b7       	in	r31, 0x3e	; 62
    2ce6:	31 96       	adiw	r30, 0x01	; 1
    2ce8:	8e 01       	movw	r16, r28
    2cea:	0f 5f       	subi	r16, 0xFF	; 255
    2cec:	1f 4f       	sbci	r17, 0xFF	; 255
    2cee:	11 96       	adiw	r26, 0x01	; 1
    2cf0:	0d 93       	st	X+, r16
    2cf2:	1c 93       	st	X, r17
    2cf4:	12 97       	sbiw	r26, 0x02	; 2
    2cf6:	25 e6       	ldi	r18, 0x65	; 101
    2cf8:	30 e2       	ldi	r19, 0x20	; 32
    2cfa:	22 83       	std	Z+2, r18	; 0x02
    2cfc:	33 83       	std	Z+3, r19	; 0x03
    2cfe:	84 83       	std	Z+4, r24	; 0x04
    2d00:	95 83       	std	Z+5, r25	; 0x05
    2d02:	66 83       	std	Z+6, r22	; 0x06
    2d04:	77 83       	std	Z+7, r23	; 0x07
    2d06:	7f d5       	rcall	.+2814   	; 0x3806 <sprintf>
					usart_writeString(&usart_somfyDebug, buff);
    2d08:	2d b7       	in	r18, 0x3d	; 61
    2d0a:	3e b7       	in	r19, 0x3e	; 62
    2d0c:	28 5f       	subi	r18, 0xF8	; 248
    2d0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d10:	2d bf       	out	0x3d, r18	; 61
    2d12:	3e bf       	out	0x3e, r19	; 62
    2d14:	83 eb       	ldi	r24, 0xB3	; 179
    2d16:	91 e2       	ldi	r25, 0x21	; 33
    2d18:	b8 01       	movw	r22, r16
    2d1a:	50 da       	rcall	.-2912   	; 0x21bc <usart_writeString>
				}
				currentPktStage = WAITING_FOR_NEW_MSG;
    2d1c:	10 92 8d 22 	sts	0x228D, r1
    2d20:	10 92 8e 22 	sts	0x228E, r1
		
#ifdef DEBUG_PKT_RX
				somfy_displayRxPktWithInvert(&incoming_pkt);
    2d24:	09 e6       	ldi	r16, 0x69	; 105
    2d26:	12 e2       	ldi	r17, 0x22	; 34
    2d28:	c8 01       	movw	r24, r16
    2d2a:	30 de       	rcall	.-928    	; 0x298c <somfy_displayRxPktWithInvert>
#endif
				//Send the fully transmitted and decoded packet on the update the status
				somfy_Rx_statusUpdate(&incoming_pkt);
    2d2c:	c8 01       	movw	r24, r16
    2d2e:	82 d2       	rcall	.+1284   	; 0x3234 <somfy_Rx_statusUpdate>
				running_Checksum = 0;
    2d30:	10 92 8b 22 	sts	0x228B, r1
    2d34:	10 92 8c 22 	sts	0x228C, r1
		default:
		break;
		
		
	}
}	
    2d38:	cc 59       	subi	r28, 0x9C	; 156
    2d3a:	df 4f       	sbci	r29, 0xFF	; 255
    2d3c:	cd bf       	out	0x3d, r28	; 61
    2d3e:	de bf       	out	0x3e, r29	; 62
    2d40:	cf 91       	pop	r28
    2d42:	df 91       	pop	r29
    2d44:	1f 91       	pop	r17
    2d46:	0f 91       	pop	r16
    2d48:	08 95       	ret

00002d4a <somfy_getChecksum>:
	return(running_Checksum == incoming_pkt.checksum);
}

/*\brief Calculates the check some of the packet*/
void somfy_getChecksum(somfy_packet_t *pkt)
{
    2d4a:	dc 01       	movw	r26, r24
	U16 sum = 0;
	
	U8 *ptr = pkt->packet;
	
	for(U8 x=0; x<(pkt->packet_size-2);x++)
    2d4c:	58 96       	adiw	r26, 0x18	; 24
    2d4e:	6c 91       	ld	r22, X
    2d50:	58 97       	sbiw	r26, 0x18	; 24
    2d52:	70 e0       	ldi	r23, 0x00	; 0
    2d54:	62 50       	subi	r22, 0x02	; 2
    2d56:	70 40       	sbci	r23, 0x00	; 0
    2d58:	16 16       	cp	r1, r22
    2d5a:	17 06       	cpc	r1, r23
    2d5c:	7c f4       	brge	.+30     	; 0x2d7c <somfy_getChecksum+0x32>
/*\brief Calculates the check some of the packet*/
void somfy_getChecksum(somfy_packet_t *pkt)
{
	U16 sum = 0;
	
	U8 *ptr = pkt->packet;
    2d5e:	98 2f       	mov	r25, r24
    2d60:	ea 2f       	mov	r30, r26
    2d62:	fb 2f       	mov	r31, r27
}

/*\brief Calculates the check some of the packet*/
void somfy_getChecksum(somfy_packet_t *pkt)
{
	U16 sum = 0;
    2d64:	20 e0       	ldi	r18, 0x00	; 0
    2d66:	30 e0       	ldi	r19, 0x00	; 0
	
	U8 *ptr = pkt->packet;
	
	for(U8 x=0; x<(pkt->packet_size-2);x++)
	{
		sum += (*ptr);
    2d68:	81 91       	ld	r24, Z+
    2d6a:	28 0f       	add	r18, r24
    2d6c:	31 1d       	adc	r19, r1
{
	U16 sum = 0;
	
	U8 *ptr = pkt->packet;
	
	for(U8 x=0; x<(pkt->packet_size-2);x++)
    2d6e:	4e 2f       	mov	r20, r30
    2d70:	49 1b       	sub	r20, r25
    2d72:	50 e0       	ldi	r21, 0x00	; 0
    2d74:	46 17       	cp	r20, r22
    2d76:	57 07       	cpc	r21, r23
    2d78:	bc f3       	brlt	.-18     	; 0x2d68 <somfy_getChecksum+0x1e>
    2d7a:	02 c0       	rjmp	.+4      	; 0x2d80 <somfy_getChecksum+0x36>
}

/*\brief Calculates the check some of the packet*/
void somfy_getChecksum(somfy_packet_t *pkt)
{
	U16 sum = 0;
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
	for(U8 x=0; x<(pkt->packet_size-2);x++)
	{
		sum += (*ptr);
		ptr++;
	}
	pkt->checksum = (sum);
    2d80:	90 96       	adiw	r26, 0x20	; 32
    2d82:	2d 93       	st	X+, r18
    2d84:	3c 93       	st	X, r19
    2d86:	91 97       	sbiw	r26, 0x21	; 33

}
    2d88:	08 95       	ret

00002d8a <somfy_buildPkt>:
{
	//I am using this function to send the packet to the proper somfy function
}

void somfy_buildPkt(somfy_packet_t *pkt)
{
    2d8a:	0f 93       	push	r16
    2d8c:	1f 93       	push	r17
    2d8e:	cf 93       	push	r28
    2d90:	df 93       	push	r29
    2d92:	ec 01       	movw	r28, r24

    uint8_t *ptr = pkt->packet;
    
    
	//Packet Type byte 0
	*ptr++ = ~(pkt->msg);
    2d94:	8d 89       	ldd	r24, Y+21	; 0x15
    2d96:	80 95       	com	r24
    2d98:	88 83       	st	Y, r24
    
    //Packet size byte 1
	pkt->packet_size = ((pkt->data_size + kminPacketSize));
    2d9a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d9c:	98 2f       	mov	r25, r24
    2d9e:	95 5f       	subi	r25, 0xF5	; 245
    2da0:	98 8f       	std	Y+24, r25	; 0x18
    *ptr++ = ~(pkt->packet_size);
    2da2:	90 95       	com	r25
    2da4:	99 83       	std	Y+1, r25	; 0x01
    
    //Packet Set packet as an output packet
    //byte 2
    *ptr++ = ~(kSendPacket);
    2da6:	9d ef       	ldi	r25, 0xFD	; 253
    2da8:	9a 83       	std	Y+2, r25	; 0x02
    
    //Packet source addr bytes 3-5
	
	*ptr++ = ~(LSB2(pkt->src));
    2daa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dac:	90 95       	com	r25
    2dae:	9b 83       	std	Y+3, r25	; 0x03
	*ptr++ = ~(LSB1(pkt->src));
    2db0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2db2:	90 95       	com	r25
    2db4:	9c 83       	std	Y+4, r25	; 0x04
	*ptr++ = ~(LSB0(pkt->src));
    2db6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2db8:	90 95       	com	r25
    2dba:	9d 83       	std	Y+5, r25	; 0x05
    
    //Packet Dest addr bytes 6-8
	*ptr++ = ~(LSB2(pkt->dest));
    2dbc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2dbe:	90 95       	com	r25
    2dc0:	9e 83       	std	Y+6, r25	; 0x06
	*ptr++ = ~(LSB1(pkt->dest));
    2dc2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dc4:	90 95       	com	r25
    2dc6:	9f 83       	std	Y+7, r25	; 0x07
	*ptr++ = ~(LSB0(pkt->dest));
    2dc8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2dca:	90 95       	com	r25
    2dcc:	98 87       	std	Y+8, r25	; 0x08
    2dce:	8e 01       	movw	r16, r28
    2dd0:	07 5f       	subi	r16, 0xF7	; 247
    2dd2:	1f 4f       	sbci	r17, 0xFF	; 255
    
    //Packet Data
    for(uint8_t x = 0;x<pkt->data_size;x++)
    2dd4:	88 23       	and	r24, r24
    2dd6:	79 f0       	breq	.+30     	; 0x2df6 <somfy_buildPkt+0x6c>
    2dd8:	f8 01       	movw	r30, r16
    2dda:	80 e0       	ldi	r24, 0x00	; 0
	{
        *ptr++ = ~(pkt->data[x]);
    2ddc:	de 01       	movw	r26, r28
    2dde:	a8 0f       	add	r26, r24
    2de0:	b1 1d       	adc	r27, r1
    2de2:	50 96       	adiw	r26, 0x10	; 16
    2de4:	9c 91       	ld	r25, X
    2de6:	50 97       	sbiw	r26, 0x10	; 16
    2de8:	90 95       	com	r25
    2dea:	91 93       	st	Z+, r25
    2dec:	8f 01       	movw	r16, r30
	*ptr++ = ~(LSB2(pkt->dest));
	*ptr++ = ~(LSB1(pkt->dest));
	*ptr++ = ~(LSB0(pkt->dest));
    
    //Packet Data
    for(uint8_t x = 0;x<pkt->data_size;x++)
    2dee:	8f 5f       	subi	r24, 0xFF	; 255
    2df0:	9f 89       	ldd	r25, Y+23	; 0x17
    2df2:	89 17       	cp	r24, r25
    2df4:	98 f3       	brcs	.-26     	; 0x2ddc <somfy_buildPkt+0x52>
	{
        *ptr++ = ~(pkt->data[x]);
    }
    
    somfy_getChecksum(pkt);
    2df6:	ce 01       	movw	r24, r28
    2df8:	a8 df       	rcall	.-176    	; 0x2d4a <somfy_getChecksum>
    
    //Packet Checksum
    *ptr++ = MSB(pkt->checksum);
    2dfa:	89 a1       	ldd	r24, Y+33	; 0x21
    2dfc:	f8 01       	movw	r30, r16
    2dfe:	80 83       	st	Z, r24
    *ptr++ = LSB(pkt->checksum);
    2e00:	88 a1       	ldd	r24, Y+32	; 0x20
    2e02:	81 83       	std	Z+1, r24	; 0x01
	
	
}
    2e04:	df 91       	pop	r29
    2e06:	cf 91       	pop	r28
    2e08:	1f 91       	pop	r17
    2e0a:	0f 91       	pop	r16
    2e0c:	08 95       	ret

00002e0e <somfy_Tx_pkt>:
static uint16_t running_Checksum = 0;
static enum incoming_stage currentPktStage = WAITING_FOR_NEW_MSG;
static uint8_t incomingBuffer[kmaxPacketSize];

void somfy_Tx_pkt(somfy_packet_t *pkt)
{
    2e0e:	cf 93       	push	r28
    2e10:	df 93       	push	r29
    2e12:	ec 01       	movw	r28, r24
    somfy_buildPkt(pkt);
    2e14:	ba df       	rcall	.-140    	; 0x2d8a <somfy_buildPkt>
	somfy_serial_Tx(pkt);
    2e16:	ce 01       	movw	r24, r28
    2e18:	57 d0       	rcall	.+174    	; 0x2ec8 <somfy_serial_Tx>
}
    2e1a:	df 91       	pop	r29
    2e1c:	cf 91       	pop	r28
    2e1e:	08 95       	ret

00002e20 <reportBackStatus>:
	pkt->checksum = (sum);

}

void reportBackStatus(uint8_t posPercent, somfyAddr_t *addr)
{
    2e20:	0f 93       	push	r16
    2e22:	1f 93       	push	r17
    2e24:	df 93       	push	r29
    2e26:	cf 93       	push	r28
    2e28:	cd b7       	in	r28, 0x3d	; 61
    2e2a:	de b7       	in	r29, 0x3e	; 62
    2e2c:	e2 97       	sbiw	r28, 0x32	; 50
    2e2e:	cd bf       	out	0x3d, r28	; 61
    2e30:	de bf       	out	0x3e, r29	; 62
		uint8_t buf[50];
		uint8_t len, temp = 50;
	
		len = sprintf(buf, "OK %i %i %i LEVEL %i \r\n", addr->firstByte, addr->secondByte, addr->thirdByte, posPercent);
    2e32:	2d b7       	in	r18, 0x3d	; 61
    2e34:	3e b7       	in	r19, 0x3e	; 62
    2e36:	2c 50       	subi	r18, 0x0C	; 12
    2e38:	30 40       	sbci	r19, 0x00	; 0
    2e3a:	2d bf       	out	0x3d, r18	; 61
    2e3c:	3e bf       	out	0x3e, r19	; 62
    2e3e:	ed b7       	in	r30, 0x3d	; 61
    2e40:	fe b7       	in	r31, 0x3e	; 62
    2e42:	31 96       	adiw	r30, 0x01	; 1
    2e44:	8e 01       	movw	r16, r28
    2e46:	0f 5f       	subi	r16, 0xFF	; 255
    2e48:	1f 4f       	sbci	r17, 0xFF	; 255
    2e4a:	ad b7       	in	r26, 0x3d	; 61
    2e4c:	be b7       	in	r27, 0x3e	; 62
    2e4e:	11 96       	adiw	r26, 0x01	; 1
    2e50:	0d 93       	st	X+, r16
    2e52:	1c 93       	st	X, r17
    2e54:	12 97       	sbiw	r26, 0x02	; 2
    2e56:	27 e8       	ldi	r18, 0x87	; 135
    2e58:	30 e2       	ldi	r19, 0x20	; 32
    2e5a:	22 83       	std	Z+2, r18	; 0x02
    2e5c:	33 83       	std	Z+3, r19	; 0x03
    2e5e:	db 01       	movw	r26, r22
    2e60:	9c 91       	ld	r25, X
    2e62:	94 83       	std	Z+4, r25	; 0x04
    2e64:	15 82       	std	Z+5, r1	; 0x05
    2e66:	11 96       	adiw	r26, 0x01	; 1
    2e68:	9c 91       	ld	r25, X
    2e6a:	11 97       	sbiw	r26, 0x01	; 1
    2e6c:	96 83       	std	Z+6, r25	; 0x06
    2e6e:	17 82       	std	Z+7, r1	; 0x07
    2e70:	12 96       	adiw	r26, 0x02	; 2
    2e72:	9c 91       	ld	r25, X
    2e74:	90 87       	std	Z+8, r25	; 0x08
    2e76:	11 86       	std	Z+9, r1	; 0x09
    2e78:	82 87       	std	Z+10, r24	; 0x0a
    2e7a:	13 86       	std	Z+11, r1	; 0x0b
    2e7c:	c4 d4       	rcall	.+2440   	; 0x3806 <sprintf>

#ifdef DEBUG_STATUS
		usart_writeString(&usart_somfyDebug, buf);
    2e7e:	2d b7       	in	r18, 0x3d	; 61
    2e80:	3e b7       	in	r19, 0x3e	; 62
    2e82:	24 5f       	subi	r18, 0xF4	; 244
    2e84:	3f 4f       	sbci	r19, 0xFF	; 255
    2e86:	2d bf       	out	0x3d, r18	; 61
    2e88:	3e bf       	out	0x3e, r19	; 62
    2e8a:	83 eb       	ldi	r24, 0xB3	; 179
    2e8c:	91 e2       	ldi	r25, 0x21	; 33
    2e8e:	b8 01       	movw	r22, r16
    2e90:	95 d9       	rcall	.-3286   	; 0x21bc <usart_writeString>
#endif


		usart_writeString(&usart_PCinter, buf);
    2e92:	87 e5       	ldi	r24, 0x57	; 87
    2e94:	91 e2       	ldi	r25, 0x21	; 33
    2e96:	b8 01       	movw	r22, r16
    2e98:	91 d9       	rcall	.-3294   	; 0x21bc <usart_writeString>
}
    2e9a:	e2 96       	adiw	r28, 0x32	; 50
    2e9c:	cd bf       	out	0x3d, r28	; 61
    2e9e:	de bf       	out	0x3e, r29	; 62
    2ea0:	cf 91       	pop	r28
    2ea2:	df 91       	pop	r29
    2ea4:	1f 91       	pop	r17
    2ea6:	0f 91       	pop	r16
    2ea8:	08 95       	ret

00002eaa <somfyDeviceTxCB>:

void somfyDeviceTxCB(uint8_t num)
{
	num = num;
	
	packet_tx_cnt_left--;
    2eaa:	80 91 91 22 	lds	r24, 0x2291
    2eae:	81 50       	subi	r24, 0x01	; 1
    2eb0:	80 93 91 22 	sts	0x2291, r24
	
	if(packet_tx_cnt_left == 0)
    2eb4:	88 23       	and	r24, r24
    2eb6:	29 f4       	brne	.+10     	; 0x2ec2 <somfyDeviceTxCB+0x18>
	{
		packets_waiting_to_transfer--;
    2eb8:	80 91 92 22 	lds	r24, 0x2292
    2ebc:	81 50       	subi	r24, 0x01	; 1
    2ebe:	80 93 92 22 	sts	0x2292, r24
    2ec2:	08 95       	ret

00002ec4 <somfyDeviceRxCB>:
	}
}	

void somfyDeviceRxCB(uint8_t num)
{
	somfy_Rx_data(num);
    2ec4:	d6 cd       	rjmp	.-1108   	; 0x2a72 <somfy_Rx_data>
	usart_writeString(&usart_somfyDebug, buffer);
	
	// Add a space after the byte
	usart_writeByte(&usart_somfyDebug, ' ');*/
	
}
    2ec6:	08 95       	ret

00002ec8 <somfy_serial_Tx>:


}

void somfy_serial_Tx(somfy_packet_t *pkt)
{
    2ec8:	bc 01       	movw	r22, r24
	packet_tx_cnt_left = pkt->packet_size;
    2eca:	fc 01       	movw	r30, r24
    2ecc:	40 8d       	ldd	r20, Z+24	; 0x18
    2ece:	40 93 91 22 	sts	0x2291, r20
	packets_waiting_to_transfer++;
    2ed2:	80 91 92 22 	lds	r24, 0x2292
    2ed6:	8f 5f       	subi	r24, 0xFF	; 255
    2ed8:	80 93 92 22 	sts	0x2292, r24
	
	usart_writeByteArray(&usart_somfyDevice, pkt->packet, pkt->packet_size);
    2edc:	8d e8       	ldi	r24, 0x8D	; 141
    2ede:	91 e2       	ldi	r25, 0x21	; 33
    2ee0:	50 e0       	ldi	r21, 0x00	; 0
}
    2ee2:	18 c9       	rjmp	.-3536   	; 0x2114 <usart_writeByteArray>

00002ee4 <somfy_debug_TxPgmMem>:

void somfy_debug_TxPgmMem(PROGMEM_STRING_T str)
{
    2ee4:	0f 93       	push	r16
    2ee6:	1f 93       	push	r17
    2ee8:	cf 93       	push	r28
    2eea:	df 93       	push	r29
    2eec:	ec 01       	movw	r28, r24
	cli();
    2eee:	f8 94       	cli
	while(PROGMEM_READ_BYTE(str))
    2ef0:	bc 01       	movw	r22, r24
    2ef2:	fc 01       	movw	r30, r24
    2ef4:	84 91       	lpm	r24, Z+
    2ef6:	88 23       	and	r24, r24
    2ef8:	61 f0       	breq	.+24     	; 0x2f12 <somfy_debug_TxPgmMem+0x2e>
	{
		usart_writeByte(&usart_somfyDebug, PROGMEM_READ_BYTE(str++));
    2efa:	03 eb       	ldi	r16, 0xB3	; 179
    2efc:	11 e2       	ldi	r17, 0x21	; 33
    2efe:	21 96       	adiw	r28, 0x01	; 1
    2f00:	fb 01       	movw	r30, r22
    2f02:	64 91       	lpm	r22, Z+
    2f04:	c8 01       	movw	r24, r16
    2f06:	66 d9       	rcall	.-3380   	; 0x21d4 <usart_writeByte>
    2f08:	be 01       	movw	r22, r28
}

void somfy_debug_TxPgmMem(PROGMEM_STRING_T str)
{
	cli();
	while(PROGMEM_READ_BYTE(str))
    2f0a:	fe 01       	movw	r30, r28
    2f0c:	84 91       	lpm	r24, Z+
    2f0e:	88 23       	and	r24, r24
    2f10:	b1 f7       	brne	.-20     	; 0x2efe <somfy_debug_TxPgmMem+0x1a>
	{
		usart_writeByte(&usart_somfyDebug, PROGMEM_READ_BYTE(str++));
	}
	sei();
    2f12:	78 94       	sei
}
    2f14:	df 91       	pop	r29
    2f16:	cf 91       	pop	r28
    2f18:	1f 91       	pop	r17
    2f1a:	0f 91       	pop	r16
    2f1c:	08 95       	ret

00002f1e <somfy_display_packet_Tx>:


void somfy_display_packet_Tx(somfy_packet_t *pkt)
{
    2f1e:	6f 92       	push	r6
    2f20:	7f 92       	push	r7
    2f22:	8f 92       	push	r8
    2f24:	9f 92       	push	r9
    2f26:	bf 92       	push	r11
    2f28:	cf 92       	push	r12
    2f2a:	df 92       	push	r13
    2f2c:	ef 92       	push	r14
    2f2e:	ff 92       	push	r15
    2f30:	0f 93       	push	r16
    2f32:	1f 93       	push	r17
    2f34:	df 93       	push	r29
    2f36:	cf 93       	push	r28
    2f38:	cd b7       	in	r28, 0x3d	; 61
    2f3a:	de b7       	in	r29, 0x3e	; 62
    2f3c:	c4 56       	subi	r28, 0x64	; 100
    2f3e:	d0 40       	sbci	r29, 0x00	; 0
    2f40:	cd bf       	out	0x3d, r28	; 61
    2f42:	de bf       	out	0x3e, r29	; 62
    2f44:	7c 01       	movw	r14, r24
	uint8_t i, temp, *ptr, x = 0;
	size_t dataSentSize = 0;
	
	uint8_t buffer[100];
	
	ptr = pkt->packet;
    2f46:	8c 01       	movw	r16, r24
	
	dataSentSize += usart_writeString(&usart_somfyDebug, "<outgoing packet:>");
    2f48:	83 eb       	ldi	r24, 0xB3	; 179
    2f4a:	91 e2       	ldi	r25, 0x21	; 33
    2f4c:	6f e9       	ldi	r22, 0x9F	; 159
    2f4e:	70 e2       	ldi	r23, 0x20	; 32
    2f50:	35 d9       	rcall	.-3478   	; 0x21bc <usart_writeString>
	/* This goes through the packet an converts all the values to ASCII
	 */
	for (i = 0; i < pkt->packet_size; i++)
    2f52:	d7 01       	movw	r26, r14
    2f54:	58 96       	adiw	r26, 0x18	; 24
    2f56:	7c 91       	ld	r23, X
    2f58:	58 97       	sbiw	r26, 0x18	; 24
    2f5a:	77 23       	and	r23, r23
    2f5c:	a1 f1       	breq	.+104    	; 0x2fc6 <somfy_display_packet_Tx+0xa8>
    2f5e:	de 2c       	mov	r13, r14
    2f60:	ee 2d       	mov	r30, r14
    2f62:	ff 2d       	mov	r31, r15
}


void somfy_display_packet_Tx(somfy_packet_t *pkt)
{
	uint8_t i, temp, *ptr, x = 0;
    2f64:	cc 24       	eor	r12, r12
	for (i = 0; i < pkt->packet_size; i++)
	{
		//get the next byte in the packet
		temp = *ptr++;
		// Upper nibble
		buffer[x++] = nibble_to_ascii[(temp & 0xF0) >> 4];
    2f66:	ce 01       	movw	r24, r28
    2f68:	01 96       	adiw	r24, 0x01	; 1
    2f6a:	2d e7       	ldi	r18, 0x7D	; 125
    2f6c:	31 e2       	ldi	r19, 0x21	; 33
		// Lower nibble
		buffer[x++] = nibble_to_ascii[temp & 0x0F];
		buffer[x++] = ' ';
    2f6e:	bb 24       	eor	r11, r11
    2f70:	68 94       	set
    2f72:	b5 f8       	bld	r11, 5
	/* This goes through the packet an converts all the values to ASCII
	 */
	for (i = 0; i < pkt->packet_size; i++)
	{
		//get the next byte in the packet
		temp = *ptr++;
    2f74:	61 91       	ld	r22, Z+
    2f76:	8f 01       	movw	r16, r30
		// Upper nibble
		buffer[x++] = nibble_to_ascii[(temp & 0xF0) >> 4];
    2f78:	3c 01       	movw	r6, r24
    2f7a:	6c 0c       	add	r6, r12
    2f7c:	71 1c       	adc	r7, r1
    2f7e:	46 2f       	mov	r20, r22
    2f80:	42 95       	swap	r20
    2f82:	4f 70       	andi	r20, 0x0F	; 15
    2f84:	49 01       	movw	r8, r18
    2f86:	84 0e       	add	r8, r20
    2f88:	91 1c       	adc	r9, r1
    2f8a:	d4 01       	movw	r26, r8
    2f8c:	4c 91       	ld	r20, X
    2f8e:	d3 01       	movw	r26, r6
    2f90:	4c 93       	st	X, r20
		// Lower nibble
		buffer[x++] = nibble_to_ascii[temp & 0x0F];
    2f92:	4c 2d       	mov	r20, r12
    2f94:	4f 5f       	subi	r20, 0xFF	; 255
    2f96:	3c 01       	movw	r6, r24
    2f98:	64 0e       	add	r6, r20
    2f9a:	71 1c       	adc	r7, r1
    2f9c:	6f 70       	andi	r22, 0x0F	; 15
    2f9e:	a9 01       	movw	r20, r18
    2fa0:	46 0f       	add	r20, r22
    2fa2:	51 1d       	adc	r21, r1
    2fa4:	da 01       	movw	r26, r20
    2fa6:	4c 91       	ld	r20, X
    2fa8:	d3 01       	movw	r26, r6
    2faa:	4c 93       	st	X, r20
		buffer[x++] = ' ';
    2fac:	4c 2d       	mov	r20, r12
    2fae:	4e 5f       	subi	r20, 0xFE	; 254
    2fb0:	dc 01       	movw	r26, r24
    2fb2:	a4 0f       	add	r26, r20
    2fb4:	b1 1d       	adc	r27, r1
    2fb6:	bc 92       	st	X, r11
    2fb8:	b3 e0       	ldi	r27, 0x03	; 3
    2fba:	cb 0e       	add	r12, r27
	ptr = pkt->packet;
	
	dataSentSize += usart_writeString(&usart_somfyDebug, "<outgoing packet:>");
	/* This goes through the packet an converts all the values to ASCII
	 */
	for (i = 0; i < pkt->packet_size; i++)
    2fbc:	4e 2f       	mov	r20, r30
    2fbe:	4d 19       	sub	r20, r13
    2fc0:	47 17       	cp	r20, r23
    2fc2:	c0 f2       	brcs	.-80     	; 0x2f74 <somfy_display_packet_Tx+0x56>
    2fc4:	01 c0       	rjmp	.+2      	; 0x2fc8 <somfy_display_packet_Tx+0xaa>
}


void somfy_display_packet_Tx(somfy_packet_t *pkt)
{
	uint8_t i, temp, *ptr, x = 0;
    2fc6:	cc 24       	eor	r12, r12
		buffer[x++] = nibble_to_ascii[(temp & 0xF0) >> 4];
		// Lower nibble
		buffer[x++] = nibble_to_ascii[temp & 0x0F];
		buffer[x++] = ' ';
	}	
	buffer[x++] = '\r';
    2fc8:	be 01       	movw	r22, r28
    2fca:	6f 5f       	subi	r22, 0xFF	; 255
    2fcc:	7f 4f       	sbci	r23, 0xFF	; 255
    2fce:	fb 01       	movw	r30, r22
    2fd0:	ec 0d       	add	r30, r12
    2fd2:	f1 1d       	adc	r31, r1
    2fd4:	8d e0       	ldi	r24, 0x0D	; 13
    2fd6:	80 83       	st	Z, r24
    2fd8:	c3 94       	inc	r12
	buffer[x++] = '\n';
    2fda:	fb 01       	movw	r30, r22
    2fdc:	ec 0d       	add	r30, r12
    2fde:	f1 1d       	adc	r31, r1
    2fe0:	8a e0       	ldi	r24, 0x0A	; 10
    2fe2:	80 83       	st	Z, r24
    2fe4:	c3 94       	inc	r12
	buffer[x++] = '\0';
    2fe6:	fb 01       	movw	r30, r22
    2fe8:	ec 0d       	add	r30, r12
    2fea:	f1 1d       	adc	r31, r1
    2fec:	10 82       	st	Z, r1
	
	// Write the first packet
	dataSentSize += usart_writeString(&usart_somfyDebug, buffer);
    2fee:	0f 2e       	mov	r0, r31
    2ff0:	f3 eb       	ldi	r31, 0xB3	; 179
    2ff2:	cf 2e       	mov	r12, r31
    2ff4:	f1 e2       	ldi	r31, 0x21	; 33
    2ff6:	df 2e       	mov	r13, r31
    2ff8:	f0 2d       	mov	r31, r0
    2ffa:	c6 01       	movw	r24, r12
    2ffc:	df d8       	rcall	.-3650   	; 0x21bc <usart_writeString>
	
	// Start the second packet
	dataSentSize +=usart_writeString(&usart_somfyDebug, "<outgoing packet:inverted>");
    2ffe:	c6 01       	movw	r24, r12
    3000:	62 eb       	ldi	r22, 0xB2	; 178
    3002:	70 e2       	ldi	r23, 0x20	; 32
    3004:	db d8       	rcall	.-3658   	; 0x21bc <usart_writeString>
	
	// Reset the pointer to the front of the packet
	*ptr = pkt->packet;
    3006:	f8 01       	movw	r30, r16
    3008:	e0 82       	st	Z, r14
	x = 0;
	// Run through the packet but this time invert the values
	for (i = 0; i < pkt->packet_size; i++)
    300a:	d7 01       	movw	r26, r14
    300c:	58 96       	adiw	r26, 0x18	; 24
    300e:	6c 91       	ld	r22, X
    3010:	58 97       	sbiw	r26, 0x18	; 24
    3012:	66 23       	and	r22, r22
    3014:	31 f1       	breq	.+76     	; 0x3062 <somfy_display_packet_Tx+0x144>
    3016:	0e 2d       	mov	r16, r14
    3018:	fe 01       	movw	r30, r28
    301a:	31 96       	adiw	r30, 0x01	; 1
    301c:	ae 2d       	mov	r26, r14
    301e:	bf 2d       	mov	r27, r15
    3020:	6d 01       	movw	r12, r26
	// Start the second packet
	dataSentSize +=usart_writeString(&usart_somfyDebug, "<outgoing packet:inverted>");
	
	// Reset the pointer to the front of the packet
	*ptr = pkt->packet;
	x = 0;
    3022:	50 e0       	ldi	r21, 0x00	; 0
	{
		//get the next byte in the packet and invert it
		temp = ~(pkt->packet[i]);
		
		// Upper nibble
		buffer[x++] = nibble_to_ascii[(temp & 0xF0) >> 4];
    3024:	8d e7       	ldi	r24, 0x7D	; 125
    3026:	91 e2       	ldi	r25, 0x21	; 33
		// Lower nibble
		buffer[x++] = nibble_to_ascii[temp & 0x0F];
		buffer[x++] = ' ';
    3028:	70 e2       	ldi	r23, 0x20	; 32
	x = 0;
	// Run through the packet but this time invert the values
	for (i = 0; i < pkt->packet_size; i++)
	{
		//get the next byte in the packet and invert it
		temp = ~(pkt->packet[i]);
    302a:	d6 01       	movw	r26, r12
    302c:	4d 91       	ld	r20, X+
    302e:	6d 01       	movw	r12, r26
    3030:	40 95       	com	r20
		
		// Upper nibble
		buffer[x++] = nibble_to_ascii[(temp & 0xF0) >> 4];
    3032:	24 2f       	mov	r18, r20
    3034:	22 95       	swap	r18
    3036:	2f 70       	andi	r18, 0x0F	; 15
    3038:	4c 01       	movw	r8, r24
    303a:	82 0e       	add	r8, r18
    303c:	91 1c       	adc	r9, r1
    303e:	d4 01       	movw	r26, r8
    3040:	2c 91       	ld	r18, X
    3042:	20 83       	st	Z, r18
		// Lower nibble
		buffer[x++] = nibble_to_ascii[temp & 0x0F];
    3044:	4f 70       	andi	r20, 0x0F	; 15
    3046:	9c 01       	movw	r18, r24
    3048:	24 0f       	add	r18, r20
    304a:	31 1d       	adc	r19, r1
    304c:	d9 01       	movw	r26, r18
    304e:	2c 91       	ld	r18, X
    3050:	21 83       	std	Z+1, r18	; 0x01
		buffer[x++] = ' ';
    3052:	72 83       	std	Z+2, r23	; 0x02
    3054:	5d 5f       	subi	r21, 0xFD	; 253
    3056:	33 96       	adiw	r30, 0x03	; 3
	
	// Reset the pointer to the front of the packet
	*ptr = pkt->packet;
	x = 0;
	// Run through the packet but this time invert the values
	for (i = 0; i < pkt->packet_size; i++)
    3058:	2c 2d       	mov	r18, r12
    305a:	20 1b       	sub	r18, r16
    305c:	26 17       	cp	r18, r22
    305e:	28 f3       	brcs	.-54     	; 0x302a <somfy_display_packet_Tx+0x10c>
    3060:	01 c0       	rjmp	.+2      	; 0x3064 <somfy_display_packet_Tx+0x146>
	// Start the second packet
	dataSentSize +=usart_writeString(&usart_somfyDebug, "<outgoing packet:inverted>");
	
	// Reset the pointer to the front of the packet
	*ptr = pkt->packet;
	x = 0;
    3062:	50 e0       	ldi	r21, 0x00	; 0
		// Lower nibble
		buffer[x++] = nibble_to_ascii[temp & 0x0F];
		buffer[x++] = ' ';
	}
	
	buffer[x++] = '\r';
    3064:	be 01       	movw	r22, r28
    3066:	6f 5f       	subi	r22, 0xFF	; 255
    3068:	7f 4f       	sbci	r23, 0xFF	; 255
    306a:	fb 01       	movw	r30, r22
    306c:	e5 0f       	add	r30, r21
    306e:	f1 1d       	adc	r31, r1
    3070:	8d e0       	ldi	r24, 0x0D	; 13
    3072:	80 83       	st	Z, r24
    3074:	5f 5f       	subi	r21, 0xFF	; 255
	buffer[x++] = '\n';
    3076:	fb 01       	movw	r30, r22
    3078:	e5 0f       	add	r30, r21
    307a:	f1 1d       	adc	r31, r1
    307c:	8a e0       	ldi	r24, 0x0A	; 10
    307e:	80 83       	st	Z, r24
    3080:	5f 5f       	subi	r21, 0xFF	; 255
	buffer[x++] = '\0';
    3082:	fb 01       	movw	r30, r22
    3084:	e5 0f       	add	r30, r21
    3086:	f1 1d       	adc	r31, r1
    3088:	10 82       	st	Z, r1

		
	dataSentSize += usart_writeString(&usart_somfyDebug, buffer);
    308a:	83 eb       	ldi	r24, 0xB3	; 179
    308c:	91 e2       	ldi	r25, 0x21	; 33
    308e:	96 d8       	rcall	.-3796   	; 0x21bc <usart_writeString>

}
    3090:	cc 59       	subi	r28, 0x9C	; 156
    3092:	df 4f       	sbci	r29, 0xFF	; 255
    3094:	cd bf       	out	0x3d, r28	; 61
    3096:	de bf       	out	0x3e, r29	; 62
    3098:	cf 91       	pop	r28
    309a:	df 91       	pop	r29
    309c:	1f 91       	pop	r17
    309e:	0f 91       	pop	r16
    30a0:	ff 90       	pop	r15
    30a2:	ef 90       	pop	r14
    30a4:	df 90       	pop	r13
    30a6:	cf 90       	pop	r12
    30a8:	bf 90       	pop	r11
    30aa:	9f 90       	pop	r9
    30ac:	8f 90       	pop	r8
    30ae:	7f 90       	pop	r7
    30b0:	6f 90       	pop	r6
    30b2:	08 95       	ret

000030b4 <somfy_control_moveAbsPos>:

void somfy_control_moveAbsPos(somfyAddr_t addr, control_move_t *move)
{
    30b4:	0f 93       	push	r16
    30b6:	1f 93       	push	r17
    30b8:	df 93       	push	r29
    30ba:	cf 93       	push	r28
    30bc:	cd b7       	in	r28, 0x3d	; 61
    30be:	de b7       	in	r29, 0x3e	; 62
    30c0:	a8 97       	sbiw	r28, 0x28	; 40
    30c2:	cd bf       	out	0x3d, r28	; 61
    30c4:	de bf       	out	0x3e, r29	; 62
    30c6:	6e a3       	std	Y+38, r22	; 0x26
    30c8:	7f a3       	std	Y+39, r23	; 0x27
    30ca:	88 a7       	std	Y+40, r24	; 0x28
	somfy_packet_t pkt;
	pkt.msg = move_to_pos;
    30cc:	83 e0       	ldi	r24, 0x03	; 3
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	8e 8b       	std	Y+22, r24	; 0x16
    30d2:	9f 8b       	std	Y+23, r25	; 0x17
	
	//set the needed address
	struct somfyAddr src = kdefaultDevAddr; 
    30d4:	de 01       	movw	r26, r28
    30d6:	93 96       	adiw	r26, 0x23	; 35
    30d8:	e2 e1       	ldi	r30, 0x12	; 18
    30da:	f2 e2       	ldi	r31, 0x22	; 34
    30dc:	83 e0       	ldi	r24, 0x03	; 3
    30de:	01 90       	ld	r0, Z+
    30e0:	0d 92       	st	X+, r0
    30e2:	81 50       	subi	r24, 0x01	; 1
    30e4:	e1 f7       	brne	.-8      	; 0x30de <somfy_control_moveAbsPos+0x2a>
	pkt.src = src;
    30e6:	de 01       	movw	r26, r28
    30e8:	5b 96       	adiw	r26, 0x1b	; 27
    30ea:	fe 01       	movw	r30, r28
    30ec:	b3 96       	adiw	r30, 0x23	; 35
    30ee:	83 e0       	ldi	r24, 0x03	; 3
    30f0:	01 90       	ld	r0, Z+
    30f2:	0d 92       	st	X+, r0
    30f4:	81 50       	subi	r24, 0x01	; 1
    30f6:	e1 f7       	brne	.-8      	; 0x30f0 <somfy_control_moveAbsPos+0x3c>
	
	pkt.dest = addr;
    30f8:	de 01       	movw	r26, r28
    30fa:	5e 96       	adiw	r26, 0x1e	; 30
    30fc:	fe 01       	movw	r30, r28
    30fe:	b6 96       	adiw	r30, 0x26	; 38
    3100:	83 e0       	ldi	r24, 0x03	; 3
    3102:	01 90       	ld	r0, Z+
    3104:	0d 92       	st	X+, r0
    3106:	81 50       	subi	r24, 0x01	; 1
    3108:	e1 f7       	brne	.-8      	; 0x3102 <somfy_control_moveAbsPos+0x4e>
	
	//set the size of the packet being sent
	pkt.data[0] = move->moveTo;
    310a:	fa 01       	movw	r30, r20
    310c:	84 81       	ldd	r24, Z+4	; 0x04
    310e:	89 8b       	std	Y+17, r24	; 0x11

	//set the position
	pkt.data[1] = (move->value & 0xff);
    3110:	90 85       	ldd	r25, Z+8	; 0x08
    3112:	81 85       	ldd	r24, Z+9	; 0x09
    3114:	9a 8b       	std	Y+18, r25	; 0x12
	pkt.data[2] = (move->value >> 8) & 0xff;
    3116:	8b 8b       	std	Y+19, r24	; 0x13
	
	//dummy value
	pkt.data[3] = dnc;
    3118:	8f ef       	ldi	r24, 0xFF	; 255
    311a:	8c 8b       	std	Y+20, r24	; 0x14
	
	pkt.data_size = 4;
    311c:	84 e0       	ldi	r24, 0x04	; 4
    311e:	88 8f       	std	Y+24, r24	; 0x18
	
	somfy_Tx_pkt(&pkt);
    3120:	8e 01       	movw	r16, r28
    3122:	0f 5f       	subi	r16, 0xFF	; 255
    3124:	1f 4f       	sbci	r17, 0xFF	; 255
    3126:	c8 01       	movw	r24, r16
    3128:	72 de       	rcall	.-796    	; 0x2e0e <somfy_Tx_pkt>
	
	#ifdef DEBUG_MSG
	somfy_debug_TxPgmMem(ctrl_moveTo_dbg);
    312a:	8d e1       	ldi	r24, 0x1D	; 29
    312c:	92 e0       	ldi	r25, 0x02	; 2
    312e:	da de       	rcall	.-588    	; 0x2ee4 <somfy_debug_TxPgmMem>
	#endif
	#ifdef DEBUG_PKT_TX
	somfy_display_packet_Tx(&pkt);
    3130:	c8 01       	movw	r24, r16
    3132:	f5 de       	rcall	.-534    	; 0x2f1e <somfy_display_packet_Tx>
	#endif	
}
    3134:	a8 96       	adiw	r28, 0x28	; 40
    3136:	cd bf       	out	0x3d, r28	; 61
    3138:	de bf       	out	0x3e, r29	; 62
    313a:	cf 91       	pop	r28
    313c:	df 91       	pop	r29
    313e:	1f 91       	pop	r17
    3140:	0f 91       	pop	r16
    3142:	08 95       	ret

00003144 <somfyMotor_defaults_init>:
PROGMEM_DECLARE(const char, err_unknown_status[]) = "packet returned an unknown status packet type\r\n";
	
void somfyMotor_defaults_init(void)
{

		motors[0].addr.firstByte = 0x06;
    3144:	26 e0       	ldi	r18, 0x06	; 6
    3146:	20 93 93 24 	sts	0x2493, r18
		motors[0].addr.secondByte = 0x0f;
    314a:	8f e0       	ldi	r24, 0x0F	; 15
    314c:	80 93 94 24 	sts	0x2494, r24
		motors[0].addr.thirdByte = 0x0d;
    3150:	9d e0       	ldi	r25, 0x0D	; 13
    3152:	90 93 95 24 	sts	0x2495, r25
		
		motors[1].addr.firstByte = 0x06;
    3156:	20 93 db 24 	sts	0x24DB, r18
		motors[1].addr.secondByte = 0x0f;
    315a:	80 93 dc 24 	sts	0x24DC, r24
		motors[1].addr.thirdByte = 0x34;
    315e:	24 e3       	ldi	r18, 0x34	; 52
    3160:	20 93 dd 24 	sts	0x24DD, r18

		motors[2].addr.firstByte = 0x55;
    3164:	25 e5       	ldi	r18, 0x55	; 85
    3166:	20 93 23 25 	sts	0x2523, r18
		motors[2].addr.secondByte = 0x0f;
    316a:	80 93 24 25 	sts	0x2524, r24
		motors[2].addr.thirdByte = 0x0d;
    316e:	90 93 25 25 	sts	0x2525, r25
}
    3172:	08 95       	ret

00003174 <somfy_statusReq>:
	somfy_debug_TxPgmMem(tx_motor_position);
	#endif
}

void somfy_statusReq(somfyAddr_t addr, enum status_request req, uint8_t data)
{
    3174:	0f 93       	push	r16
    3176:	1f 93       	push	r17
    3178:	df 93       	push	r29
    317a:	cf 93       	push	r28
    317c:	cd b7       	in	r28, 0x3d	; 61
    317e:	de b7       	in	r29, 0x3e	; 62
    3180:	a8 97       	sbiw	r28, 0x28	; 40
    3182:	cd bf       	out	0x3d, r28	; 61
    3184:	de bf       	out	0x3e, r29	; 62
    3186:	6e a3       	std	Y+38, r22	; 0x26
    3188:	7f a3       	std	Y+39, r23	; 0x27
    318a:	88 a7       	std	Y+40, r24	; 0x28
	somfy_packet_t pkt;
	pkt.packet_size = 0;
    318c:	19 8e       	std	Y+25, r1	; 0x19
	//set packet type
	pkt.msg = req;
    318e:	4e 8b       	std	Y+22, r20	; 0x16
    3190:	5f 8b       	std	Y+23, r21	; 0x17
	
	//set destination addr
	pkt.dest = addr;
    3192:	de 01       	movw	r26, r28
    3194:	5e 96       	adiw	r26, 0x1e	; 30
    3196:	fe 01       	movw	r30, r28
    3198:	b6 96       	adiw	r30, 0x26	; 38
    319a:	83 e0       	ldi	r24, 0x03	; 3
    319c:	01 90       	ld	r0, Z+
    319e:	0d 92       	st	X+, r0
    31a0:	81 50       	subi	r24, 0x01	; 1
    31a2:	e1 f7       	brne	.-8      	; 0x319c <somfy_statusReq+0x28>
	
	//set source addr
	struct somfyAddr src = kdefaultDevAddr; pkt.src = src;
    31a4:	de 01       	movw	r26, r28
    31a6:	93 96       	adiw	r26, 0x23	; 35
    31a8:	e5 e1       	ldi	r30, 0x15	; 21
    31aa:	f2 e2       	ldi	r31, 0x22	; 34
    31ac:	83 e0       	ldi	r24, 0x03	; 3
    31ae:	01 90       	ld	r0, Z+
    31b0:	0d 92       	st	X+, r0
    31b2:	81 50       	subi	r24, 0x01	; 1
    31b4:	e1 f7       	brne	.-8      	; 0x31ae <somfy_statusReq+0x3a>
    31b6:	de 01       	movw	r26, r28
    31b8:	5b 96       	adiw	r26, 0x1b	; 27
    31ba:	fe 01       	movw	r30, r28
    31bc:	b3 96       	adiw	r30, 0x23	; 35
    31be:	83 e0       	ldi	r24, 0x03	; 3
    31c0:	01 90       	ld	r0, Z+
    31c2:	0d 92       	st	X+, r0
    31c4:	81 50       	subi	r24, 0x01	; 1
    31c6:	e1 f7       	brne	.-8      	; 0x31c0 <somfy_statusReq+0x4c>
		
	//set the size of the packet being sent
	pkt.data_size = 0;
    31c8:	18 8e       	std	Y+24, r1	; 0x18
	
	if((req == get_intermediate_pos)||(req == get_dry_contact_lock) || (req == get_factory_default_status))
    31ca:	45 32       	cpi	r20, 0x25	; 37
    31cc:	51 05       	cpc	r21, r1
    31ce:	31 f0       	breq	.+12     	; 0x31dc <somfy_statusReq+0x68>
    31d0:	47 32       	cpi	r20, 0x27	; 39
    31d2:	51 05       	cpc	r21, r1
    31d4:	19 f0       	breq	.+6      	; 0x31dc <somfy_statusReq+0x68>
    31d6:	4f 32       	cpi	r20, 0x2F	; 47
    31d8:	51 05       	cpc	r21, r1
    31da:	19 f4       	brne	.+6      	; 0x31e2 <somfy_statusReq+0x6e>
	{
		pkt.data[0] = data;
    31dc:	29 8b       	std	Y+17, r18	; 0x11
		pkt.data_size++;
    31de:	81 e0       	ldi	r24, 0x01	; 1
    31e0:	88 8f       	std	Y+24, r24	; 0x18
	}
	//send to the device
	somfy_Tx_pkt(&pkt);	
    31e2:	8e 01       	movw	r16, r28
    31e4:	0f 5f       	subi	r16, 0xFF	; 255
    31e6:	1f 4f       	sbci	r17, 0xFF	; 255
    31e8:	c8 01       	movw	r24, r16
    31ea:	11 de       	rcall	.-990    	; 0x2e0e <somfy_Tx_pkt>

	//Misc Debugging features

	#ifdef DEBUG_PKT_TX
	somfy_display_packet_Tx(&pkt);
    31ec:	c8 01       	movw	r24, r16
    31ee:	97 de       	rcall	.-722    	; 0x2f1e <somfy_display_packet_Tx>
	#endif	
}
    31f0:	a8 96       	adiw	r28, 0x28	; 40
    31f2:	cd bf       	out	0x3d, r28	; 61
    31f4:	de bf       	out	0x3e, r29	; 62
    31f6:	cf 91       	pop	r28
    31f8:	df 91       	pop	r29
    31fa:	1f 91       	pop	r17
    31fc:	0f 91       	pop	r16
    31fe:	08 95       	ret

00003200 <somfy_reqMotorPos>:
	somfy_reqMotorDCTlock(addr);
	while(!(flags)){;}*/
}

void somfy_reqMotorPos(somfyAddr_t addr)
{
    3200:	df 93       	push	r29
    3202:	cf 93       	push	r28
    3204:	00 d0       	rcall	.+0      	; 0x3206 <somfy_reqMotorPos+0x6>
    3206:	cd b7       	in	r28, 0x3d	; 61
    3208:	de b7       	in	r29, 0x3e	; 62
    320a:	69 83       	std	Y+1, r22	; 0x01
    320c:	7a 83       	std	Y+2, r23	; 0x02
    320e:	8b 83       	std	Y+3, r24	; 0x03
	somfy_statusReq(addr, get_position, 0);
    3210:	4c e0       	ldi	r20, 0x0C	; 12
    3212:	50 e0       	ldi	r21, 0x00	; 0
    3214:	20 e0       	ldi	r18, 0x00	; 0
    3216:	ae df       	rcall	.-164    	; 0x3174 <somfy_statusReq>
	
	flags.position_flag = true;
    3218:	80 91 6b 27 	lds	r24, 0x276B
    321c:	81 60       	ori	r24, 0x01	; 1
    321e:	80 93 6b 27 	sts	0x276B, r24
	
	//Misc Debugging features
	#ifdef DEBUG_MSG
	somfy_debug_TxPgmMem(tx_motor_position);
    3222:	8c ee       	ldi	r24, 0xEC	; 236
    3224:	92 e0       	ldi	r25, 0x02	; 2
    3226:	5e de       	rcall	.-836    	; 0x2ee4 <somfy_debug_TxPgmMem>
	#endif

}
    3228:	23 96       	adiw	r28, 0x03	; 3
    322a:	cd bf       	out	0x3d, r28	; 61
    322c:	de bf       	out	0x3e, r29	; 62
    322e:	cf 91       	pop	r28
    3230:	df 91       	pop	r29
    3232:	08 95       	ret

00003234 <somfy_Rx_statusUpdate>:
	somfy_display_packet_Tx(&pkt);
	#endif	
}

void somfy_Rx_statusUpdate(somfy_packet_t *pkt)
{
    3234:	af 92       	push	r10
    3236:	bf 92       	push	r11
    3238:	cf 92       	push	r12
    323a:	df 92       	push	r13
    323c:	ef 92       	push	r14
    323e:	ff 92       	push	r15
    3240:	0f 93       	push	r16
    3242:	1f 93       	push	r17
    3244:	df 93       	push	r29
    3246:	cf 93       	push	r28
    3248:	cd b7       	in	r28, 0x3d	; 61
    324a:	de b7       	in	r29, 0x3e	; 62
    324c:	c0 58       	subi	r28, 0x80	; 128
    324e:	d0 40       	sbci	r29, 0x00	; 0
    3250:	cd bf       	out	0x3d, r28	; 61
    3252:	de bf       	out	0x3e, r29	; 62
    3254:	8c 01       	movw	r16, r24
	uint8_t string[128];

	
	for(x=0; x<knumOfMotors; x++)
	{
		if((motors[x].addr.firstByte == pkt->src.firstByte) && (motors[x].addr.secondByte == pkt->src.secondByte) && (motors[x].addr.thirdByte == pkt->src.thirdByte))
    3256:	dc 01       	movw	r26, r24
    3258:	5a 96       	adiw	r26, 0x1a	; 26
    325a:	4c 91       	ld	r20, X
    325c:	5a 97       	sbiw	r26, 0x1a	; 26
    325e:	e3 e9       	ldi	r30, 0x93	; 147
    3260:	f4 e2       	ldi	r31, 0x24	; 36
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	90 e0       	ldi	r25, 0x00	; 0

void somfy_Rx_statusUpdate(somfy_packet_t *pkt)
{

	uint8_t x, i;
	somfy_motor_t *dev = NULL;
    3266:	ee 24       	eor	r14, r14
    3268:	ff 24       	eor	r15, r15
	uint8_t string[128];

	
	for(x=0; x<knumOfMotors; x++)
	{
		if((motors[x].addr.firstByte == pkt->src.firstByte) && (motors[x].addr.secondByte == pkt->src.secondByte) && (motors[x].addr.thirdByte == pkt->src.thirdByte))
    326a:	20 81       	ld	r18, Z
    326c:	24 17       	cp	r18, r20
    326e:	29 f5       	brne	.+74     	; 0x32ba <somfy_Rx_statusUpdate+0x86>
    3270:	31 81       	ldd	r19, Z+1	; 0x01
    3272:	d8 01       	movw	r26, r16
    3274:	5b 96       	adiw	r26, 0x1b	; 27
    3276:	2c 91       	ld	r18, X
    3278:	5b 97       	sbiw	r26, 0x1b	; 27
    327a:	32 17       	cp	r19, r18
    327c:	f1 f4       	brne	.+60     	; 0x32ba <somfy_Rx_statusUpdate+0x86>
    327e:	32 81       	ldd	r19, Z+2	; 0x02
    3280:	5c 96       	adiw	r26, 0x1c	; 28
    3282:	2c 91       	ld	r18, X
    3284:	5c 97       	sbiw	r26, 0x1c	; 28
    3286:	32 17       	cp	r19, r18
    3288:	c1 f4       	brne	.+48     	; 0x32ba <somfy_Rx_statusUpdate+0x86>
		{
			dev = &motors[x];
    328a:	9c 01       	movw	r18, r24
    328c:	22 0f       	add	r18, r18
    328e:	33 1f       	adc	r19, r19
    3290:	22 0f       	add	r18, r18
    3292:	33 1f       	adc	r19, r19
    3294:	22 0f       	add	r18, r18
    3296:	33 1f       	adc	r19, r19
    3298:	79 01       	movw	r14, r18
    329a:	ee 0c       	add	r14, r14
    329c:	ff 1c       	adc	r15, r15
    329e:	ee 0c       	add	r14, r14
    32a0:	ff 1c       	adc	r15, r15
    32a2:	ee 0c       	add	r14, r14
    32a4:	ff 1c       	adc	r15, r15
    32a6:	2e 0d       	add	r18, r14
    32a8:	3f 1d       	adc	r19, r15
    32aa:	0f 2e       	mov	r0, r31
    32ac:	f3 e9       	ldi	r31, 0x93	; 147
    32ae:	ef 2e       	mov	r14, r31
    32b0:	f4 e2       	ldi	r31, 0x24	; 36
    32b2:	ff 2e       	mov	r15, r31
    32b4:	f0 2d       	mov	r31, r0
    32b6:	e2 0e       	add	r14, r18
    32b8:	f3 1e       	adc	r15, r19
    32ba:	01 96       	adiw	r24, 0x01	; 1
    32bc:	e8 5b       	subi	r30, 0xB8	; 184
    32be:	ff 4f       	sbci	r31, 0xFF	; 255
	uint8_t x, i;
	somfy_motor_t *dev = NULL;
	uint8_t string[128];

	
	for(x=0; x<knumOfMotors; x++)
    32c0:	83 30       	cpi	r24, 0x03	; 3
    32c2:	91 05       	cpc	r25, r1
    32c4:	91 f6       	brne	.-92     	; 0x326a <somfy_Rx_statusUpdate+0x36>
		{
			dev = &motors[x];
		}
	}
	
	if(!dev)
    32c6:	e1 14       	cp	r14, r1
    32c8:	f1 04       	cpc	r15, r1
    32ca:	21 f4       	brne	.+8      	; 0x32d4 <somfy_Rx_statusUpdate+0xa0>
	{
		#ifdef DEBUG_ERR
		somfy_debug_TxPgmMem(err_no_dev);
    32cc:	8b e8       	ldi	r24, 0x8B	; 139
    32ce:	93 e0       	ldi	r25, 0x03	; 3
    32d0:	09 de       	rcall	.-1006   	; 0x2ee4 <somfy_debug_TxPgmMem>
		#endif
		return;
    32d2:	1d c2       	rjmp	.+1082   	; 0x370e <somfy_Rx_statusUpdate+0x4da>
	}
	
	switch (pkt->msg)
    32d4:	f8 01       	movw	r30, r16
    32d6:	85 89       	ldd	r24, Z+21	; 0x15
    32d8:	96 89       	ldd	r25, Z+22	; 0x16
    32da:	82 33       	cpi	r24, 0x32	; 50
    32dc:	91 05       	cpc	r25, r1
    32de:	09 f4       	brne	.+2      	; 0x32e2 <somfy_Rx_statusUpdate+0xae>
    32e0:	92 c0       	rjmp	.+292    	; 0x3406 <somfy_Rx_statusUpdate+0x1d2>
    32e2:	83 33       	cpi	r24, 0x33	; 51
    32e4:	91 05       	cpc	r25, r1
    32e6:	58 f4       	brcc	.+22     	; 0x32fe <somfy_Rx_statusUpdate+0xca>
    32e8:	8f 30       	cpi	r24, 0x0F	; 15
    32ea:	91 05       	cpc	r25, r1
    32ec:	a1 f1       	breq	.+104    	; 0x3356 <somfy_Rx_statusUpdate+0x122>
    32ee:	81 33       	cpi	r24, 0x31	; 49
    32f0:	91 05       	cpc	r25, r1
    32f2:	a9 f1       	breq	.+106    	; 0x335e <somfy_Rx_statusUpdate+0x12a>
    32f4:	8d 30       	cpi	r24, 0x0D	; 13
    32f6:	91 05       	cpc	r25, r1
    32f8:	09 f0       	breq	.+2      	; 0x32fc <somfy_Rx_statusUpdate+0xc8>
    32fa:	06 c2       	rjmp	.+1036   	; 0x3708 <somfy_Rx_statusUpdate+0x4d4>
    32fc:	15 c0       	rjmp	.+42     	; 0x3328 <somfy_Rx_statusUpdate+0xf4>
    32fe:	85 33       	cpi	r24, 0x35	; 53
    3300:	91 05       	cpc	r25, r1
    3302:	09 f4       	brne	.+2      	; 0x3306 <somfy_Rx_statusUpdate+0xd2>
    3304:	1b c1       	rjmp	.+566    	; 0x353c <somfy_Rx_statusUpdate+0x308>
    3306:	86 33       	cpi	r24, 0x36	; 54
    3308:	91 05       	cpc	r25, r1
    330a:	28 f4       	brcc	.+10     	; 0x3316 <somfy_Rx_statusUpdate+0xe2>
    330c:	83 33       	cpi	r24, 0x33	; 51
    330e:	91 05       	cpc	r25, r1
    3310:	09 f0       	breq	.+2      	; 0x3314 <somfy_Rx_statusUpdate+0xe0>
    3312:	fa c1       	rjmp	.+1012   	; 0x3708 <somfy_Rx_statusUpdate+0x4d4>
    3314:	be c0       	rjmp	.+380    	; 0x3492 <somfy_Rx_statusUpdate+0x25e>
    3316:	87 33       	cpi	r24, 0x37	; 55
    3318:	91 05       	cpc	r25, r1
    331a:	09 f4       	brne	.+2      	; 0x331e <somfy_Rx_statusUpdate+0xea>
    331c:	6b c1       	rjmp	.+726    	; 0x35f4 <somfy_Rx_statusUpdate+0x3c0>
    331e:	8f 33       	cpi	r24, 0x3F	; 63
    3320:	91 05       	cpc	r25, r1
    3322:	09 f0       	breq	.+2      	; 0x3326 <somfy_Rx_statusUpdate+0xf2>
    3324:	f1 c1       	rjmp	.+994    	; 0x3708 <somfy_Rx_statusUpdate+0x4d4>
    3326:	ab c1       	rjmp	.+854    	; 0x367e <somfy_Rx_statusUpdate+0x44a>
	{
	case status_position:
		#ifdef DEBUG_MSG
		somfy_debug_TxPgmMem(rx_motor_position);
    3328:	85 e4       	ldi	r24, 0x45	; 69
    332a:	92 e0       	ldi	r25, 0x02	; 2
    332c:	db dd       	rcall	.-1098   	; 0x2ee4 <somfy_debug_TxPgmMem>
		#endif
		
		dev->pulsesFromUpLimit = *((motor_pulses_t *)(&pkt->data[0]));
    332e:	d8 01       	movw	r26, r16
    3330:	50 96       	adiw	r26, 0x10	; 16
    3332:	8d 91       	ld	r24, X+
    3334:	9c 91       	ld	r25, X
    3336:	51 97       	sbiw	r26, 0x11	; 17
    3338:	f7 01       	movw	r30, r14
    333a:	81 8b       	std	Z+17, r24	; 0x11
    333c:	92 8b       	std	Z+18, r25	; 0x12
		dev->percentFromUpLimit = pkt->data[2];
    333e:	52 96       	adiw	r26, 0x12	; 18
    3340:	8c 91       	ld	r24, X
    3342:	52 97       	sbiw	r26, 0x12	; 18
    3344:	83 8b       	std	Z+19, r24	; 0x13
		dev->currentIP = pkt->data[3];
    3346:	53 96       	adiw	r26, 0x13	; 19
    3348:	9c 91       	ld	r25, X
    334a:	94 8b       	std	Z+20, r25	; 0x14
		
		reportBackStatus(dev->percentFromUpLimit, &pkt->src);
    334c:	b8 01       	movw	r22, r16
    334e:	66 5e       	subi	r22, 0xE6	; 230
    3350:	7f 4f       	sbci	r23, 0xFF	; 255
    3352:	66 dd       	rcall	.-1332   	; 0x2e20 <reportBackStatus>
		break;
    3354:	dc c1       	rjmp	.+952    	; 0x370e <somfy_Rx_statusUpdate+0x4da>
	
	case status_motor_status:
		#ifdef DEBUG_MSG
		somfy_debug_TxPgmMem(rx_motor_status);
    3356:	8b e5       	ldi	r24, 0x5B	; 91
    3358:	92 e0       	ldi	r25, 0x02	; 2
    335a:	c4 dd       	rcall	.-1144   	; 0x2ee4 <somfy_debug_TxPgmMem>
		#endif
		break;
    335c:	d8 c1       	rjmp	.+944    	; 0x370e <somfy_Rx_statusUpdate+0x4da>
	
	case status_limits:
	//Gather the limits
		dev->downLimit = *((motor_pulses_t *)(&pkt->data[2]));
    335e:	d8 01       	movw	r26, r16
    3360:	52 96       	adiw	r26, 0x12	; 18
    3362:	8d 91       	ld	r24, X+
    3364:	9c 91       	ld	r25, X
    3366:	53 97       	sbiw	r26, 0x13	; 19
    3368:	f7 01       	movw	r30, r14
    336a:	87 87       	std	Z+15, r24	; 0x0f
    336c:	90 8b       	std	Z+16, r25	; 0x10
		dev->upLimit = *((motor_pulses_t *)(&pkt->data[0]));
    336e:	50 96       	adiw	r26, 0x10	; 16
    3370:	8d 91       	ld	r24, X+
    3372:	9c 91       	ld	r25, X
    3374:	51 97       	sbiw	r26, 0x11	; 17
    3376:	85 87       	std	Z+13, r24	; 0x0d
    3378:	96 87       	std	Z+14, r25	; 0x0e
	
		#ifdef DEBUG_MSG
		somfy_debug_TxPgmMem(rx_motor_limits);
    337a:	8f e6       	ldi	r24, 0x6F	; 111
    337c:	92 e0       	ldi	r25, 0x02	; 2
    337e:	b2 dd       	rcall	.-1180   	; 0x2ee4 <somfy_debug_TxPgmMem>
		#endif
		
		//build the string to report back the limits
		sprintf(string, "LIMITS %i %i %i %i %i", pkt->src.firstByte, pkt->src.secondByte, pkt->src.thirdByte, dev->upLimit, dev->downLimit);
    3380:	8d b7       	in	r24, 0x3d	; 61
    3382:	9e b7       	in	r25, 0x3e	; 62
    3384:	0e 97       	sbiw	r24, 0x0e	; 14
    3386:	8d bf       	out	0x3d, r24	; 61
    3388:	9e bf       	out	0x3e, r25	; 62
    338a:	ed b7       	in	r30, 0x3d	; 61
    338c:	fe b7       	in	r31, 0x3e	; 62
    338e:	31 96       	adiw	r30, 0x01	; 1
    3390:	6e 01       	movw	r12, r28
    3392:	08 94       	sec
    3394:	c1 1c       	adc	r12, r1
    3396:	d1 1c       	adc	r13, r1
    3398:	ad b7       	in	r26, 0x3d	; 61
    339a:	be b7       	in	r27, 0x3e	; 62
    339c:	11 96       	adiw	r26, 0x01	; 1
    339e:	cd 92       	st	X+, r12
    33a0:	dc 92       	st	X, r13
    33a2:	12 97       	sbiw	r26, 0x02	; 2
    33a4:	8d ec       	ldi	r24, 0xCD	; 205
    33a6:	90 e2       	ldi	r25, 0x20	; 32
    33a8:	82 83       	std	Z+2, r24	; 0x02
    33aa:	93 83       	std	Z+3, r25	; 0x03
    33ac:	d8 01       	movw	r26, r16
    33ae:	5a 96       	adiw	r26, 0x1a	; 26
    33b0:	8c 91       	ld	r24, X
    33b2:	5a 97       	sbiw	r26, 0x1a	; 26
    33b4:	84 83       	std	Z+4, r24	; 0x04
    33b6:	15 82       	std	Z+5, r1	; 0x05
    33b8:	5b 96       	adiw	r26, 0x1b	; 27
    33ba:	8c 91       	ld	r24, X
    33bc:	5b 97       	sbiw	r26, 0x1b	; 27
    33be:	86 83       	std	Z+6, r24	; 0x06
    33c0:	17 82       	std	Z+7, r1	; 0x07
    33c2:	5c 96       	adiw	r26, 0x1c	; 28
    33c4:	8c 91       	ld	r24, X
    33c6:	80 87       	std	Z+8, r24	; 0x08
    33c8:	11 86       	std	Z+9, r1	; 0x09
    33ca:	d7 01       	movw	r26, r14
    33cc:	1d 96       	adiw	r26, 0x0d	; 13
    33ce:	8d 91       	ld	r24, X+
    33d0:	9c 91       	ld	r25, X
    33d2:	1e 97       	sbiw	r26, 0x0e	; 14
    33d4:	82 87       	std	Z+10, r24	; 0x0a
    33d6:	93 87       	std	Z+11, r25	; 0x0b
    33d8:	1f 96       	adiw	r26, 0x0f	; 15
    33da:	8d 91       	ld	r24, X+
    33dc:	9c 91       	ld	r25, X
    33de:	50 97       	sbiw	r26, 0x10	; 16
    33e0:	84 87       	std	Z+12, r24	; 0x0c
    33e2:	95 87       	std	Z+13, r25	; 0x0d
    33e4:	10 d2       	rcall	.+1056   	; 0x3806 <sprintf>
		
		#ifdef DEBUG_STATUS
		usart_writeString(&usart_somfyDebug, string);
    33e6:	ed b7       	in	r30, 0x3d	; 61
    33e8:	fe b7       	in	r31, 0x3e	; 62
    33ea:	3e 96       	adiw	r30, 0x0e	; 14
    33ec:	ed bf       	out	0x3d, r30	; 61
    33ee:	fe bf       	out	0x3e, r31	; 62
    33f0:	83 eb       	ldi	r24, 0xB3	; 179
    33f2:	91 e2       	ldi	r25, 0x21	; 33
    33f4:	b6 01       	movw	r22, r12
    33f6:	0e 94 de 10 	call	0x21bc	; 0x21bc <usart_writeString>
		#endif
		
		//send the string to the PC interface
		usart_writeString(&usart_PCinter, string);
    33fa:	87 e5       	ldi	r24, 0x57	; 87
    33fc:	91 e2       	ldi	r25, 0x21	; 33
    33fe:	b6 01       	movw	r22, r12
    3400:	0e 94 de 10 	call	0x21bc	; 0x21bc <usart_writeString>
		break;
    3404:	84 c1       	rjmp	.+776    	; 0x370e <somfy_Rx_statusUpdate+0x4da>
		
	case status_direction:
		
		dev->MLD = pkt->data[0];
    3406:	d8 01       	movw	r26, r16
    3408:	50 96       	adiw	r26, 0x10	; 16
    340a:	8c 91       	ld	r24, X
    340c:	f7 01       	movw	r30, r14
    340e:	83 87       	std	Z+11, r24	; 0x0b
    3410:	14 86       	std	Z+12, r1	; 0x0c
		
		#ifdef DEBUG_MSG
		somfy_debug_TxPgmMem(rx_motor_rotation);
    3412:	83 e8       	ldi	r24, 0x83	; 131
    3414:	92 e0       	ldi	r25, 0x02	; 2
    3416:	66 dd       	rcall	.-1332   	; 0x2ee4 <somfy_debug_TxPgmMem>
		#endif
		
		//build the string to report back the limits
		sprintf(string, "DIRECTION %i %i %i %i", pkt->src.firstByte, pkt->src.secondByte, pkt->src.thirdByte, dev->MLD);
    3418:	8d b7       	in	r24, 0x3d	; 61
    341a:	9e b7       	in	r25, 0x3e	; 62
    341c:	0c 97       	sbiw	r24, 0x0c	; 12
    341e:	8d bf       	out	0x3d, r24	; 61
    3420:	9e bf       	out	0x3e, r25	; 62
    3422:	ed b7       	in	r30, 0x3d	; 61
    3424:	fe b7       	in	r31, 0x3e	; 62
    3426:	31 96       	adiw	r30, 0x01	; 1
    3428:	6e 01       	movw	r12, r28
    342a:	08 94       	sec
    342c:	c1 1c       	adc	r12, r1
    342e:	d1 1c       	adc	r13, r1
    3430:	ad b7       	in	r26, 0x3d	; 61
    3432:	be b7       	in	r27, 0x3e	; 62
    3434:	11 96       	adiw	r26, 0x01	; 1
    3436:	cd 92       	st	X+, r12
    3438:	dc 92       	st	X, r13
    343a:	12 97       	sbiw	r26, 0x02	; 2
    343c:	83 ee       	ldi	r24, 0xE3	; 227
    343e:	90 e2       	ldi	r25, 0x20	; 32
    3440:	82 83       	std	Z+2, r24	; 0x02
    3442:	93 83       	std	Z+3, r25	; 0x03
    3444:	d8 01       	movw	r26, r16
    3446:	5a 96       	adiw	r26, 0x1a	; 26
    3448:	8c 91       	ld	r24, X
    344a:	5a 97       	sbiw	r26, 0x1a	; 26
    344c:	84 83       	std	Z+4, r24	; 0x04
    344e:	15 82       	std	Z+5, r1	; 0x05
    3450:	5b 96       	adiw	r26, 0x1b	; 27
    3452:	8c 91       	ld	r24, X
    3454:	5b 97       	sbiw	r26, 0x1b	; 27
    3456:	86 83       	std	Z+6, r24	; 0x06
    3458:	17 82       	std	Z+7, r1	; 0x07
    345a:	5c 96       	adiw	r26, 0x1c	; 28
    345c:	8c 91       	ld	r24, X
    345e:	80 87       	std	Z+8, r24	; 0x08
    3460:	11 86       	std	Z+9, r1	; 0x09
    3462:	d7 01       	movw	r26, r14
    3464:	1b 96       	adiw	r26, 0x0b	; 11
    3466:	8d 91       	ld	r24, X+
    3468:	9c 91       	ld	r25, X
    346a:	1c 97       	sbiw	r26, 0x0c	; 12
    346c:	82 87       	std	Z+10, r24	; 0x0a
    346e:	93 87       	std	Z+11, r25	; 0x0b
    3470:	ca d1       	rcall	.+916    	; 0x3806 <sprintf>
		
		#ifdef DEBUG_STATUS
		usart_writeString(&usart_somfyDebug, string);
    3472:	ed b7       	in	r30, 0x3d	; 61
    3474:	fe b7       	in	r31, 0x3e	; 62
    3476:	3c 96       	adiw	r30, 0x0c	; 12
    3478:	ed bf       	out	0x3d, r30	; 61
    347a:	fe bf       	out	0x3e, r31	; 62
    347c:	83 eb       	ldi	r24, 0xB3	; 179
    347e:	91 e2       	ldi	r25, 0x21	; 33
    3480:	b6 01       	movw	r22, r12
    3482:	0e 94 de 10 	call	0x21bc	; 0x21bc <usart_writeString>
		#endif
		
		//send the string to the PC interface
		usart_writeString(&usart_PCinter, string);
    3486:	87 e5       	ldi	r24, 0x57	; 87
    3488:	91 e2       	ldi	r25, 0x21	; 33
    348a:	b6 01       	movw	r22, r12
    348c:	0e 94 de 10 	call	0x21bc	; 0x21bc <usart_writeString>
		break;
    3490:	3e c1       	rjmp	.+636    	; 0x370e <somfy_Rx_statusUpdate+0x4da>
		
		break;
		
	case status_speed:
		dev->upSpeed = pkt->data[0];
    3492:	d8 01       	movw	r26, r16
    3494:	50 96       	adiw	r26, 0x10	; 16
    3496:	8c 91       	ld	r24, X
    3498:	50 97       	sbiw	r26, 0x10	; 16
    349a:	f7 01       	movw	r30, r14
    349c:	85 8b       	std	Z+21, r24	; 0x15
		dev->downSpeed = pkt->data[1];
    349e:	51 96       	adiw	r26, 0x11	; 17
    34a0:	8c 91       	ld	r24, X
    34a2:	51 97       	sbiw	r26, 0x11	; 17
    34a4:	86 8b       	std	Z+22, r24	; 0x16
		dev->slowSpeed = pkt->data[2];
    34a6:	52 96       	adiw	r26, 0x12	; 18
    34a8:	8c 91       	ld	r24, X
    34aa:	87 8b       	std	Z+23, r24	; 0x17
		
		#ifdef DEBUG_MSG
		somfy_debug_TxPgmMem(rx_motor_speed);
    34ac:	8a e9       	ldi	r24, 0x9A	; 154
    34ae:	92 e0       	ldi	r25, 0x02	; 2
    34b0:	19 dd       	rcall	.-1486   	; 0x2ee4 <somfy_debug_TxPgmMem>
		#endif
		
		//build the string to report back the limits
		sprintf(string, "DIRECTION %i %i %i %i %i %i", pkt->src.firstByte, pkt->src.secondByte, pkt->src.thirdByte, dev->upSpeed, dev->downSpeed, dev->slowSpeed);
    34b2:	8d b7       	in	r24, 0x3d	; 61
    34b4:	9e b7       	in	r25, 0x3e	; 62
    34b6:	40 97       	sbiw	r24, 0x10	; 16
    34b8:	8d bf       	out	0x3d, r24	; 61
    34ba:	9e bf       	out	0x3e, r25	; 62
    34bc:	ed b7       	in	r30, 0x3d	; 61
    34be:	fe b7       	in	r31, 0x3e	; 62
    34c0:	31 96       	adiw	r30, 0x01	; 1
    34c2:	6e 01       	movw	r12, r28
    34c4:	08 94       	sec
    34c6:	c1 1c       	adc	r12, r1
    34c8:	d1 1c       	adc	r13, r1
    34ca:	ad b7       	in	r26, 0x3d	; 61
    34cc:	be b7       	in	r27, 0x3e	; 62
    34ce:	11 96       	adiw	r26, 0x01	; 1
    34d0:	cd 92       	st	X+, r12
    34d2:	dc 92       	st	X, r13
    34d4:	12 97       	sbiw	r26, 0x02	; 2
    34d6:	89 ef       	ldi	r24, 0xF9	; 249
    34d8:	90 e2       	ldi	r25, 0x20	; 32
    34da:	82 83       	std	Z+2, r24	; 0x02
    34dc:	93 83       	std	Z+3, r25	; 0x03
    34de:	d8 01       	movw	r26, r16
    34e0:	5a 96       	adiw	r26, 0x1a	; 26
    34e2:	8c 91       	ld	r24, X
    34e4:	5a 97       	sbiw	r26, 0x1a	; 26
    34e6:	84 83       	std	Z+4, r24	; 0x04
    34e8:	15 82       	std	Z+5, r1	; 0x05
    34ea:	5b 96       	adiw	r26, 0x1b	; 27
    34ec:	8c 91       	ld	r24, X
    34ee:	5b 97       	sbiw	r26, 0x1b	; 27
    34f0:	86 83       	std	Z+6, r24	; 0x06
    34f2:	17 82       	std	Z+7, r1	; 0x07
    34f4:	5c 96       	adiw	r26, 0x1c	; 28
    34f6:	8c 91       	ld	r24, X
    34f8:	80 87       	std	Z+8, r24	; 0x08
    34fa:	11 86       	std	Z+9, r1	; 0x09
    34fc:	d7 01       	movw	r26, r14
    34fe:	55 96       	adiw	r26, 0x15	; 21
    3500:	8c 91       	ld	r24, X
    3502:	55 97       	sbiw	r26, 0x15	; 21
    3504:	82 87       	std	Z+10, r24	; 0x0a
    3506:	13 86       	std	Z+11, r1	; 0x0b
    3508:	56 96       	adiw	r26, 0x16	; 22
    350a:	8c 91       	ld	r24, X
    350c:	56 97       	sbiw	r26, 0x16	; 22
    350e:	84 87       	std	Z+12, r24	; 0x0c
    3510:	15 86       	std	Z+13, r1	; 0x0d
    3512:	57 96       	adiw	r26, 0x17	; 23
    3514:	8c 91       	ld	r24, X
    3516:	86 87       	std	Z+14, r24	; 0x0e
    3518:	17 86       	std	Z+15, r1	; 0x0f
    351a:	75 d1       	rcall	.+746    	; 0x3806 <sprintf>
		
		#ifdef DEBUG_STATUS
		usart_writeString(&usart_somfyDebug, string);
    351c:	ed b7       	in	r30, 0x3d	; 61
    351e:	fe b7       	in	r31, 0x3e	; 62
    3520:	70 96       	adiw	r30, 0x10	; 16
    3522:	ed bf       	out	0x3d, r30	; 61
    3524:	fe bf       	out	0x3e, r31	; 62
    3526:	83 eb       	ldi	r24, 0xB3	; 179
    3528:	91 e2       	ldi	r25, 0x21	; 33
    352a:	b6 01       	movw	r22, r12
    352c:	0e 94 de 10 	call	0x21bc	; 0x21bc <usart_writeString>
		#endif
		
		//send the string to the PC interface
		usart_writeString(&usart_PCinter, string);
    3530:	87 e5       	ldi	r24, 0x57	; 87
    3532:	91 e2       	ldi	r25, 0x21	; 33
    3534:	b6 01       	movw	r22, r12
    3536:	0e 94 de 10 	call	0x21bc	; 0x21bc <usart_writeString>
		
		break;
    353a:	e9 c0       	rjmp	.+466    	; 0x370e <somfy_Rx_statusUpdate+0x4da>
		
	case status_intermediate_pos:
		i = pkt->data[0];
		dev->ip[i].pulses =  *((motor_pulses_t *)(&pkt->data[1]));
    353c:	d8 01       	movw	r26, r16
    353e:	50 96       	adiw	r26, 0x10	; 16
    3540:	ac 90       	ld	r10, X
    3542:	50 97       	sbiw	r26, 0x10	; 16
    3544:	bb 24       	eor	r11, r11
    3546:	c5 01       	movw	r24, r10
    3548:	88 0f       	add	r24, r24
    354a:	99 1f       	adc	r25, r25
    354c:	8a 0d       	add	r24, r10
    354e:	9b 1d       	adc	r25, r11
    3550:	e8 0e       	add	r14, r24
    3552:	f9 1e       	adc	r15, r25
    3554:	51 96       	adiw	r26, 0x11	; 17
    3556:	8d 91       	ld	r24, X+
    3558:	9c 91       	ld	r25, X
    355a:	52 97       	sbiw	r26, 0x12	; 18
    355c:	f7 01       	movw	r30, r14
    355e:	80 8f       	std	Z+24, r24	; 0x18
    3560:	91 8f       	std	Z+25, r25	; 0x19
		dev->ip[i].percent_down =  pkt->data[3];
    3562:	53 96       	adiw	r26, 0x13	; 19
    3564:	8c 91       	ld	r24, X
    3566:	82 8f       	std	Z+26, r24	; 0x1a
	
		#ifdef DEBUG_MSG
		somfy_debug_TxPgmMem(rx_motor_position);
    3568:	85 e4       	ldi	r24, 0x45	; 69
    356a:	92 e0       	ldi	r25, 0x02	; 2
    356c:	bb dc       	rcall	.-1674   	; 0x2ee4 <somfy_debug_TxPgmMem>
		#endif
	

		//build the string to report back the limits
		sprintf(string, "DIRECTION %i %i %i %i %i %i", pkt->src.firstByte, pkt->src.secondByte, pkt->src.thirdByte, i, dev->ip[i].pulses, dev->ip[i].percent_down);
    356e:	8d b7       	in	r24, 0x3d	; 61
    3570:	9e b7       	in	r25, 0x3e	; 62
    3572:	40 97       	sbiw	r24, 0x10	; 16
    3574:	8d bf       	out	0x3d, r24	; 61
    3576:	9e bf       	out	0x3e, r25	; 62
    3578:	ed b7       	in	r30, 0x3d	; 61
    357a:	fe b7       	in	r31, 0x3e	; 62
    357c:	31 96       	adiw	r30, 0x01	; 1
    357e:	6e 01       	movw	r12, r28
    3580:	08 94       	sec
    3582:	c1 1c       	adc	r12, r1
    3584:	d1 1c       	adc	r13, r1
    3586:	ad b7       	in	r26, 0x3d	; 61
    3588:	be b7       	in	r27, 0x3e	; 62
    358a:	11 96       	adiw	r26, 0x01	; 1
    358c:	cd 92       	st	X+, r12
    358e:	dc 92       	st	X, r13
    3590:	12 97       	sbiw	r26, 0x02	; 2
    3592:	89 ef       	ldi	r24, 0xF9	; 249
    3594:	90 e2       	ldi	r25, 0x20	; 32
    3596:	82 83       	std	Z+2, r24	; 0x02
    3598:	93 83       	std	Z+3, r25	; 0x03
    359a:	d8 01       	movw	r26, r16
    359c:	5a 96       	adiw	r26, 0x1a	; 26
    359e:	8c 91       	ld	r24, X
    35a0:	5a 97       	sbiw	r26, 0x1a	; 26
    35a2:	84 83       	std	Z+4, r24	; 0x04
    35a4:	15 82       	std	Z+5, r1	; 0x05
    35a6:	5b 96       	adiw	r26, 0x1b	; 27
    35a8:	8c 91       	ld	r24, X
    35aa:	5b 97       	sbiw	r26, 0x1b	; 27
    35ac:	86 83       	std	Z+6, r24	; 0x06
    35ae:	17 82       	std	Z+7, r1	; 0x07
    35b0:	5c 96       	adiw	r26, 0x1c	; 28
    35b2:	8c 91       	ld	r24, X
    35b4:	80 87       	std	Z+8, r24	; 0x08
    35b6:	11 86       	std	Z+9, r1	; 0x09
    35b8:	a2 86       	std	Z+10, r10	; 0x0a
    35ba:	b3 86       	std	Z+11, r11	; 0x0b
    35bc:	d7 01       	movw	r26, r14
    35be:	58 96       	adiw	r26, 0x18	; 24
    35c0:	8d 91       	ld	r24, X+
    35c2:	9c 91       	ld	r25, X
    35c4:	59 97       	sbiw	r26, 0x19	; 25
    35c6:	84 87       	std	Z+12, r24	; 0x0c
    35c8:	95 87       	std	Z+13, r25	; 0x0d
    35ca:	5a 96       	adiw	r26, 0x1a	; 26
    35cc:	8c 91       	ld	r24, X
    35ce:	86 87       	std	Z+14, r24	; 0x0e
    35d0:	17 86       	std	Z+15, r1	; 0x0f
    35d2:	19 d1       	rcall	.+562    	; 0x3806 <sprintf>
		
		#ifdef DEBUG_STATUS
		usart_writeString(&usart_somfyDebug, string);
    35d4:	ed b7       	in	r30, 0x3d	; 61
    35d6:	fe b7       	in	r31, 0x3e	; 62
    35d8:	70 96       	adiw	r30, 0x10	; 16
    35da:	ed bf       	out	0x3d, r30	; 61
    35dc:	fe bf       	out	0x3e, r31	; 62
    35de:	83 eb       	ldi	r24, 0xB3	; 179
    35e0:	91 e2       	ldi	r25, 0x21	; 33
    35e2:	b6 01       	movw	r22, r12
    35e4:	0e 94 de 10 	call	0x21bc	; 0x21bc <usart_writeString>
		#endif
		
		//send the string to the PC interface
		usart_writeString(&usart_PCinter, string);
    35e8:	87 e5       	ldi	r24, 0x57	; 87
    35ea:	91 e2       	ldi	r25, 0x21	; 33
    35ec:	b6 01       	movw	r22, r12
    35ee:	0e 94 de 10 	call	0x21bc	; 0x21bc <usart_writeString>
		
		break;
    35f2:	8d c0       	rjmp	.+282    	; 0x370e <somfy_Rx_statusUpdate+0x4da>
		break;
		
	case status_dry_contact_lock:
		
		#ifdef DEBUG_MSG
		somfy_debug_TxPgmMem(rx_dct_lock);
    35f4:	85 ec       	ldi	r24, 0xC5	; 197
    35f6:	92 e0       	ldi	r25, 0x02	; 2
    35f8:	75 dc       	rcall	.-1814   	; 0x2ee4 <somfy_debug_TxPgmMem>
		#endif
		
		//build the string to report back the limits
		sprintf(string, "DRYCONTACTS %i %i %i %i %i %i", pkt->src.firstByte, pkt->src.secondByte, pkt->src.thirdByte, i, pkt->data[0], pkt->data[4]);
    35fa:	8d b7       	in	r24, 0x3d	; 61
    35fc:	9e b7       	in	r25, 0x3e	; 62
    35fe:	40 97       	sbiw	r24, 0x10	; 16
    3600:	8d bf       	out	0x3d, r24	; 61
    3602:	9e bf       	out	0x3e, r25	; 62
    3604:	ed b7       	in	r30, 0x3d	; 61
    3606:	fe b7       	in	r31, 0x3e	; 62
    3608:	31 96       	adiw	r30, 0x01	; 1
    360a:	7e 01       	movw	r14, r28
    360c:	08 94       	sec
    360e:	e1 1c       	adc	r14, r1
    3610:	f1 1c       	adc	r15, r1
    3612:	ad b7       	in	r26, 0x3d	; 61
    3614:	be b7       	in	r27, 0x3e	; 62
    3616:	11 96       	adiw	r26, 0x01	; 1
    3618:	ed 92       	st	X+, r14
    361a:	fc 92       	st	X, r15
    361c:	12 97       	sbiw	r26, 0x02	; 2
    361e:	85 e1       	ldi	r24, 0x15	; 21
    3620:	91 e2       	ldi	r25, 0x21	; 33
    3622:	82 83       	std	Z+2, r24	; 0x02
    3624:	93 83       	std	Z+3, r25	; 0x03
    3626:	d8 01       	movw	r26, r16
    3628:	5a 96       	adiw	r26, 0x1a	; 26
    362a:	8c 91       	ld	r24, X
    362c:	5a 97       	sbiw	r26, 0x1a	; 26
    362e:	84 83       	std	Z+4, r24	; 0x04
    3630:	15 82       	std	Z+5, r1	; 0x05
    3632:	5b 96       	adiw	r26, 0x1b	; 27
    3634:	8c 91       	ld	r24, X
    3636:	5b 97       	sbiw	r26, 0x1b	; 27
    3638:	86 83       	std	Z+6, r24	; 0x06
    363a:	17 82       	std	Z+7, r1	; 0x07
    363c:	5c 96       	adiw	r26, 0x1c	; 28
    363e:	8c 91       	ld	r24, X
    3640:	5c 97       	sbiw	r26, 0x1c	; 28
    3642:	80 87       	std	Z+8, r24	; 0x08
    3644:	11 86       	std	Z+9, r1	; 0x09
    3646:	12 86       	std	Z+10, r1	; 0x0a
    3648:	13 86       	std	Z+11, r1	; 0x0b
    364a:	50 96       	adiw	r26, 0x10	; 16
    364c:	8c 91       	ld	r24, X
    364e:	50 97       	sbiw	r26, 0x10	; 16
    3650:	84 87       	std	Z+12, r24	; 0x0c
    3652:	15 86       	std	Z+13, r1	; 0x0d
    3654:	54 96       	adiw	r26, 0x14	; 20
    3656:	8c 91       	ld	r24, X
    3658:	86 87       	std	Z+14, r24	; 0x0e
    365a:	17 86       	std	Z+15, r1	; 0x0f
    365c:	d4 d0       	rcall	.+424    	; 0x3806 <sprintf>
		
		#ifdef DEBUG_STATUS
		usart_writeString(&usart_somfyDebug, string);
    365e:	ed b7       	in	r30, 0x3d	; 61
    3660:	fe b7       	in	r31, 0x3e	; 62
    3662:	70 96       	adiw	r30, 0x10	; 16
    3664:	ed bf       	out	0x3d, r30	; 61
    3666:	fe bf       	out	0x3e, r31	; 62
    3668:	83 eb       	ldi	r24, 0xB3	; 179
    366a:	91 e2       	ldi	r25, 0x21	; 33
    366c:	b7 01       	movw	r22, r14
    366e:	0e 94 de 10 	call	0x21bc	; 0x21bc <usart_writeString>
		#endif
		
		//send the string to the PC interface
		usart_writeString(&usart_PCinter, string);
    3672:	87 e5       	ldi	r24, 0x57	; 87
    3674:	91 e2       	ldi	r25, 0x21	; 33
    3676:	b7 01       	movw	r22, r14
    3678:	0e 94 de 10 	call	0x21bc	; 0x21bc <usart_writeString>
		break;
    367c:	48 c0       	rjmp	.+144    	; 0x370e <somfy_Rx_statusUpdate+0x4da>
		
	case status_factory_default:
		#ifdef DEBUG_MSG
		somfy_debug_TxPgmMem(rx_fact_default);
    367e:	85 ed       	ldi	r24, 0xD5	; 213
    3680:	92 e0       	ldi	r25, 0x02	; 2
    3682:	30 dc       	rcall	.-1952   	; 0x2ee4 <somfy_debug_TxPgmMem>
		#endif
		
		//build the string to report back the limits
		sprintf(string, "DRYCONTACTS %i %i %i %i %i %i", pkt->src.firstByte, pkt->src.secondByte, pkt->src.thirdByte, i, pkt->data[0], pkt->data[1]);
    3684:	8d b7       	in	r24, 0x3d	; 61
    3686:	9e b7       	in	r25, 0x3e	; 62
    3688:	40 97       	sbiw	r24, 0x10	; 16
    368a:	8d bf       	out	0x3d, r24	; 61
    368c:	9e bf       	out	0x3e, r25	; 62
    368e:	ed b7       	in	r30, 0x3d	; 61
    3690:	fe b7       	in	r31, 0x3e	; 62
    3692:	31 96       	adiw	r30, 0x01	; 1
    3694:	7e 01       	movw	r14, r28
    3696:	08 94       	sec
    3698:	e1 1c       	adc	r14, r1
    369a:	f1 1c       	adc	r15, r1
    369c:	ad b7       	in	r26, 0x3d	; 61
    369e:	be b7       	in	r27, 0x3e	; 62
    36a0:	11 96       	adiw	r26, 0x01	; 1
    36a2:	ed 92       	st	X+, r14
    36a4:	fc 92       	st	X, r15
    36a6:	12 97       	sbiw	r26, 0x02	; 2
    36a8:	85 e1       	ldi	r24, 0x15	; 21
    36aa:	91 e2       	ldi	r25, 0x21	; 33
    36ac:	82 83       	std	Z+2, r24	; 0x02
    36ae:	93 83       	std	Z+3, r25	; 0x03
    36b0:	d8 01       	movw	r26, r16
    36b2:	5a 96       	adiw	r26, 0x1a	; 26
    36b4:	8c 91       	ld	r24, X
    36b6:	5a 97       	sbiw	r26, 0x1a	; 26
    36b8:	84 83       	std	Z+4, r24	; 0x04
    36ba:	15 82       	std	Z+5, r1	; 0x05
    36bc:	5b 96       	adiw	r26, 0x1b	; 27
    36be:	8c 91       	ld	r24, X
    36c0:	5b 97       	sbiw	r26, 0x1b	; 27
    36c2:	86 83       	std	Z+6, r24	; 0x06
    36c4:	17 82       	std	Z+7, r1	; 0x07
    36c6:	5c 96       	adiw	r26, 0x1c	; 28
    36c8:	8c 91       	ld	r24, X
    36ca:	5c 97       	sbiw	r26, 0x1c	; 28
    36cc:	80 87       	std	Z+8, r24	; 0x08
    36ce:	11 86       	std	Z+9, r1	; 0x09
    36d0:	12 86       	std	Z+10, r1	; 0x0a
    36d2:	13 86       	std	Z+11, r1	; 0x0b
    36d4:	50 96       	adiw	r26, 0x10	; 16
    36d6:	8c 91       	ld	r24, X
    36d8:	50 97       	sbiw	r26, 0x10	; 16
    36da:	84 87       	std	Z+12, r24	; 0x0c
    36dc:	15 86       	std	Z+13, r1	; 0x0d
    36de:	51 96       	adiw	r26, 0x11	; 17
    36e0:	8c 91       	ld	r24, X
    36e2:	86 87       	std	Z+14, r24	; 0x0e
    36e4:	17 86       	std	Z+15, r1	; 0x0f
    36e6:	8f d0       	rcall	.+286    	; 0x3806 <sprintf>
		
		#ifdef DEBUG_STATUS
		usart_writeString(&usart_somfyDebug, string);
    36e8:	ed b7       	in	r30, 0x3d	; 61
    36ea:	fe b7       	in	r31, 0x3e	; 62
    36ec:	70 96       	adiw	r30, 0x10	; 16
    36ee:	ed bf       	out	0x3d, r30	; 61
    36f0:	fe bf       	out	0x3e, r31	; 62
    36f2:	83 eb       	ldi	r24, 0xB3	; 179
    36f4:	91 e2       	ldi	r25, 0x21	; 33
    36f6:	b7 01       	movw	r22, r14
    36f8:	0e 94 de 10 	call	0x21bc	; 0x21bc <usart_writeString>
		#endif
		
		//send the string to the PC interface
		usart_writeString(&usart_PCinter, string);
    36fc:	87 e5       	ldi	r24, 0x57	; 87
    36fe:	91 e2       	ldi	r25, 0x21	; 33
    3700:	b7 01       	movw	r22, r14
    3702:	0e 94 de 10 	call	0x21bc	; 0x21bc <usart_writeString>
		break;
    3706:	03 c0       	rjmp	.+6      	; 0x370e <somfy_Rx_statusUpdate+0x4da>
		break;
		
	default:
		#ifdef DEBUG_ERR
		somfy_debug_TxPgmMem(err_unknown_status);	
    3708:	88 eb       	ldi	r24, 0xB8	; 184
    370a:	93 e0       	ldi	r25, 0x03	; 3
    370c:	eb db       	rcall	.-2090   	; 0x2ee4 <somfy_debug_TxPgmMem>
		break;

		
	
	}
    370e:	c0 58       	subi	r28, 0x80	; 128
    3710:	df 4f       	sbci	r29, 0xFF	; 255
    3712:	cd bf       	out	0x3d, r28	; 61
    3714:	de bf       	out	0x3e, r29	; 62
    3716:	cf 91       	pop	r28
    3718:	df 91       	pop	r29
    371a:	1f 91       	pop	r17
    371c:	0f 91       	pop	r16
    371e:	ff 90       	pop	r15
    3720:	ef 90       	pop	r14
    3722:	df 90       	pop	r13
    3724:	cf 90       	pop	r12
    3726:	bf 90       	pop	r11
    3728:	af 90       	pop	r10
    372a:	08 95       	ret

0000372c <temp_txCBhandler>:
};

void temp_txCBhandler(void)
{
	
}
    372c:	08 95       	ret

0000372e <temp_rxCBhandler>:
void temp_rxCBhandler(uint8_t num)
{
    372e:	df 93       	push	r29
    3730:	cf 93       	push	r28
    3732:	00 d0       	rcall	.+0      	; 0x3734 <temp_rxCBhandler+0x6>
    3734:	cd b7       	in	r28, 0x3d	; 61
    3736:	de b7       	in	r29, 0x3e	; 62
	uint8_t readString[3];
	
	print_char_hex(num, readString);
    3738:	be 01       	movw	r22, r28
    373a:	6f 5f       	subi	r22, 0xFF	; 255
    373c:	7f 4f       	sbci	r23, 0xFF	; 255
    373e:	f3 d8       	rcall	.-3610   	; 0x2926 <print_char_hex>
	//usart_writeString(&usart_somfyDebug, readString);

}
    3740:	23 96       	adiw	r28, 0x03	; 3
    3742:	cd bf       	out	0x3d, r28	; 61
    3744:	de bf       	out	0x3e, r29	; 62
    3746:	cf 91       	pop	r28
    3748:	df 91       	pop	r29
    374a:	08 95       	ret

0000374c <__udivmodsi4>:
    374c:	a1 e2       	ldi	r26, 0x21	; 33
    374e:	1a 2e       	mov	r1, r26
    3750:	aa 1b       	sub	r26, r26
    3752:	bb 1b       	sub	r27, r27
    3754:	fd 01       	movw	r30, r26
    3756:	0d c0       	rjmp	.+26     	; 0x3772 <__udivmodsi4_ep>

00003758 <__udivmodsi4_loop>:
    3758:	aa 1f       	adc	r26, r26
    375a:	bb 1f       	adc	r27, r27
    375c:	ee 1f       	adc	r30, r30
    375e:	ff 1f       	adc	r31, r31
    3760:	a2 17       	cp	r26, r18
    3762:	b3 07       	cpc	r27, r19
    3764:	e4 07       	cpc	r30, r20
    3766:	f5 07       	cpc	r31, r21
    3768:	20 f0       	brcs	.+8      	; 0x3772 <__udivmodsi4_ep>
    376a:	a2 1b       	sub	r26, r18
    376c:	b3 0b       	sbc	r27, r19
    376e:	e4 0b       	sbc	r30, r20
    3770:	f5 0b       	sbc	r31, r21

00003772 <__udivmodsi4_ep>:
    3772:	66 1f       	adc	r22, r22
    3774:	77 1f       	adc	r23, r23
    3776:	88 1f       	adc	r24, r24
    3778:	99 1f       	adc	r25, r25
    377a:	1a 94       	dec	r1
    377c:	69 f7       	brne	.-38     	; 0x3758 <__udivmodsi4_loop>
    377e:	60 95       	com	r22
    3780:	70 95       	com	r23
    3782:	80 95       	com	r24
    3784:	90 95       	com	r25
    3786:	9b 01       	movw	r18, r22
    3788:	ac 01       	movw	r20, r24
    378a:	bd 01       	movw	r22, r26
    378c:	cf 01       	movw	r24, r30
    378e:	08 95       	ret

00003790 <atoi>:
    3790:	fc 01       	movw	r30, r24
    3792:	88 27       	eor	r24, r24
    3794:	99 27       	eor	r25, r25
    3796:	e8 94       	clt
    3798:	21 91       	ld	r18, Z+
    379a:	20 32       	cpi	r18, 0x20	; 32
    379c:	e9 f3       	breq	.-6      	; 0x3798 <atoi+0x8>
    379e:	29 30       	cpi	r18, 0x09	; 9
    37a0:	10 f0       	brcs	.+4      	; 0x37a6 <atoi+0x16>
    37a2:	2e 30       	cpi	r18, 0x0E	; 14
    37a4:	c8 f3       	brcs	.-14     	; 0x3798 <atoi+0x8>
    37a6:	2b 32       	cpi	r18, 0x2B	; 43
    37a8:	39 f0       	breq	.+14     	; 0x37b8 <atoi+0x28>
    37aa:	2d 32       	cpi	r18, 0x2D	; 45
    37ac:	31 f4       	brne	.+12     	; 0x37ba <atoi+0x2a>
    37ae:	68 94       	set
    37b0:	03 c0       	rjmp	.+6      	; 0x37b8 <atoi+0x28>
    37b2:	21 d0       	rcall	.+66     	; 0x37f6 <__mulhi_const_10>
    37b4:	82 0f       	add	r24, r18
    37b6:	91 1d       	adc	r25, r1
    37b8:	21 91       	ld	r18, Z+
    37ba:	20 53       	subi	r18, 0x30	; 48
    37bc:	2a 30       	cpi	r18, 0x0A	; 10
    37be:	c8 f3       	brcs	.-14     	; 0x37b2 <atoi+0x22>
    37c0:	1e f4       	brtc	.+6      	; 0x37c8 <atoi+0x38>
    37c2:	90 95       	com	r25
    37c4:	81 95       	neg	r24
    37c6:	9f 4f       	sbci	r25, 0xFF	; 255
    37c8:	08 95       	ret

000037ca <memcmp>:
    37ca:	fb 01       	movw	r30, r22
    37cc:	dc 01       	movw	r26, r24
    37ce:	04 c0       	rjmp	.+8      	; 0x37d8 <memcmp+0xe>
    37d0:	8d 91       	ld	r24, X+
    37d2:	01 90       	ld	r0, Z+
    37d4:	80 19       	sub	r24, r0
    37d6:	21 f4       	brne	.+8      	; 0x37e0 <memcmp+0x16>
    37d8:	41 50       	subi	r20, 0x01	; 1
    37da:	50 40       	sbci	r21, 0x00	; 0
    37dc:	c8 f7       	brcc	.-14     	; 0x37d0 <memcmp+0x6>
    37de:	88 1b       	sub	r24, r24
    37e0:	99 0b       	sbc	r25, r25
    37e2:	08 95       	ret

000037e4 <memcpy>:
    37e4:	fb 01       	movw	r30, r22
    37e6:	dc 01       	movw	r26, r24
    37e8:	02 c0       	rjmp	.+4      	; 0x37ee <memcpy+0xa>
    37ea:	01 90       	ld	r0, Z+
    37ec:	0d 92       	st	X+, r0
    37ee:	41 50       	subi	r20, 0x01	; 1
    37f0:	50 40       	sbci	r21, 0x00	; 0
    37f2:	d8 f7       	brcc	.-10     	; 0x37ea <memcpy+0x6>
    37f4:	08 95       	ret

000037f6 <__mulhi_const_10>:
    37f6:	7a e0       	ldi	r23, 0x0A	; 10
    37f8:	97 9f       	mul	r25, r23
    37fa:	90 2d       	mov	r25, r0
    37fc:	87 9f       	mul	r24, r23
    37fe:	80 2d       	mov	r24, r0
    3800:	91 0d       	add	r25, r1
    3802:	11 24       	eor	r1, r1
    3804:	08 95       	ret

00003806 <sprintf>:
    3806:	0f 93       	push	r16
    3808:	1f 93       	push	r17
    380a:	df 93       	push	r29
    380c:	cf 93       	push	r28
    380e:	cd b7       	in	r28, 0x3d	; 61
    3810:	de b7       	in	r29, 0x3e	; 62
    3812:	2e 97       	sbiw	r28, 0x0e	; 14
    3814:	cd bf       	out	0x3d, r28	; 61
    3816:	de bf       	out	0x3e, r29	; 62
    3818:	0e 89       	ldd	r16, Y+22	; 0x16
    381a:	1f 89       	ldd	r17, Y+23	; 0x17
    381c:	86 e0       	ldi	r24, 0x06	; 6
    381e:	8c 83       	std	Y+4, r24	; 0x04
    3820:	09 83       	std	Y+1, r16	; 0x01
    3822:	1a 83       	std	Y+2, r17	; 0x02
    3824:	8f ef       	ldi	r24, 0xFF	; 255
    3826:	9f e7       	ldi	r25, 0x7F	; 127
    3828:	8d 83       	std	Y+5, r24	; 0x05
    382a:	9e 83       	std	Y+6, r25	; 0x06
    382c:	9e 01       	movw	r18, r28
    382e:	26 5e       	subi	r18, 0xE6	; 230
    3830:	3f 4f       	sbci	r19, 0xFF	; 255
    3832:	ce 01       	movw	r24, r28
    3834:	01 96       	adiw	r24, 0x01	; 1
    3836:	68 8d       	ldd	r22, Y+24	; 0x18
    3838:	79 8d       	ldd	r23, Y+25	; 0x19
    383a:	a9 01       	movw	r20, r18
    383c:	0d d0       	rcall	.+26     	; 0x3858 <vfprintf>
    383e:	ef 81       	ldd	r30, Y+7	; 0x07
    3840:	f8 85       	ldd	r31, Y+8	; 0x08
    3842:	e0 0f       	add	r30, r16
    3844:	f1 1f       	adc	r31, r17
    3846:	10 82       	st	Z, r1
    3848:	2e 96       	adiw	r28, 0x0e	; 14
    384a:	cd bf       	out	0x3d, r28	; 61
    384c:	de bf       	out	0x3e, r29	; 62
    384e:	cf 91       	pop	r28
    3850:	df 91       	pop	r29
    3852:	1f 91       	pop	r17
    3854:	0f 91       	pop	r16
    3856:	08 95       	ret

00003858 <vfprintf>:
    3858:	2f 92       	push	r2
    385a:	3f 92       	push	r3
    385c:	4f 92       	push	r4
    385e:	5f 92       	push	r5
    3860:	6f 92       	push	r6
    3862:	7f 92       	push	r7
    3864:	8f 92       	push	r8
    3866:	9f 92       	push	r9
    3868:	af 92       	push	r10
    386a:	bf 92       	push	r11
    386c:	cf 92       	push	r12
    386e:	df 92       	push	r13
    3870:	ef 92       	push	r14
    3872:	ff 92       	push	r15
    3874:	0f 93       	push	r16
    3876:	1f 93       	push	r17
    3878:	df 93       	push	r29
    387a:	cf 93       	push	r28
    387c:	cd b7       	in	r28, 0x3d	; 61
    387e:	de b7       	in	r29, 0x3e	; 62
    3880:	2c 97       	sbiw	r28, 0x0c	; 12
    3882:	cd bf       	out	0x3d, r28	; 61
    3884:	de bf       	out	0x3e, r29	; 62
    3886:	6c 01       	movw	r12, r24
    3888:	1b 01       	movw	r2, r22
    388a:	8a 01       	movw	r16, r20
    388c:	fc 01       	movw	r30, r24
    388e:	16 82       	std	Z+6, r1	; 0x06
    3890:	17 82       	std	Z+7, r1	; 0x07
    3892:	83 81       	ldd	r24, Z+3	; 0x03
    3894:	81 ff       	sbrs	r24, 1
    3896:	c4 c1       	rjmp	.+904    	; 0x3c20 <vfprintf+0x3c8>
    3898:	2e 01       	movw	r4, r28
    389a:	08 94       	sec
    389c:	41 1c       	adc	r4, r1
    389e:	51 1c       	adc	r5, r1
    38a0:	f6 01       	movw	r30, r12
    38a2:	93 81       	ldd	r25, Z+3	; 0x03
    38a4:	f1 01       	movw	r30, r2
    38a6:	93 fd       	sbrc	r25, 3
    38a8:	85 91       	lpm	r24, Z+
    38aa:	93 ff       	sbrs	r25, 3
    38ac:	81 91       	ld	r24, Z+
    38ae:	1f 01       	movw	r2, r30
    38b0:	88 23       	and	r24, r24
    38b2:	09 f4       	brne	.+2      	; 0x38b6 <vfprintf+0x5e>
    38b4:	b1 c1       	rjmp	.+866    	; 0x3c18 <vfprintf+0x3c0>
    38b6:	85 32       	cpi	r24, 0x25	; 37
    38b8:	39 f4       	brne	.+14     	; 0x38c8 <vfprintf+0x70>
    38ba:	93 fd       	sbrc	r25, 3
    38bc:	85 91       	lpm	r24, Z+
    38be:	93 ff       	sbrs	r25, 3
    38c0:	81 91       	ld	r24, Z+
    38c2:	1f 01       	movw	r2, r30
    38c4:	85 32       	cpi	r24, 0x25	; 37
    38c6:	21 f4       	brne	.+8      	; 0x38d0 <vfprintf+0x78>
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	b6 01       	movw	r22, r12
    38cc:	d8 d1       	rcall	.+944    	; 0x3c7e <fputc>
    38ce:	e8 cf       	rjmp	.-48     	; 0x38a0 <vfprintf+0x48>
    38d0:	ee 24       	eor	r14, r14
    38d2:	ff 24       	eor	r15, r15
    38d4:	20 e0       	ldi	r18, 0x00	; 0
    38d6:	20 32       	cpi	r18, 0x20	; 32
    38d8:	b0 f4       	brcc	.+44     	; 0x3906 <vfprintf+0xae>
    38da:	8b 32       	cpi	r24, 0x2B	; 43
    38dc:	69 f0       	breq	.+26     	; 0x38f8 <vfprintf+0xa0>
    38de:	8c 32       	cpi	r24, 0x2C	; 44
    38e0:	28 f4       	brcc	.+10     	; 0x38ec <vfprintf+0x94>
    38e2:	80 32       	cpi	r24, 0x20	; 32
    38e4:	51 f0       	breq	.+20     	; 0x38fa <vfprintf+0xa2>
    38e6:	83 32       	cpi	r24, 0x23	; 35
    38e8:	71 f4       	brne	.+28     	; 0x3906 <vfprintf+0xae>
    38ea:	0b c0       	rjmp	.+22     	; 0x3902 <vfprintf+0xaa>
    38ec:	8d 32       	cpi	r24, 0x2D	; 45
    38ee:	39 f0       	breq	.+14     	; 0x38fe <vfprintf+0xa6>
    38f0:	80 33       	cpi	r24, 0x30	; 48
    38f2:	49 f4       	brne	.+18     	; 0x3906 <vfprintf+0xae>
    38f4:	21 60       	ori	r18, 0x01	; 1
    38f6:	2c c0       	rjmp	.+88     	; 0x3950 <vfprintf+0xf8>
    38f8:	22 60       	ori	r18, 0x02	; 2
    38fa:	24 60       	ori	r18, 0x04	; 4
    38fc:	29 c0       	rjmp	.+82     	; 0x3950 <vfprintf+0xf8>
    38fe:	28 60       	ori	r18, 0x08	; 8
    3900:	27 c0       	rjmp	.+78     	; 0x3950 <vfprintf+0xf8>
    3902:	20 61       	ori	r18, 0x10	; 16
    3904:	25 c0       	rjmp	.+74     	; 0x3950 <vfprintf+0xf8>
    3906:	27 fd       	sbrc	r18, 7
    3908:	2c c0       	rjmp	.+88     	; 0x3962 <vfprintf+0x10a>
    390a:	38 2f       	mov	r19, r24
    390c:	30 53       	subi	r19, 0x30	; 48
    390e:	3a 30       	cpi	r19, 0x0A	; 10
    3910:	98 f4       	brcc	.+38     	; 0x3938 <vfprintf+0xe0>
    3912:	26 ff       	sbrs	r18, 6
    3914:	08 c0       	rjmp	.+16     	; 0x3926 <vfprintf+0xce>
    3916:	8e 2d       	mov	r24, r14
    3918:	88 0f       	add	r24, r24
    391a:	e8 2e       	mov	r14, r24
    391c:	ee 0c       	add	r14, r14
    391e:	ee 0c       	add	r14, r14
    3920:	e8 0e       	add	r14, r24
    3922:	e3 0e       	add	r14, r19
    3924:	15 c0       	rjmp	.+42     	; 0x3950 <vfprintf+0xf8>
    3926:	8f 2d       	mov	r24, r15
    3928:	88 0f       	add	r24, r24
    392a:	f8 2e       	mov	r15, r24
    392c:	ff 0c       	add	r15, r15
    392e:	ff 0c       	add	r15, r15
    3930:	f8 0e       	add	r15, r24
    3932:	f3 0e       	add	r15, r19
    3934:	20 62       	ori	r18, 0x20	; 32
    3936:	0c c0       	rjmp	.+24     	; 0x3950 <vfprintf+0xf8>
    3938:	8e 32       	cpi	r24, 0x2E	; 46
    393a:	21 f4       	brne	.+8      	; 0x3944 <vfprintf+0xec>
    393c:	26 fd       	sbrc	r18, 6
    393e:	6c c1       	rjmp	.+728    	; 0x3c18 <vfprintf+0x3c0>
    3940:	20 64       	ori	r18, 0x40	; 64
    3942:	06 c0       	rjmp	.+12     	; 0x3950 <vfprintf+0xf8>
    3944:	8c 36       	cpi	r24, 0x6C	; 108
    3946:	11 f4       	brne	.+4      	; 0x394c <vfprintf+0xf4>
    3948:	20 68       	ori	r18, 0x80	; 128
    394a:	02 c0       	rjmp	.+4      	; 0x3950 <vfprintf+0xf8>
    394c:	88 36       	cpi	r24, 0x68	; 104
    394e:	49 f4       	brne	.+18     	; 0x3962 <vfprintf+0x10a>
    3950:	f1 01       	movw	r30, r2
    3952:	93 fd       	sbrc	r25, 3
    3954:	85 91       	lpm	r24, Z+
    3956:	93 ff       	sbrs	r25, 3
    3958:	81 91       	ld	r24, Z+
    395a:	1f 01       	movw	r2, r30
    395c:	88 23       	and	r24, r24
    395e:	09 f0       	breq	.+2      	; 0x3962 <vfprintf+0x10a>
    3960:	ba cf       	rjmp	.-140    	; 0x38d6 <vfprintf+0x7e>
    3962:	98 2f       	mov	r25, r24
    3964:	95 54       	subi	r25, 0x45	; 69
    3966:	93 30       	cpi	r25, 0x03	; 3
    3968:	18 f0       	brcs	.+6      	; 0x3970 <vfprintf+0x118>
    396a:	90 52       	subi	r25, 0x20	; 32
    396c:	93 30       	cpi	r25, 0x03	; 3
    396e:	28 f4       	brcc	.+10     	; 0x397a <vfprintf+0x122>
    3970:	0c 5f       	subi	r16, 0xFC	; 252
    3972:	1f 4f       	sbci	r17, 0xFF	; 255
    3974:	ff e3       	ldi	r31, 0x3F	; 63
    3976:	f9 83       	std	Y+1, r31	; 0x01
    3978:	0d c0       	rjmp	.+26     	; 0x3994 <vfprintf+0x13c>
    397a:	83 36       	cpi	r24, 0x63	; 99
    397c:	31 f0       	breq	.+12     	; 0x398a <vfprintf+0x132>
    397e:	83 37       	cpi	r24, 0x73	; 115
    3980:	71 f0       	breq	.+28     	; 0x399e <vfprintf+0x146>
    3982:	83 35       	cpi	r24, 0x53	; 83
    3984:	09 f0       	breq	.+2      	; 0x3988 <vfprintf+0x130>
    3986:	5c c0       	rjmp	.+184    	; 0x3a40 <vfprintf+0x1e8>
    3988:	21 c0       	rjmp	.+66     	; 0x39cc <vfprintf+0x174>
    398a:	f8 01       	movw	r30, r16
    398c:	80 81       	ld	r24, Z
    398e:	89 83       	std	Y+1, r24	; 0x01
    3990:	0e 5f       	subi	r16, 0xFE	; 254
    3992:	1f 4f       	sbci	r17, 0xFF	; 255
    3994:	42 01       	movw	r8, r4
    3996:	71 e0       	ldi	r23, 0x01	; 1
    3998:	a7 2e       	mov	r10, r23
    399a:	b1 2c       	mov	r11, r1
    399c:	15 c0       	rjmp	.+42     	; 0x39c8 <vfprintf+0x170>
    399e:	62 e0       	ldi	r22, 0x02	; 2
    39a0:	66 2e       	mov	r6, r22
    39a2:	71 2c       	mov	r7, r1
    39a4:	60 0e       	add	r6, r16
    39a6:	71 1e       	adc	r7, r17
    39a8:	f8 01       	movw	r30, r16
    39aa:	80 80       	ld	r8, Z
    39ac:	91 80       	ldd	r9, Z+1	; 0x01
    39ae:	26 ff       	sbrs	r18, 6
    39b0:	03 c0       	rjmp	.+6      	; 0x39b8 <vfprintf+0x160>
    39b2:	6e 2d       	mov	r22, r14
    39b4:	70 e0       	ldi	r23, 0x00	; 0
    39b6:	02 c0       	rjmp	.+4      	; 0x39bc <vfprintf+0x164>
    39b8:	6f ef       	ldi	r22, 0xFF	; 255
    39ba:	7f ef       	ldi	r23, 0xFF	; 255
    39bc:	c4 01       	movw	r24, r8
    39be:	2c 87       	std	Y+12, r18	; 0x0c
    39c0:	53 d1       	rcall	.+678    	; 0x3c68 <strnlen>
    39c2:	5c 01       	movw	r10, r24
    39c4:	83 01       	movw	r16, r6
    39c6:	2c 85       	ldd	r18, Y+12	; 0x0c
    39c8:	2f 77       	andi	r18, 0x7F	; 127
    39ca:	16 c0       	rjmp	.+44     	; 0x39f8 <vfprintf+0x1a0>
    39cc:	52 e0       	ldi	r21, 0x02	; 2
    39ce:	65 2e       	mov	r6, r21
    39d0:	71 2c       	mov	r7, r1
    39d2:	60 0e       	add	r6, r16
    39d4:	71 1e       	adc	r7, r17
    39d6:	f8 01       	movw	r30, r16
    39d8:	80 80       	ld	r8, Z
    39da:	91 80       	ldd	r9, Z+1	; 0x01
    39dc:	26 ff       	sbrs	r18, 6
    39de:	03 c0       	rjmp	.+6      	; 0x39e6 <vfprintf+0x18e>
    39e0:	6e 2d       	mov	r22, r14
    39e2:	70 e0       	ldi	r23, 0x00	; 0
    39e4:	02 c0       	rjmp	.+4      	; 0x39ea <vfprintf+0x192>
    39e6:	6f ef       	ldi	r22, 0xFF	; 255
    39e8:	7f ef       	ldi	r23, 0xFF	; 255
    39ea:	c4 01       	movw	r24, r8
    39ec:	2c 87       	std	Y+12, r18	; 0x0c
    39ee:	31 d1       	rcall	.+610    	; 0x3c52 <strnlen_P>
    39f0:	5c 01       	movw	r10, r24
    39f2:	2c 85       	ldd	r18, Y+12	; 0x0c
    39f4:	20 68       	ori	r18, 0x80	; 128
    39f6:	83 01       	movw	r16, r6
    39f8:	23 fd       	sbrc	r18, 3
    39fa:	1e c0       	rjmp	.+60     	; 0x3a38 <vfprintf+0x1e0>
    39fc:	07 c0       	rjmp	.+14     	; 0x3a0c <vfprintf+0x1b4>
    39fe:	80 e2       	ldi	r24, 0x20	; 32
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	b6 01       	movw	r22, r12
    3a04:	2c 87       	std	Y+12, r18	; 0x0c
    3a06:	3b d1       	rcall	.+630    	; 0x3c7e <fputc>
    3a08:	fa 94       	dec	r15
    3a0a:	2c 85       	ldd	r18, Y+12	; 0x0c
    3a0c:	8f 2d       	mov	r24, r15
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	a8 16       	cp	r10, r24
    3a12:	b9 06       	cpc	r11, r25
    3a14:	a0 f3       	brcs	.-24     	; 0x39fe <vfprintf+0x1a6>
    3a16:	10 c0       	rjmp	.+32     	; 0x3a38 <vfprintf+0x1e0>
    3a18:	f4 01       	movw	r30, r8
    3a1a:	27 fd       	sbrc	r18, 7
    3a1c:	85 91       	lpm	r24, Z+
    3a1e:	27 ff       	sbrs	r18, 7
    3a20:	81 91       	ld	r24, Z+
    3a22:	4f 01       	movw	r8, r30
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	b6 01       	movw	r22, r12
    3a28:	2c 87       	std	Y+12, r18	; 0x0c
    3a2a:	29 d1       	rcall	.+594    	; 0x3c7e <fputc>
    3a2c:	2c 85       	ldd	r18, Y+12	; 0x0c
    3a2e:	f1 10       	cpse	r15, r1
    3a30:	fa 94       	dec	r15
    3a32:	08 94       	sec
    3a34:	a1 08       	sbc	r10, r1
    3a36:	b1 08       	sbc	r11, r1
    3a38:	a1 14       	cp	r10, r1
    3a3a:	b1 04       	cpc	r11, r1
    3a3c:	69 f7       	brne	.-38     	; 0x3a18 <vfprintf+0x1c0>
    3a3e:	e9 c0       	rjmp	.+466    	; 0x3c12 <vfprintf+0x3ba>
    3a40:	84 36       	cpi	r24, 0x64	; 100
    3a42:	11 f0       	breq	.+4      	; 0x3a48 <vfprintf+0x1f0>
    3a44:	89 36       	cpi	r24, 0x69	; 105
    3a46:	41 f5       	brne	.+80     	; 0x3a98 <vfprintf+0x240>
    3a48:	27 ff       	sbrs	r18, 7
    3a4a:	08 c0       	rjmp	.+16     	; 0x3a5c <vfprintf+0x204>
    3a4c:	f8 01       	movw	r30, r16
    3a4e:	60 81       	ld	r22, Z
    3a50:	71 81       	ldd	r23, Z+1	; 0x01
    3a52:	82 81       	ldd	r24, Z+2	; 0x02
    3a54:	93 81       	ldd	r25, Z+3	; 0x03
    3a56:	0c 5f       	subi	r16, 0xFC	; 252
    3a58:	1f 4f       	sbci	r17, 0xFF	; 255
    3a5a:	09 c0       	rjmp	.+18     	; 0x3a6e <vfprintf+0x216>
    3a5c:	f8 01       	movw	r30, r16
    3a5e:	60 81       	ld	r22, Z
    3a60:	71 81       	ldd	r23, Z+1	; 0x01
    3a62:	88 27       	eor	r24, r24
    3a64:	77 fd       	sbrc	r23, 7
    3a66:	80 95       	com	r24
    3a68:	98 2f       	mov	r25, r24
    3a6a:	0e 5f       	subi	r16, 0xFE	; 254
    3a6c:	1f 4f       	sbci	r17, 0xFF	; 255
    3a6e:	4f e6       	ldi	r20, 0x6F	; 111
    3a70:	b4 2e       	mov	r11, r20
    3a72:	b2 22       	and	r11, r18
    3a74:	97 ff       	sbrs	r25, 7
    3a76:	09 c0       	rjmp	.+18     	; 0x3a8a <vfprintf+0x232>
    3a78:	90 95       	com	r25
    3a7a:	80 95       	com	r24
    3a7c:	70 95       	com	r23
    3a7e:	61 95       	neg	r22
    3a80:	7f 4f       	sbci	r23, 0xFF	; 255
    3a82:	8f 4f       	sbci	r24, 0xFF	; 255
    3a84:	9f 4f       	sbci	r25, 0xFF	; 255
    3a86:	f0 e8       	ldi	r31, 0x80	; 128
    3a88:	bf 2a       	or	r11, r31
    3a8a:	a2 01       	movw	r20, r4
    3a8c:	2a e0       	ldi	r18, 0x0A	; 10
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	22 d1       	rcall	.+580    	; 0x3cd6 <__ultoa_invert>
    3a92:	78 2e       	mov	r7, r24
    3a94:	74 18       	sub	r7, r4
    3a96:	44 c0       	rjmp	.+136    	; 0x3b20 <vfprintf+0x2c8>
    3a98:	85 37       	cpi	r24, 0x75	; 117
    3a9a:	31 f4       	brne	.+12     	; 0x3aa8 <vfprintf+0x250>
    3a9c:	3f ee       	ldi	r19, 0xEF	; 239
    3a9e:	b3 2e       	mov	r11, r19
    3aa0:	b2 22       	and	r11, r18
    3aa2:	2a e0       	ldi	r18, 0x0A	; 10
    3aa4:	30 e0       	ldi	r19, 0x00	; 0
    3aa6:	25 c0       	rjmp	.+74     	; 0x3af2 <vfprintf+0x29a>
    3aa8:	99 ef       	ldi	r25, 0xF9	; 249
    3aaa:	b9 2e       	mov	r11, r25
    3aac:	b2 22       	and	r11, r18
    3aae:	8f 36       	cpi	r24, 0x6F	; 111
    3ab0:	c1 f0       	breq	.+48     	; 0x3ae2 <vfprintf+0x28a>
    3ab2:	80 37       	cpi	r24, 0x70	; 112
    3ab4:	20 f4       	brcc	.+8      	; 0x3abe <vfprintf+0x266>
    3ab6:	88 35       	cpi	r24, 0x58	; 88
    3ab8:	09 f0       	breq	.+2      	; 0x3abc <vfprintf+0x264>
    3aba:	ae c0       	rjmp	.+348    	; 0x3c18 <vfprintf+0x3c0>
    3abc:	0d c0       	rjmp	.+26     	; 0x3ad8 <vfprintf+0x280>
    3abe:	80 37       	cpi	r24, 0x70	; 112
    3ac0:	21 f0       	breq	.+8      	; 0x3aca <vfprintf+0x272>
    3ac2:	88 37       	cpi	r24, 0x78	; 120
    3ac4:	09 f0       	breq	.+2      	; 0x3ac8 <vfprintf+0x270>
    3ac6:	a8 c0       	rjmp	.+336    	; 0x3c18 <vfprintf+0x3c0>
    3ac8:	02 c0       	rjmp	.+4      	; 0x3ace <vfprintf+0x276>
    3aca:	20 e1       	ldi	r18, 0x10	; 16
    3acc:	b2 2a       	or	r11, r18
    3ace:	b4 fe       	sbrs	r11, 4
    3ad0:	0b c0       	rjmp	.+22     	; 0x3ae8 <vfprintf+0x290>
    3ad2:	84 e0       	ldi	r24, 0x04	; 4
    3ad4:	b8 2a       	or	r11, r24
    3ad6:	08 c0       	rjmp	.+16     	; 0x3ae8 <vfprintf+0x290>
    3ad8:	b4 fe       	sbrs	r11, 4
    3ada:	09 c0       	rjmp	.+18     	; 0x3aee <vfprintf+0x296>
    3adc:	e6 e0       	ldi	r30, 0x06	; 6
    3ade:	be 2a       	or	r11, r30
    3ae0:	06 c0       	rjmp	.+12     	; 0x3aee <vfprintf+0x296>
    3ae2:	28 e0       	ldi	r18, 0x08	; 8
    3ae4:	30 e0       	ldi	r19, 0x00	; 0
    3ae6:	05 c0       	rjmp	.+10     	; 0x3af2 <vfprintf+0x29a>
    3ae8:	20 e1       	ldi	r18, 0x10	; 16
    3aea:	30 e0       	ldi	r19, 0x00	; 0
    3aec:	02 c0       	rjmp	.+4      	; 0x3af2 <vfprintf+0x29a>
    3aee:	20 e1       	ldi	r18, 0x10	; 16
    3af0:	32 e0       	ldi	r19, 0x02	; 2
    3af2:	b7 fe       	sbrs	r11, 7
    3af4:	08 c0       	rjmp	.+16     	; 0x3b06 <vfprintf+0x2ae>
    3af6:	f8 01       	movw	r30, r16
    3af8:	60 81       	ld	r22, Z
    3afa:	71 81       	ldd	r23, Z+1	; 0x01
    3afc:	82 81       	ldd	r24, Z+2	; 0x02
    3afe:	93 81       	ldd	r25, Z+3	; 0x03
    3b00:	0c 5f       	subi	r16, 0xFC	; 252
    3b02:	1f 4f       	sbci	r17, 0xFF	; 255
    3b04:	07 c0       	rjmp	.+14     	; 0x3b14 <vfprintf+0x2bc>
    3b06:	f8 01       	movw	r30, r16
    3b08:	60 81       	ld	r22, Z
    3b0a:	71 81       	ldd	r23, Z+1	; 0x01
    3b0c:	80 e0       	ldi	r24, 0x00	; 0
    3b0e:	90 e0       	ldi	r25, 0x00	; 0
    3b10:	0e 5f       	subi	r16, 0xFE	; 254
    3b12:	1f 4f       	sbci	r17, 0xFF	; 255
    3b14:	a2 01       	movw	r20, r4
    3b16:	df d0       	rcall	.+446    	; 0x3cd6 <__ultoa_invert>
    3b18:	78 2e       	mov	r7, r24
    3b1a:	74 18       	sub	r7, r4
    3b1c:	ff e7       	ldi	r31, 0x7F	; 127
    3b1e:	bf 22       	and	r11, r31
    3b20:	b6 fe       	sbrs	r11, 6
    3b22:	0b c0       	rjmp	.+22     	; 0x3b3a <vfprintf+0x2e2>
    3b24:	2e ef       	ldi	r18, 0xFE	; 254
    3b26:	b2 22       	and	r11, r18
    3b28:	7e 14       	cp	r7, r14
    3b2a:	38 f4       	brcc	.+14     	; 0x3b3a <vfprintf+0x2e2>
    3b2c:	b4 fe       	sbrs	r11, 4
    3b2e:	07 c0       	rjmp	.+14     	; 0x3b3e <vfprintf+0x2e6>
    3b30:	b2 fc       	sbrc	r11, 2
    3b32:	05 c0       	rjmp	.+10     	; 0x3b3e <vfprintf+0x2e6>
    3b34:	8f ee       	ldi	r24, 0xEF	; 239
    3b36:	b8 22       	and	r11, r24
    3b38:	02 c0       	rjmp	.+4      	; 0x3b3e <vfprintf+0x2e6>
    3b3a:	a7 2c       	mov	r10, r7
    3b3c:	01 c0       	rjmp	.+2      	; 0x3b40 <vfprintf+0x2e8>
    3b3e:	ae 2c       	mov	r10, r14
    3b40:	8b 2d       	mov	r24, r11
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	b4 fe       	sbrs	r11, 4
    3b46:	0d c0       	rjmp	.+26     	; 0x3b62 <vfprintf+0x30a>
    3b48:	fe 01       	movw	r30, r28
    3b4a:	e7 0d       	add	r30, r7
    3b4c:	f1 1d       	adc	r31, r1
    3b4e:	20 81       	ld	r18, Z
    3b50:	20 33       	cpi	r18, 0x30	; 48
    3b52:	19 f4       	brne	.+6      	; 0x3b5a <vfprintf+0x302>
    3b54:	e9 ee       	ldi	r30, 0xE9	; 233
    3b56:	be 22       	and	r11, r30
    3b58:	09 c0       	rjmp	.+18     	; 0x3b6c <vfprintf+0x314>
    3b5a:	a3 94       	inc	r10
    3b5c:	b2 fe       	sbrs	r11, 2
    3b5e:	06 c0       	rjmp	.+12     	; 0x3b6c <vfprintf+0x314>
    3b60:	04 c0       	rjmp	.+8      	; 0x3b6a <vfprintf+0x312>
    3b62:	86 78       	andi	r24, 0x86	; 134
    3b64:	90 70       	andi	r25, 0x00	; 0
    3b66:	00 97       	sbiw	r24, 0x00	; 0
    3b68:	09 f0       	breq	.+2      	; 0x3b6c <vfprintf+0x314>
    3b6a:	a3 94       	inc	r10
    3b6c:	8b 2c       	mov	r8, r11
    3b6e:	99 24       	eor	r9, r9
    3b70:	b3 fc       	sbrc	r11, 3
    3b72:	13 c0       	rjmp	.+38     	; 0x3b9a <vfprintf+0x342>
    3b74:	b0 fe       	sbrs	r11, 0
    3b76:	0e c0       	rjmp	.+28     	; 0x3b94 <vfprintf+0x33c>
    3b78:	af 14       	cp	r10, r15
    3b7a:	28 f4       	brcc	.+10     	; 0x3b86 <vfprintf+0x32e>
    3b7c:	e7 2c       	mov	r14, r7
    3b7e:	ef 0c       	add	r14, r15
    3b80:	ea 18       	sub	r14, r10
    3b82:	af 2c       	mov	r10, r15
    3b84:	07 c0       	rjmp	.+14     	; 0x3b94 <vfprintf+0x33c>
    3b86:	e7 2c       	mov	r14, r7
    3b88:	05 c0       	rjmp	.+10     	; 0x3b94 <vfprintf+0x33c>
    3b8a:	80 e2       	ldi	r24, 0x20	; 32
    3b8c:	90 e0       	ldi	r25, 0x00	; 0
    3b8e:	b6 01       	movw	r22, r12
    3b90:	76 d0       	rcall	.+236    	; 0x3c7e <fputc>
    3b92:	a3 94       	inc	r10
    3b94:	af 14       	cp	r10, r15
    3b96:	c8 f3       	brcs	.-14     	; 0x3b8a <vfprintf+0x332>
    3b98:	04 c0       	rjmp	.+8      	; 0x3ba2 <vfprintf+0x34a>
    3b9a:	af 14       	cp	r10, r15
    3b9c:	10 f4       	brcc	.+4      	; 0x3ba2 <vfprintf+0x34a>
    3b9e:	fa 18       	sub	r15, r10
    3ba0:	01 c0       	rjmp	.+2      	; 0x3ba4 <vfprintf+0x34c>
    3ba2:	ff 24       	eor	r15, r15
    3ba4:	84 fe       	sbrs	r8, 4
    3ba6:	0e c0       	rjmp	.+28     	; 0x3bc4 <vfprintf+0x36c>
    3ba8:	80 e3       	ldi	r24, 0x30	; 48
    3baa:	90 e0       	ldi	r25, 0x00	; 0
    3bac:	b6 01       	movw	r22, r12
    3bae:	67 d0       	rcall	.+206    	; 0x3c7e <fputc>
    3bb0:	82 fe       	sbrs	r8, 2
    3bb2:	1d c0       	rjmp	.+58     	; 0x3bee <vfprintf+0x396>
    3bb4:	81 fe       	sbrs	r8, 1
    3bb6:	03 c0       	rjmp	.+6      	; 0x3bbe <vfprintf+0x366>
    3bb8:	88 e5       	ldi	r24, 0x58	; 88
    3bba:	90 e0       	ldi	r25, 0x00	; 0
    3bbc:	10 c0       	rjmp	.+32     	; 0x3bde <vfprintf+0x386>
    3bbe:	88 e7       	ldi	r24, 0x78	; 120
    3bc0:	90 e0       	ldi	r25, 0x00	; 0
    3bc2:	0d c0       	rjmp	.+26     	; 0x3bde <vfprintf+0x386>
    3bc4:	c4 01       	movw	r24, r8
    3bc6:	86 78       	andi	r24, 0x86	; 134
    3bc8:	90 70       	andi	r25, 0x00	; 0
    3bca:	00 97       	sbiw	r24, 0x00	; 0
    3bcc:	81 f0       	breq	.+32     	; 0x3bee <vfprintf+0x396>
    3bce:	81 fc       	sbrc	r8, 1
    3bd0:	02 c0       	rjmp	.+4      	; 0x3bd6 <vfprintf+0x37e>
    3bd2:	80 e2       	ldi	r24, 0x20	; 32
    3bd4:	01 c0       	rjmp	.+2      	; 0x3bd8 <vfprintf+0x380>
    3bd6:	8b e2       	ldi	r24, 0x2B	; 43
    3bd8:	b7 fc       	sbrc	r11, 7
    3bda:	8d e2       	ldi	r24, 0x2D	; 45
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	b6 01       	movw	r22, r12
    3be0:	4e d0       	rcall	.+156    	; 0x3c7e <fputc>
    3be2:	05 c0       	rjmp	.+10     	; 0x3bee <vfprintf+0x396>
    3be4:	80 e3       	ldi	r24, 0x30	; 48
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	b6 01       	movw	r22, r12
    3bea:	49 d0       	rcall	.+146    	; 0x3c7e <fputc>
    3bec:	ea 94       	dec	r14
    3bee:	7e 14       	cp	r7, r14
    3bf0:	c8 f3       	brcs	.-14     	; 0x3be4 <vfprintf+0x38c>
    3bf2:	7a 94       	dec	r7
    3bf4:	f2 01       	movw	r30, r4
    3bf6:	e7 0d       	add	r30, r7
    3bf8:	f1 1d       	adc	r31, r1
    3bfa:	80 81       	ld	r24, Z
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	b6 01       	movw	r22, r12
    3c00:	3e d0       	rcall	.+124    	; 0x3c7e <fputc>
    3c02:	77 20       	and	r7, r7
    3c04:	b1 f7       	brne	.-20     	; 0x3bf2 <vfprintf+0x39a>
    3c06:	05 c0       	rjmp	.+10     	; 0x3c12 <vfprintf+0x3ba>
    3c08:	80 e2       	ldi	r24, 0x20	; 32
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	b6 01       	movw	r22, r12
    3c0e:	37 d0       	rcall	.+110    	; 0x3c7e <fputc>
    3c10:	fa 94       	dec	r15
    3c12:	ff 20       	and	r15, r15
    3c14:	c9 f7       	brne	.-14     	; 0x3c08 <vfprintf+0x3b0>
    3c16:	44 ce       	rjmp	.-888    	; 0x38a0 <vfprintf+0x48>
    3c18:	f6 01       	movw	r30, r12
    3c1a:	26 81       	ldd	r18, Z+6	; 0x06
    3c1c:	37 81       	ldd	r19, Z+7	; 0x07
    3c1e:	02 c0       	rjmp	.+4      	; 0x3c24 <vfprintf+0x3cc>
    3c20:	2f ef       	ldi	r18, 0xFF	; 255
    3c22:	3f ef       	ldi	r19, 0xFF	; 255
    3c24:	c9 01       	movw	r24, r18
    3c26:	2c 96       	adiw	r28, 0x0c	; 12
    3c28:	cd bf       	out	0x3d, r28	; 61
    3c2a:	de bf       	out	0x3e, r29	; 62
    3c2c:	cf 91       	pop	r28
    3c2e:	df 91       	pop	r29
    3c30:	1f 91       	pop	r17
    3c32:	0f 91       	pop	r16
    3c34:	ff 90       	pop	r15
    3c36:	ef 90       	pop	r14
    3c38:	df 90       	pop	r13
    3c3a:	cf 90       	pop	r12
    3c3c:	bf 90       	pop	r11
    3c3e:	af 90       	pop	r10
    3c40:	9f 90       	pop	r9
    3c42:	8f 90       	pop	r8
    3c44:	7f 90       	pop	r7
    3c46:	6f 90       	pop	r6
    3c48:	5f 90       	pop	r5
    3c4a:	4f 90       	pop	r4
    3c4c:	3f 90       	pop	r3
    3c4e:	2f 90       	pop	r2
    3c50:	08 95       	ret

00003c52 <strnlen_P>:
    3c52:	fc 01       	movw	r30, r24
    3c54:	05 90       	lpm	r0, Z+
    3c56:	61 50       	subi	r22, 0x01	; 1
    3c58:	70 40       	sbci	r23, 0x00	; 0
    3c5a:	01 10       	cpse	r0, r1
    3c5c:	d8 f7       	brcc	.-10     	; 0x3c54 <strnlen_P+0x2>
    3c5e:	80 95       	com	r24
    3c60:	90 95       	com	r25
    3c62:	8e 0f       	add	r24, r30
    3c64:	9f 1f       	adc	r25, r31
    3c66:	08 95       	ret

00003c68 <strnlen>:
    3c68:	fc 01       	movw	r30, r24
    3c6a:	61 50       	subi	r22, 0x01	; 1
    3c6c:	70 40       	sbci	r23, 0x00	; 0
    3c6e:	01 90       	ld	r0, Z+
    3c70:	01 10       	cpse	r0, r1
    3c72:	d8 f7       	brcc	.-10     	; 0x3c6a <strnlen+0x2>
    3c74:	80 95       	com	r24
    3c76:	90 95       	com	r25
    3c78:	8e 0f       	add	r24, r30
    3c7a:	9f 1f       	adc	r25, r31
    3c7c:	08 95       	ret

00003c7e <fputc>:
    3c7e:	0f 93       	push	r16
    3c80:	1f 93       	push	r17
    3c82:	cf 93       	push	r28
    3c84:	df 93       	push	r29
    3c86:	8c 01       	movw	r16, r24
    3c88:	eb 01       	movw	r28, r22
    3c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c8c:	81 ff       	sbrs	r24, 1
    3c8e:	1b c0       	rjmp	.+54     	; 0x3cc6 <fputc+0x48>
    3c90:	82 ff       	sbrs	r24, 2
    3c92:	0d c0       	rjmp	.+26     	; 0x3cae <fputc+0x30>
    3c94:	2e 81       	ldd	r18, Y+6	; 0x06
    3c96:	3f 81       	ldd	r19, Y+7	; 0x07
    3c98:	8c 81       	ldd	r24, Y+4	; 0x04
    3c9a:	9d 81       	ldd	r25, Y+5	; 0x05
    3c9c:	28 17       	cp	r18, r24
    3c9e:	39 07       	cpc	r19, r25
    3ca0:	64 f4       	brge	.+24     	; 0x3cba <fputc+0x3c>
    3ca2:	e8 81       	ld	r30, Y
    3ca4:	f9 81       	ldd	r31, Y+1	; 0x01
    3ca6:	01 93       	st	Z+, r16
    3ca8:	e8 83       	st	Y, r30
    3caa:	f9 83       	std	Y+1, r31	; 0x01
    3cac:	06 c0       	rjmp	.+12     	; 0x3cba <fputc+0x3c>
    3cae:	e8 85       	ldd	r30, Y+8	; 0x08
    3cb0:	f9 85       	ldd	r31, Y+9	; 0x09
    3cb2:	80 2f       	mov	r24, r16
    3cb4:	19 95       	eicall
    3cb6:	00 97       	sbiw	r24, 0x00	; 0
    3cb8:	31 f4       	brne	.+12     	; 0x3cc6 <fputc+0x48>
    3cba:	8e 81       	ldd	r24, Y+6	; 0x06
    3cbc:	9f 81       	ldd	r25, Y+7	; 0x07
    3cbe:	01 96       	adiw	r24, 0x01	; 1
    3cc0:	8e 83       	std	Y+6, r24	; 0x06
    3cc2:	9f 83       	std	Y+7, r25	; 0x07
    3cc4:	02 c0       	rjmp	.+4      	; 0x3cca <fputc+0x4c>
    3cc6:	0f ef       	ldi	r16, 0xFF	; 255
    3cc8:	1f ef       	ldi	r17, 0xFF	; 255
    3cca:	c8 01       	movw	r24, r16
    3ccc:	df 91       	pop	r29
    3cce:	cf 91       	pop	r28
    3cd0:	1f 91       	pop	r17
    3cd2:	0f 91       	pop	r16
    3cd4:	08 95       	ret

00003cd6 <__ultoa_invert>:
    3cd6:	fa 01       	movw	r30, r20
    3cd8:	aa 27       	eor	r26, r26
    3cda:	28 30       	cpi	r18, 0x08	; 8
    3cdc:	51 f1       	breq	.+84     	; 0x3d32 <__ultoa_invert+0x5c>
    3cde:	20 31       	cpi	r18, 0x10	; 16
    3ce0:	81 f1       	breq	.+96     	; 0x3d42 <__ultoa_invert+0x6c>
    3ce2:	e8 94       	clt
    3ce4:	6f 93       	push	r22
    3ce6:	6e 7f       	andi	r22, 0xFE	; 254
    3ce8:	6e 5f       	subi	r22, 0xFE	; 254
    3cea:	7f 4f       	sbci	r23, 0xFF	; 255
    3cec:	8f 4f       	sbci	r24, 0xFF	; 255
    3cee:	9f 4f       	sbci	r25, 0xFF	; 255
    3cf0:	af 4f       	sbci	r26, 0xFF	; 255
    3cf2:	b1 e0       	ldi	r27, 0x01	; 1
    3cf4:	3e d0       	rcall	.+124    	; 0x3d72 <__ultoa_invert+0x9c>
    3cf6:	b4 e0       	ldi	r27, 0x04	; 4
    3cf8:	3c d0       	rcall	.+120    	; 0x3d72 <__ultoa_invert+0x9c>
    3cfa:	67 0f       	add	r22, r23
    3cfc:	78 1f       	adc	r23, r24
    3cfe:	89 1f       	adc	r24, r25
    3d00:	9a 1f       	adc	r25, r26
    3d02:	a1 1d       	adc	r26, r1
    3d04:	68 0f       	add	r22, r24
    3d06:	79 1f       	adc	r23, r25
    3d08:	8a 1f       	adc	r24, r26
    3d0a:	91 1d       	adc	r25, r1
    3d0c:	a1 1d       	adc	r26, r1
    3d0e:	6a 0f       	add	r22, r26
    3d10:	71 1d       	adc	r23, r1
    3d12:	81 1d       	adc	r24, r1
    3d14:	91 1d       	adc	r25, r1
    3d16:	a1 1d       	adc	r26, r1
    3d18:	20 d0       	rcall	.+64     	; 0x3d5a <__ultoa_invert+0x84>
    3d1a:	09 f4       	brne	.+2      	; 0x3d1e <__ultoa_invert+0x48>
    3d1c:	68 94       	set
    3d1e:	3f 91       	pop	r19
    3d20:	2a e0       	ldi	r18, 0x0A	; 10
    3d22:	26 9f       	mul	r18, r22
    3d24:	11 24       	eor	r1, r1
    3d26:	30 19       	sub	r19, r0
    3d28:	30 5d       	subi	r19, 0xD0	; 208
    3d2a:	31 93       	st	Z+, r19
    3d2c:	de f6       	brtc	.-74     	; 0x3ce4 <__ultoa_invert+0xe>
    3d2e:	cf 01       	movw	r24, r30
    3d30:	08 95       	ret
    3d32:	46 2f       	mov	r20, r22
    3d34:	47 70       	andi	r20, 0x07	; 7
    3d36:	40 5d       	subi	r20, 0xD0	; 208
    3d38:	41 93       	st	Z+, r20
    3d3a:	b3 e0       	ldi	r27, 0x03	; 3
    3d3c:	0f d0       	rcall	.+30     	; 0x3d5c <__ultoa_invert+0x86>
    3d3e:	c9 f7       	brne	.-14     	; 0x3d32 <__ultoa_invert+0x5c>
    3d40:	f6 cf       	rjmp	.-20     	; 0x3d2e <__ultoa_invert+0x58>
    3d42:	46 2f       	mov	r20, r22
    3d44:	4f 70       	andi	r20, 0x0F	; 15
    3d46:	40 5d       	subi	r20, 0xD0	; 208
    3d48:	4a 33       	cpi	r20, 0x3A	; 58
    3d4a:	18 f0       	brcs	.+6      	; 0x3d52 <__ultoa_invert+0x7c>
    3d4c:	49 5d       	subi	r20, 0xD9	; 217
    3d4e:	31 fd       	sbrc	r19, 1
    3d50:	40 52       	subi	r20, 0x20	; 32
    3d52:	41 93       	st	Z+, r20
    3d54:	02 d0       	rcall	.+4      	; 0x3d5a <__ultoa_invert+0x84>
    3d56:	a9 f7       	brne	.-22     	; 0x3d42 <__ultoa_invert+0x6c>
    3d58:	ea cf       	rjmp	.-44     	; 0x3d2e <__ultoa_invert+0x58>
    3d5a:	b4 e0       	ldi	r27, 0x04	; 4
    3d5c:	a6 95       	lsr	r26
    3d5e:	97 95       	ror	r25
    3d60:	87 95       	ror	r24
    3d62:	77 95       	ror	r23
    3d64:	67 95       	ror	r22
    3d66:	ba 95       	dec	r27
    3d68:	c9 f7       	brne	.-14     	; 0x3d5c <__ultoa_invert+0x86>
    3d6a:	00 97       	sbiw	r24, 0x00	; 0
    3d6c:	61 05       	cpc	r22, r1
    3d6e:	71 05       	cpc	r23, r1
    3d70:	08 95       	ret
    3d72:	9b 01       	movw	r18, r22
    3d74:	ac 01       	movw	r20, r24
    3d76:	0a 2e       	mov	r0, r26
    3d78:	06 94       	lsr	r0
    3d7a:	57 95       	ror	r21
    3d7c:	47 95       	ror	r20
    3d7e:	37 95       	ror	r19
    3d80:	27 95       	ror	r18
    3d82:	ba 95       	dec	r27
    3d84:	c9 f7       	brne	.-14     	; 0x3d78 <__ultoa_invert+0xa2>
    3d86:	62 0f       	add	r22, r18
    3d88:	73 1f       	adc	r23, r19
    3d8a:	84 1f       	adc	r24, r20
    3d8c:	95 1f       	adc	r25, r21
    3d8e:	a0 1d       	adc	r26, r0
    3d90:	08 95       	ret

00003d92 <_exit>:
    3d92:	f8 94       	cli

00003d94 <__stop_program>:
    3d94:	ff cf       	rjmp	.-2      	; 0x3d94 <__stop_program>
